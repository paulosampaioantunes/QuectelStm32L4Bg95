
QuectelStm32Bg95Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  08006098  08006098  00007098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067dc  080067dc  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080067dc  080067dc  000077dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067e4  080067e4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e4  080067e4  000077e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080067ec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000068  08006854  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08006854  0000828c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f405  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002652  00000000  00000000  0001749d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00019af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a42  00000000  00000000  0001a858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b65d  00000000  00000000  0001b29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000facf  00000000  00000000  000368f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8c4d  00000000  00000000  000463c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000424c  00000000  00000000  000ef058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f32a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006080 	.word	0x08006080

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006080 	.word	0x08006080

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fe01 	bl	800117a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f814 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f938 	bl	80007f0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000580:	f000 f872 	bl	8000668 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f904 	bl	8000790 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  InitialConfigBg95();
 8000588:	f000 f980 	bl	800088c <InitialConfigBg95>
	  ConfigPdpContext();
 800058c:	f000 fb1a 	bl	8000bc4 <ConfigPdpContext>
	  ActivePdp();
 8000590:	f000 fb9a 	bl	8000cc8 <ActivePdp>
	  ConfigMqttContext();
 8000594:	f000 fb66 	bl	8000c64 <ConfigMqttContext>
	  MqttConfigBeforeConnection();
 8000598:	f000 fbd6 	bl	8000d48 <MqttConfigBeforeConnection>
	  MqttConnectAndSubscribe();
 800059c:	f000 fbb4 	bl	8000d08 <MqttConnectAndSubscribe>
	  InitialConfigBg95();
 80005a0:	bf00      	nop
 80005a2:	e7f1      	b.n	8000588 <main+0x18>

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	@ 0x58
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	@ 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 f99a 	bl	80048ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ca:	f001 f98f 	bl	80018ec <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d4:	f000 fbe0 	bl	8000d98 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d8:	f001 f96a 	bl	80018b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <SystemClock_Config+0xc0>)
 80005de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005e2:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <SystemClock_Config+0xc0>)
 80005e4:	f023 0318 	bic.w	r3, r3, #24
 80005e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80005ec:	231c      	movs	r3, #28
 80005ee:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000600:	2360      	movs	r3, #96	@ 0x60
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000608:	2301      	movs	r3, #1
 800060a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000610:	2328      	movs	r3, #40	@ 0x28
 8000612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f9b9 	bl	8001998 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800062c:	f000 fbb4 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2303      	movs	r3, #3
 8000636:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	2104      	movs	r1, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fe07 	bl	800225c <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000654:	f000 fba0 	bl	8000d98 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000658:	f002 f9aa 	bl	80029b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800065c:	bf00      	nop
 800065e:	3758      	adds	r7, #88	@ 0x58
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b092      	sub	sp, #72	@ 0x48
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800066e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800067e:	2300      	movs	r3, #0
 8000680:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	222c      	movs	r2, #44	@ 0x2c
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f004 f92f 	bl	80048ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800068e:	4b3e      	ldr	r3, [pc, #248]	@ (8000788 <MX_RTC_Init+0x120>)
 8000690:	4a3e      	ldr	r2, [pc, #248]	@ (800078c <MX_RTC_Init+0x124>)
 8000692:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000694:	4b3c      	ldr	r3, [pc, #240]	@ (8000788 <MX_RTC_Init+0x120>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800069a:	4b3b      	ldr	r3, [pc, #236]	@ (8000788 <MX_RTC_Init+0x120>)
 800069c:	227f      	movs	r2, #127	@ 0x7f
 800069e:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80006a0:	4b39      	ldr	r3, [pc, #228]	@ (8000788 <MX_RTC_Init+0x120>)
 80006a2:	22ff      	movs	r2, #255	@ 0xff
 80006a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006a6:	4b38      	ldr	r3, [pc, #224]	@ (8000788 <MX_RTC_Init+0x120>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ac:	4b36      	ldr	r3, [pc, #216]	@ (8000788 <MX_RTC_Init+0x120>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006b2:	4b35      	ldr	r3, [pc, #212]	@ (8000788 <MX_RTC_Init+0x120>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006b8:	4b33      	ldr	r3, [pc, #204]	@ (8000788 <MX_RTC_Init+0x120>)
 80006ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006be:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006c0:	4b31      	ldr	r3, [pc, #196]	@ (8000788 <MX_RTC_Init+0x120>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006c6:	4830      	ldr	r0, [pc, #192]	@ (8000788 <MX_RTC_Init+0x120>)
 80006c8:	f002 f982 	bl	80029d0 <HAL_RTC_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 fb61 	bl	8000d98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ec:	2300      	movs	r3, #0
 80006ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006f4:	2201      	movs	r2, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	4823      	ldr	r0, [pc, #140]	@ (8000788 <MX_RTC_Init+0x120>)
 80006fa:	f002 f9f9 	bl	8002af0 <HAL_RTC_SetTime>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000704:	f000 fb48 	bl	8000d98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000708:	2301      	movs	r3, #1
 800070a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800070e:	2301      	movs	r3, #1
 8000710:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x1;
 8000714:	2301      	movs	r3, #1
 8000716:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x0;
 800071a:	2300      	movs	r3, #0
 800071c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000720:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000724:	2201      	movs	r2, #1
 8000726:	4619      	mov	r1, r3
 8000728:	4817      	ldr	r0, [pc, #92]	@ (8000788 <MX_RTC_Init+0x120>)
 800072a:	f002 fa7e 	bl	8002c2a <HAL_RTC_SetDate>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8000734:	f000 fb30 	bl	8000d98 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000738:	2300      	movs	r3, #0
 800073a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800073c:	2300      	movs	r3, #0
 800073e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000740:	2300      	movs	r3, #0
 8000742:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800075c:	2301      	movs	r3, #1
 800075e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000762:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2201      	movs	r2, #1
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_RTC_Init+0x120>)
 8000770:	f002 fae2 	bl	8002d38 <HAL_RTC_SetAlarm_IT>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_RTC_Init+0x116>
  {
    Error_Handler();
 800077a:	f000 fb0d 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3748      	adds	r7, #72	@ 0x48
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000084 	.word	0x20000084
 800078c:	40002800 	.word	0x40002800

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <MX_USART2_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007d4:	f002 fc9a 	bl	800310c <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 fadb 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000b0 	.word	0x200000b0
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_GPIO_Init+0x44>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000834 <MX_GPIO_Init+0x44>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_GPIO_Init+0x44>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_GPIO_Init+0x44>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <MX_GPIO_Init+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_GPIO_Init+0x44>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <sendATCommand>:

/* USER CODE BEGIN 4 */
void sendATCommand(char* command) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fcc5 	bl	80001d0 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29a      	uxth	r2, r3
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	4803      	ldr	r0, [pc, #12]	@ (8000860 <sendATCommand+0x28>)
 8000852:	f002 fca9 	bl	80031a8 <HAL_UART_Transmit>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000b0 	.word	0x200000b0

08000864 <receiveResponse>:
void receiveResponse(char* buffer, uint16_t bufferSize) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	807b      	strh	r3, [r7, #2]
    HAL_UART_Receive(&huart2, (uint8_t*)buffer, bufferSize, HAL_MAX_DELAY);
 8000870:	887a      	ldrh	r2, [r7, #2]
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <receiveResponse+0x24>)
 800087a:	f002 fd1e 	bl	80032ba <HAL_UART_Receive>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000b0 	.word	0x200000b0

0800088c <InitialConfigBg95>:

void InitialConfigBg95() {
 800088c:	b580      	push	{r7, lr}
 800088e:	b0c4      	sub	sp, #272	@ 0x110
 8000890:	af00      	add	r7, sp, #0
    char command[128];    // Buffer para os comandos AT

    // Transmitir os comandos AT pela UART2

    // Comando AT+CCID
    sendATCommand("AT+CCID\r\n");
 8000892:	48a9      	ldr	r0, [pc, #676]	@ (8000b38 <InitialConfigBg95+0x2ac>)
 8000894:	f7ff ffd0 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000898:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800089c:	f000 fce2 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 80008a0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80008a4:	2180      	movs	r1, #128	@ 0x80
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ffdc 	bl	8000864 <receiveResponse>
    printf("Resposta AT+CCID: %s\n", response);
 80008ac:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80008b0:	4619      	mov	r1, r3
 80008b2:	48a2      	ldr	r0, [pc, #648]	@ (8000b3c <InitialConfigBg95+0x2b0>)
 80008b4:	f003 fe72 	bl	800459c <iprintf>

    // Comando AT+CIMI
    sendATCommand("AT+CIMI\r\n");
 80008b8:	48a1      	ldr	r0, [pc, #644]	@ (8000b40 <InitialConfigBg95+0x2b4>)
 80008ba:	f7ff ffbd 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80008be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008c2:	f000 fccf 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 80008c6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80008ca:	2180      	movs	r1, #128	@ 0x80
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ffc9 	bl	8000864 <receiveResponse>
    printf("Resposta AT+CIMI: %s\n", response);
 80008d2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80008d6:	4619      	mov	r1, r3
 80008d8:	489a      	ldr	r0, [pc, #616]	@ (8000b44 <InitialConfigBg95+0x2b8>)
 80008da:	f003 fe5f 	bl	800459c <iprintf>

    // Comando AT+CFUN=0
    sendATCommand("AT+CFUN=0\r\n");
 80008de:	489a      	ldr	r0, [pc, #616]	@ (8000b48 <InitialConfigBg95+0x2bc>)
 80008e0:	f7ff ffaa 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80008e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e8:	f000 fcbc 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 80008ec:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80008f0:	2180      	movs	r1, #128	@ 0x80
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ffb6 	bl	8000864 <receiveResponse>
    printf("Resposta AT+CFUN=0: %s\n", response);
 80008f8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80008fc:	4619      	mov	r1, r3
 80008fe:	4893      	ldr	r0, [pc, #588]	@ (8000b4c <InitialConfigBg95+0x2c0>)
 8000900:	f003 fe4c 	bl	800459c <iprintf>

    // Comando AT+QCFG="nwscanmode",0,1
    sendATCommand("AT+QCFG=\"nwscanmode\",0,1\r\n");
 8000904:	4892      	ldr	r0, [pc, #584]	@ (8000b50 <InitialConfigBg95+0x2c4>)
 8000906:	f7ff ff97 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 800090a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800090e:	f000 fca9 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 8000912:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000916:	2180      	movs	r1, #128	@ 0x80
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ffa3 	bl	8000864 <receiveResponse>
    printf("Resposta AT+QCFG=\"nwscanmode\": %s\n", response);
 800091e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000922:	4619      	mov	r1, r3
 8000924:	488b      	ldr	r0, [pc, #556]	@ (8000b54 <InitialConfigBg95+0x2c8>)
 8000926:	f003 fe39 	bl	800459c <iprintf>

    // Comando AT+QCFG="nwscanseq",020103,1
    sendATCommand("AT+QCFG=\"nwscanseq\",020103,1\r\n");
 800092a:	488b      	ldr	r0, [pc, #556]	@ (8000b58 <InitialConfigBg95+0x2cc>)
 800092c:	f7ff ff84 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000930:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000934:	f000 fc96 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 8000938:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800093c:	2180      	movs	r1, #128	@ 0x80
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff90 	bl	8000864 <receiveResponse>
    printf("Resposta AT+QCFG=\"nwscanseq\": %s\n", response);
 8000944:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000948:	4619      	mov	r1, r3
 800094a:	4884      	ldr	r0, [pc, #528]	@ (8000b5c <InitialConfigBg95+0x2d0>)
 800094c:	f003 fe26 	bl	800459c <iprintf>

    // Comando AT+QCFG="band",0,0
    sendATCommand("AT+QCFG=\"band\",0,0\r\n");
 8000950:	4883      	ldr	r0, [pc, #524]	@ (8000b60 <InitialConfigBg95+0x2d4>)
 8000952:	f7ff ff71 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000956:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800095a:	f000 fc83 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 800095e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000962:	2180      	movs	r1, #128	@ 0x80
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff7d 	bl	8000864 <receiveResponse>
    printf("Resposta AT+QCFG=\"band\": %s\n", response);
 800096a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800096e:	4619      	mov	r1, r3
 8000970:	487c      	ldr	r0, [pc, #496]	@ (8000b64 <InitialConfigBg95+0x2d8>)
 8000972:	f003 fe13 	bl	800459c <iprintf>

    // Comando AT+COPS=0
    sendATCommand("AT+COPS=0\r\n");
 8000976:	487c      	ldr	r0, [pc, #496]	@ (8000b68 <InitialConfigBg95+0x2dc>)
 8000978:	f7ff ff5e 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 800097c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000980:	f000 fc70 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 8000984:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff6a 	bl	8000864 <receiveResponse>
    printf("Resposta AT+COPS=0: %s\n", response);
 8000990:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000994:	4619      	mov	r1, r3
 8000996:	4875      	ldr	r0, [pc, #468]	@ (8000b6c <InitialConfigBg95+0x2e0>)
 8000998:	f003 fe00 	bl	800459c <iprintf>

    // Configurar o APN, username e password para a Vivo
    sendATCommand("AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"datatem\",\"datatem\"\r\n");
 800099c:	4874      	ldr	r0, [pc, #464]	@ (8000b70 <InitialConfigBg95+0x2e4>)
 800099e:	f7ff ff4b 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80009a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a6:	f000 fc5d 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 80009aa:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80009ae:	2180      	movs	r1, #128	@ 0x80
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff57 	bl	8000864 <receiveResponse>
    printf("Resposta AT+CGDCONT: %s\n", response);
 80009b6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80009ba:	4619      	mov	r1, r3
 80009bc:	486d      	ldr	r0, [pc, #436]	@ (8000b74 <InitialConfigBg95+0x2e8>)
 80009be:	f003 fded 	bl	800459c <iprintf>

    // Comando AT+CFUN=1
    sendATCommand("AT+CFUN=1\r\n");
 80009c2:	486d      	ldr	r0, [pc, #436]	@ (8000b78 <InitialConfigBg95+0x2ec>)
 80009c4:	f7ff ff38 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80009c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009cc:	f000 fc4a 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 80009d0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80009d4:	2180      	movs	r1, #128	@ 0x80
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff44 	bl	8000864 <receiveResponse>
    printf("Resposta AT+CFUN=1: %s\n", response);
 80009dc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80009e0:	4619      	mov	r1, r3
 80009e2:	4866      	ldr	r0, [pc, #408]	@ (8000b7c <InitialConfigBg95+0x2f0>)
 80009e4:	f003 fdda 	bl	800459c <iprintf>

    // Comando AT+CREG=1;+CGREG=1;+CEREG=1
    sendATCommand("AT+CREG=1;+CGREG=1;+CEREG=1\r\n");
 80009e8:	4865      	ldr	r0, [pc, #404]	@ (8000b80 <InitialConfigBg95+0x2f4>)
 80009ea:	f7ff ff25 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80009ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f2:	f000 fc37 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 80009f6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80009fa:	2180      	movs	r1, #128	@ 0x80
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff31 	bl	8000864 <receiveResponse>
    printf("Resposta AT+CREG=1;+CGREG=1;+CEREG=1: %s\n", response);
 8000a02:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a06:	4619      	mov	r1, r3
 8000a08:	485e      	ldr	r0, [pc, #376]	@ (8000b84 <InitialConfigBg95+0x2f8>)
 8000a0a:	f003 fdc7 	bl	800459c <iprintf>

    // Comando AT+COPS?
    sendATCommand("AT+COPS?\r\n");
 8000a0e:	485e      	ldr	r0, [pc, #376]	@ (8000b88 <InitialConfigBg95+0x2fc>)
 8000a10:	f7ff ff12 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000a14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a18:	f000 fc24 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 8000a1c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a20:	2180      	movs	r1, #128	@ 0x80
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff1e 	bl	8000864 <receiveResponse>
    printf("Resposta AT+COPS?: %s\n", response);
 8000a28:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4857      	ldr	r0, [pc, #348]	@ (8000b8c <InitialConfigBg95+0x300>)
 8000a30:	f003 fdb4 	bl	800459c <iprintf>

    // Comando AT+QCSQ
    sendATCommand("AT+QCSQ\r\n");
 8000a34:	4856      	ldr	r0, [pc, #344]	@ (8000b90 <InitialConfigBg95+0x304>)
 8000a36:	f7ff feff 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000a3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a3e:	f000 fc11 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 8000a42:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a46:	2180      	movs	r1, #128	@ 0x80
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff0b 	bl	8000864 <receiveResponse>
    printf("Resposta AT+QCSQ: %s\n", response);
 8000a4e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a52:	4619      	mov	r1, r3
 8000a54:	484f      	ldr	r0, [pc, #316]	@ (8000b94 <InitialConfigBg95+0x308>)
 8000a56:	f003 fda1 	bl	800459c <iprintf>

    // Comando AT+CREG?;+CEREG?;+CGREG?
    sendATCommand("AT+CREG?;+CEREG?;+CGREG?\r\n");
 8000a5a:	484f      	ldr	r0, [pc, #316]	@ (8000b98 <InitialConfigBg95+0x30c>)
 8000a5c:	f7ff feec 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000a60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a64:	f000 fbfe 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 8000a68:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a6c:	2180      	movs	r1, #128	@ 0x80
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fef8 	bl	8000864 <receiveResponse>
    printf("Resposta AT+CREG?;+CEREG?;+CGREG?: %s\n", response);
 8000a74:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4848      	ldr	r0, [pc, #288]	@ (8000b9c <InitialConfigBg95+0x310>)
 8000a7c:	f003 fd8e 	bl	800459c <iprintf>

    // Comando AT+CGATT=1 (Conectar à rede)
    sendATCommand("AT+CGATT=1\r\n");
 8000a80:	4847      	ldr	r0, [pc, #284]	@ (8000ba0 <InitialConfigBg95+0x314>)
 8000a82:	f7ff fed9 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a8a:	f000 fbeb 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 8000a8e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a92:	2180      	movs	r1, #128	@ 0x80
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fee5 	bl	8000864 <receiveResponse>
    printf("Resposta AT+CGATT=1: %s\n", response);
 8000a9a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4840      	ldr	r0, [pc, #256]	@ (8000ba4 <InitialConfigBg95+0x318>)
 8000aa2:	f003 fd7b 	bl	800459c <iprintf>

    // Verificar o endereço IP alocado
    sendATCommand("AT+CGPADDR\r\n");
 8000aa6:	4840      	ldr	r0, [pc, #256]	@ (8000ba8 <InitialConfigBg95+0x31c>)
 8000aa8:	f7ff fec6 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000aac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab0:	f000 fbd8 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 8000ab4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000ab8:	2180      	movs	r1, #128	@ 0x80
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fed2 	bl	8000864 <receiveResponse>
    printf("Resposta AT+CGPADDR: %s\n", response);
 8000ac0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4839      	ldr	r0, [pc, #228]	@ (8000bac <InitialConfigBg95+0x320>)
 8000ac8:	f003 fd68 	bl	800459c <iprintf>

    // Extrair o endereço IP da resposta
    if (sscanf(response, "+CGPADDR: 1,\"%15[^\"]", ip) == 1) {
 8000acc:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8000ad0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000ad4:	4936      	ldr	r1, [pc, #216]	@ (8000bb0 <InitialConfigBg95+0x324>)
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 fe04 	bl	80046e4 <siscanf>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d106      	bne.n	8000af0 <InitialConfigBg95+0x264>
        printf("Endereço IP alocado: %s\n", ip); // Exibir o IP
 8000ae2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4832      	ldr	r0, [pc, #200]	@ (8000bb4 <InitialConfigBg95+0x328>)
 8000aea:	f003 fd57 	bl	800459c <iprintf>
 8000aee:	e002      	b.n	8000af6 <InitialConfigBg95+0x26a>
    } else {
        printf("Falha ao obter o endereço IP.\n");
 8000af0:	4831      	ldr	r0, [pc, #196]	@ (8000bb8 <InitialConfigBg95+0x32c>)
 8000af2:	f003 fdbb 	bl	800466c <puts>
    }

    // Realizar um teste de ping com o IP obtido
    snprintf(command, sizeof(command), "AT+QPING=1,\"%s\"\r\n", ip);
 8000af6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000afa:	4638      	mov	r0, r7
 8000afc:	4a2f      	ldr	r2, [pc, #188]	@ (8000bbc <InitialConfigBg95+0x330>)
 8000afe:	2180      	movs	r1, #128	@ 0x80
 8000b00:	f003 fdbc 	bl	800467c <sniprintf>
    sendATCommand(command);
 8000b04:	463b      	mov	r3, r7
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fe96 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000b0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b10:	f000 fba8 	bl	8001264 <HAL_Delay>
    receiveResponse(response, sizeof(response));
 8000b14:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000b18:	2180      	movs	r1, #128	@ 0x80
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fea2 	bl	8000864 <receiveResponse>
    printf("Resposta AT+QPING: %s\n", response);
 8000b20:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000b24:	4619      	mov	r1, r3
 8000b26:	4826      	ldr	r0, [pc, #152]	@ (8000bc0 <InitialConfigBg95+0x334>)
 8000b28:	f003 fd38 	bl	800459c <iprintf>
}
 8000b2c:	bf00      	nop
 8000b2e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	08006098 	.word	0x08006098
 8000b3c:	080060a4 	.word	0x080060a4
 8000b40:	080060bc 	.word	0x080060bc
 8000b44:	080060c8 	.word	0x080060c8
 8000b48:	080060e0 	.word	0x080060e0
 8000b4c:	080060ec 	.word	0x080060ec
 8000b50:	08006104 	.word	0x08006104
 8000b54:	08006120 	.word	0x08006120
 8000b58:	08006144 	.word	0x08006144
 8000b5c:	08006164 	.word	0x08006164
 8000b60:	08006188 	.word	0x08006188
 8000b64:	080061a0 	.word	0x080061a0
 8000b68:	080061c0 	.word	0x080061c0
 8000b6c:	080061cc 	.word	0x080061cc
 8000b70:	080061e4 	.word	0x080061e4
 8000b74:	08006220 	.word	0x08006220
 8000b78:	0800623c 	.word	0x0800623c
 8000b7c:	08006248 	.word	0x08006248
 8000b80:	08006260 	.word	0x08006260
 8000b84:	08006280 	.word	0x08006280
 8000b88:	080062ac 	.word	0x080062ac
 8000b8c:	080062b8 	.word	0x080062b8
 8000b90:	080062d0 	.word	0x080062d0
 8000b94:	080062dc 	.word	0x080062dc
 8000b98:	080062f4 	.word	0x080062f4
 8000b9c:	08006310 	.word	0x08006310
 8000ba0:	08006338 	.word	0x08006338
 8000ba4:	08006348 	.word	0x08006348
 8000ba8:	08006364 	.word	0x08006364
 8000bac:	08006374 	.word	0x08006374
 8000bb0:	08006390 	.word	0x08006390
 8000bb4:	080063a8 	.word	0x080063a8
 8000bb8:	080063c4 	.word	0x080063c4
 8000bbc:	080063e4 	.word	0x080063e4
 8000bc0:	080063f8 	.word	0x080063f8

08000bc4 <ConfigPdpContext>:

void ConfigPdpContext(){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0e0      	sub	sp, #384	@ 0x180
 8000bc8:	af00      	add	r7, sp, #0
    char command[128];
    char response[256];

    // Configurar APN com o contexto CID 1, com login e senha
    snprintf(command, sizeof(command), "AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"\",0,0\r\n");
 8000bca:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bce:	4a1f      	ldr	r2, [pc, #124]	@ (8000c4c <ConfigPdpContext+0x88>)
 8000bd0:	2180      	movs	r1, #128	@ 0x80
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 fd52 	bl	800467c <sniprintf>
    sendATCommand(command);
 8000bd8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe2b 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000be2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000be6:	f000 fb3d 	bl	8001264 <HAL_Delay>

    // Ativar o contexto PDP
    sendATCommand("AT+CGACT=1,1\r\n");
 8000bea:	4819      	ldr	r0, [pc, #100]	@ (8000c50 <ConfigPdpContext+0x8c>)
 8000bec:	f7ff fe24 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000bf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf4:	f000 fb36 	bl	8001264 <HAL_Delay>

    // Verificar se o contexto PDP está ativo
    sendATCommand("AT+CGPADDR=1\r\n");
 8000bf8:	4816      	ldr	r0, [pc, #88]	@ (8000c54 <ConfigPdpContext+0x90>)
 8000bfa:	f7ff fe1d 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000bfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c02:	f000 fb2f 	bl	8001264 <HAL_Delay>

    // Receber a resposta e verificar se contém o IP
    receiveResponse(response, sizeof(response));
 8000c06:	463b      	mov	r3, r7
 8000c08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fe29 	bl	8000864 <receiveResponse>
    if (strstr(response, "0.0.0.0") == NULL) {
 8000c12:	463b      	mov	r3, r7
 8000c14:	4910      	ldr	r1, [pc, #64]	@ (8000c58 <ConfigPdpContext+0x94>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fe70 	bl	80048fc <strstr>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10c      	bne.n	8000c3c <ConfigPdpContext+0x78>
        // Contexto PDP ativado com sucesso, IP foi alocado corretamente
        snprintf(command, sizeof(command), "PDP context ativado com sucesso. APN: inlog.vivo.com.br, IP: %s\r\n", response);
 8000c22:	463b      	mov	r3, r7
 8000c24:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8000c28:	4a0c      	ldr	r2, [pc, #48]	@ (8000c5c <ConfigPdpContext+0x98>)
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	f003 fd26 	bl	800467c <sniprintf>
        sendATCommand(command); // Transmitir a mensagem de sucesso pela UART
 8000c30:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fdff 	bl	8000838 <sendATCommand>
    } else {
        // Erro ao ativar o contexto PDP
        sendATCommand("Erro ao ativar o contexto PDP\r\n");
    }
}
 8000c3a:	e002      	b.n	8000c42 <ConfigPdpContext+0x7e>
        sendATCommand("Erro ao ativar o contexto PDP\r\n");
 8000c3c:	4808      	ldr	r0, [pc, #32]	@ (8000c60 <ConfigPdpContext+0x9c>)
 8000c3e:	f7ff fdfb 	bl	8000838 <sendATCommand>
}
 8000c42:	bf00      	nop
 8000c44:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	08006410 	.word	0x08006410
 8000c50:	08006440 	.word	0x08006440
 8000c54:	08006450 	.word	0x08006450
 8000c58:	08006460 	.word	0x08006460
 8000c5c:	08006468 	.word	0x08006468
 8000c60:	080064ac 	.word	0x080064ac

08000c64 <ConfigMqttContext>:

void ConfigMqttContext() {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    // Configurar a versão MQTT como 3.1.1
    sendATCommand("AT+QMTCFG=\"version\",0,4\r\n");
 8000c68:	4812      	ldr	r0, [pc, #72]	@ (8000cb4 <ConfigMqttContext+0x50>)
 8000c6a:	f7ff fde5 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000c6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c72:	f000 faf7 	bl	8001264 <HAL_Delay>

    // Associar o contexto PDP ao cliente MQTT
    sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000c76:	4810      	ldr	r0, [pc, #64]	@ (8000cb8 <ConfigMqttContext+0x54>)
 8000c78:	f7ff fdde 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000c7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c80:	f000 faf0 	bl	8001264 <HAL_Delay>

    // Habilitar SSL para o cliente MQTT
    sendATCommand("AT+QMTCFG=\"ssl\",0,1,0\r\n");
 8000c84:	480d      	ldr	r0, [pc, #52]	@ (8000cbc <ConfigMqttContext+0x58>)
 8000c86:	f7ff fdd7 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c8e:	f000 fae9 	bl	8001264 <HAL_Delay>

    // Configurar keepalive para 3600 segundos
    sendATCommand("AT+QMTCFG=\"keepalive\",0,3600\r\n");
 8000c92:	480b      	ldr	r0, [pc, #44]	@ (8000cc0 <ConfigMqttContext+0x5c>)
 8000c94:	f7ff fdd0 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000c98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c9c:	f000 fae2 	bl	8001264 <HAL_Delay>

    // Configurar o "Will Message" do MQTT
    sendATCommand("AT+QMTCFG=\"will\",0,1,0,1,\"/test/will\",\"Client disconnected unexpectedly\"\r\n");
 8000ca0:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <ConfigMqttContext+0x60>)
 8000ca2:	f7ff fdc9 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000ca6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000caa:	f000 fadb 	bl	8001264 <HAL_Delay>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	080064cc 	.word	0x080064cc
 8000cb8:	080064e8 	.word	0x080064e8
 8000cbc:	08006504 	.word	0x08006504
 8000cc0:	0800651c 	.word	0x0800651c
 8000cc4:	0800653c 	.word	0x0800653c

08000cc8 <ActivePdp>:

void ActivePdp() {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
    // Verificar se o APN está configurado corretamente
    sendATCommand("AT+CGDCONT?\r\n");
 8000ccc:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <ActivePdp+0x34>)
 8000cce:	f7ff fdb3 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000cd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cd6:	f000 fac5 	bl	8001264 <HAL_Delay>

    // Ativar o contexto PDP
    sendATCommand("AT+CGACT=1,1\r\n");
 8000cda:	4809      	ldr	r0, [pc, #36]	@ (8000d00 <ActivePdp+0x38>)
 8000cdc:	f7ff fdac 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000ce0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ce4:	f000 fabe 	bl	8001264 <HAL_Delay>

    // Verificar se um endereço IP foi atribuído
    sendATCommand("AT+CGPADDR=1\r\n");
 8000ce8:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <ActivePdp+0x3c>)
 8000cea:	f7ff fda5 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000cee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf2:	f000 fab7 	bl	8001264 <HAL_Delay>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	08006588 	.word	0x08006588
 8000d00:	08006440 	.word	0x08006440
 8000d04:	08006450 	.word	0x08006450

08000d08 <MqttConnectAndSubscribe>:

void MqttConnectAndSubscribe() {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
    // Conectar ao broker MQTT
    sendATCommand("AT+QMTOPEN=0,\"broker.mqttdashboard.com\",1883\r\n");
 8000d0c:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <MqttConnectAndSubscribe+0x34>)
 8000d0e:	f7ff fd93 	bl	8000838 <sendATCommand>
    HAL_Delay(2000);
 8000d12:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d16:	f000 faa5 	bl	8001264 <HAL_Delay>

    // Conectar ao broker MQTT com ID e credenciais
    sendATCommand("AT+QMTCONN=0,\"clienteID\",\"usuario\",\"senha\"\r\n");
 8000d1a:	4809      	ldr	r0, [pc, #36]	@ (8000d40 <MqttConnectAndSubscribe+0x38>)
 8000d1c:	f7ff fd8c 	bl	8000838 <sendATCommand>
    HAL_Delay(2000);
 8000d20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d24:	f000 fa9e 	bl	8001264 <HAL_Delay>

    // Inscrever-se no tópico "test" com QoS 0
    sendATCommand("AT+QMTSUB=0,1,\"test\",0\r\n");
 8000d28:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <MqttConnectAndSubscribe+0x3c>)
 8000d2a:	f7ff fd85 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d32:	f000 fa97 	bl	8001264 <HAL_Delay>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08006598 	.word	0x08006598
 8000d40:	080065c8 	.word	0x080065c8
 8000d44:	080065f8 	.word	0x080065f8

08000d48 <MqttConfigBeforeConnection>:

void MqttConfigBeforeConnection() {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0


    // Verificar se o dispositivo está registrado na rede
    sendATCommand("AT+CREG?\r\n");
 8000d4c:	480e      	ldr	r0, [pc, #56]	@ (8000d88 <MqttConfigBeforeConnection+0x40>)
 8000d4e:	f7ff fd73 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000d52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d56:	f000 fa85 	bl	8001264 <HAL_Delay>

    // Verificar o status do contexto PDP
    sendATCommand("AT+CGACT?\r\n");
 8000d5a:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <MqttConfigBeforeConnection+0x44>)
 8000d5c:	f7ff fd6c 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000d60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d64:	f000 fa7e 	bl	8001264 <HAL_Delay>

    // Verificar a qualidade do sinal
    sendATCommand("AT+CSQ\r\n");
 8000d68:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <MqttConfigBeforeConnection+0x48>)
 8000d6a:	f7ff fd65 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000d6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d72:	f000 fa77 	bl	8001264 <HAL_Delay>

    // Configurar o contexto PDP para o canal MQTT
    sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <MqttConfigBeforeConnection+0x4c>)
 8000d78:	f7ff fd5e 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000d7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d80:	f000 fa70 	bl	8001264 <HAL_Delay>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	08006614 	.word	0x08006614
 8000d8c:	08006620 	.word	0x08006620
 8000d90:	0800662c 	.word	0x0800662c
 8000d94:	080064e8 	.word	0x080064e8

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <Error_Handler+0x8>

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_MspInit+0x50>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dae:	4a11      	ldr	r2, [pc, #68]	@ (8000df4 <HAL_MspInit+0x50>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000db6:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <HAL_MspInit+0x50>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <HAL_MspInit+0x50>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000df4 <HAL_MspInit+0x50>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <HAL_MspInit+0x50>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2005      	movs	r0, #5
 8000de0:	f000 fb3f 	bl	8001462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000de4:	2005      	movs	r0, #5
 8000de6:	f000 fb58 	bl	800149a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b090      	sub	sp, #64	@ 0x40
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2234      	movs	r2, #52	@ 0x34
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 fd6f 	bl	80048ec <memset>
  if(hrtc->Instance==RTC)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a13      	ldr	r2, [pc, #76]	@ (8000e60 <HAL_RTC_MspInit+0x68>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d11f      	bne.n	8000e58 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e1c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 fc3b 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000e34:	f7ff ffb0 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e38:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <HAL_RTC_MspInit+0x6c>)
 8000e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e3e:	4a09      	ldr	r2, [pc, #36]	@ (8000e64 <HAL_RTC_MspInit+0x6c>)
 8000e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2029      	movs	r0, #41	@ 0x29
 8000e4e:	f000 fb08 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e52:	2029      	movs	r0, #41	@ 0x29
 8000e54:	f000 fb21 	bl	800149a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000e58:	bf00      	nop
 8000e5a:	3740      	adds	r7, #64	@ 0x40
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40002800 	.word	0x40002800
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b096      	sub	sp, #88	@ 0x58
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	2234      	movs	r2, #52	@ 0x34
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fd2f 	bl	80048ec <memset>
  if(huart->Instance==USART2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a23      	ldr	r2, [pc, #140]	@ (8000f20 <HAL_UART_MspInit+0xb8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d13e      	bne.n	8000f16 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 fbfd 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb0:	f7ff ff72 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <HAL_UART_MspInit+0xbc>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f24 <HAL_UART_MspInit+0xbc>)
 8000eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <HAL_UART_MspInit+0xbc>)
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_UART_MspInit+0xbc>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed0:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <HAL_UART_MspInit+0xbc>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_UART_MspInit+0xbc>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ee4:	230c      	movs	r3, #12
 8000ee6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f02:	f000 fb63 	bl	80015cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2026      	movs	r0, #38	@ 0x26
 8000f0c:	f000 faa9 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f10:	2026      	movs	r0, #38	@ 0x26
 8000f12:	f000 fac2 	bl	800149a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f16:	bf00      	nop
 8000f18:	3758      	adds	r7, #88	@ 0x58
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40004400 	.word	0x40004400
 8000f24:	40021000 	.word	0x40021000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <NMI_Handler+0x4>

08000f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <MemManage_Handler+0x4>

08000f40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7e:	f000 f951 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <USART2_IRQHandler+0x10>)
 8000f9a:	f002 fa57 	bl	800344c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000b0 	.word	0x200000b0

08000fa8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <RTC_Alarm_IRQHandler+0x10>)
 8000fae:	f001 ffb3 	bl	8002f18 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000084 	.word	0x20000084

08000fbc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e00a      	b.n	8000fe4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fce:	f3af 8000 	nop.w
 8000fd2:	4601      	mov	r1, r0
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	b2ca      	uxtb	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf0      	blt.n	8000fce <_read+0x12>
  }

  return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e009      	b.n	800101c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbf1      	blt.n	8001008 <_write+0x12>
  }
  return len;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_close>:

int _close(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001056:	605a      	str	r2, [r3, #4]
  return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_isatty>:

int _isatty(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a0:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <_sbrk+0x5c>)
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <_sbrk+0x60>)
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <_sbrk+0x64>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <_sbrk+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d207      	bcs.n	80010d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c8:	f003 fc74 	bl	80049b4 <__errno>
 80010cc:	4603      	mov	r3, r0
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	e009      	b.n	80010ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010de:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <_sbrk+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20008000 	.word	0x20008000
 80010f8:	00000400 	.word	0x00000400
 80010fc:	20000138 	.word	0x20000138
 8001100:	20000290 	.word	0x20000290

08001104 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001160 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800112c:	f7ff ffea 	bl	8001104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <LoopForever+0x6>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	@ (8001168 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <LoopForever+0xe>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	@ (8001174 <LoopForever+0x16>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001156:	f003 fc33 	bl	80049c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800115a:	f7ff fa09 	bl	8000570 <main>

0800115e <LoopForever>:

LoopForever:
    b LoopForever
 800115e:	e7fe      	b.n	800115e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001160:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001168:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800116c:	080067ec 	.word	0x080067ec
  ldr r2, =_sbss
 8001170:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001174:	2000028c 	.word	0x2000028c

08001178 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC1_2_IRQHandler>

0800117a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f961 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118a:	200f      	movs	r0, #15
 800118c:	f000 f80e 	bl	80011ac <HAL_InitTick>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	e001      	b.n	80011a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800119c:	f7ff fe02 	bl	8000da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <HAL_InitTick+0x6c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d023      	beq.n	8001208 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <HAL_InitTick+0x70>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <HAL_InitTick+0x6c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f96d 	bl	80014b6 <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10f      	bne.n	8001202 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d809      	bhi.n	80011fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 f937 	bl	8001462 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <HAL_InitTick+0x74>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e007      	b.n	800120c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e004      	b.n	800120c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	e001      	b.n	800120c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008
 8001248:	2000013c 	.word	0x2000013c

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	2000013c 	.word	0x2000013c

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff ffee 	bl	800124c <HAL_GetTick>
 8001270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_Delay+0x44>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128a:	bf00      	nop
 800128c:	f7ff ffde 	bl	800124c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000008 	.word	0x20000008

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	@ (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	@ (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	@ (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	@ 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff8e 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff29 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff3e 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff8e 	bl	80013a0 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff31 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa2 	bl	8001408 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d008      	beq.n	80014f8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2204      	movs	r2, #4
 80014ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e022      	b.n	800153e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 020e 	bic.w	r2, r2, #14
 8001506:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151c:	f003 021c 	and.w	r2, r3, #28
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001524:	2101      	movs	r1, #1
 8001526:	fa01 f202 	lsl.w	r2, r1, r2
 800152a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d005      	beq.n	800156e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2204      	movs	r2, #4
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e029      	b.n	80015c2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 020e 	bic.w	r2, r2, #14
 800157c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	f003 021c 	and.w	r2, r3, #28
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	2101      	movs	r1, #1
 800159c:	fa01 f202 	lsl.w	r2, r1, r2
 80015a0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	4798      	blx	r3
    }
  }
  return status;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015da:	e14e      	b.n	800187a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2101      	movs	r1, #1
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8140 	beq.w	8001874 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d005      	beq.n	800160c <HAL_GPIO_Init+0x40>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d130      	bne.n	800166e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001642:	2201      	movs	r2, #1
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	f003 0201 	and.w	r2, r3, #1
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b03      	cmp	r3, #3
 8001678:	d017      	beq.n	80016aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d123      	bne.n	80016fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	08da      	lsrs	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3208      	adds	r2, #8
 80016be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	08da      	lsrs	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3208      	adds	r2, #8
 80016f8:	6939      	ldr	r1, [r7, #16]
 80016fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0203 	and.w	r2, r3, #3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 809a 	beq.w	8001874 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001740:	4b55      	ldr	r3, [pc, #340]	@ (8001898 <HAL_GPIO_Init+0x2cc>)
 8001742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001744:	4a54      	ldr	r2, [pc, #336]	@ (8001898 <HAL_GPIO_Init+0x2cc>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6613      	str	r3, [r2, #96]	@ 0x60
 800174c:	4b52      	ldr	r3, [pc, #328]	@ (8001898 <HAL_GPIO_Init+0x2cc>)
 800174e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001758:	4a50      	ldr	r2, [pc, #320]	@ (800189c <HAL_GPIO_Init+0x2d0>)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001782:	d013      	beq.n	80017ac <HAL_GPIO_Init+0x1e0>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a46      	ldr	r2, [pc, #280]	@ (80018a0 <HAL_GPIO_Init+0x2d4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00d      	beq.n	80017a8 <HAL_GPIO_Init+0x1dc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a45      	ldr	r2, [pc, #276]	@ (80018a4 <HAL_GPIO_Init+0x2d8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d007      	beq.n	80017a4 <HAL_GPIO_Init+0x1d8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a44      	ldr	r2, [pc, #272]	@ (80018a8 <HAL_GPIO_Init+0x2dc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d101      	bne.n	80017a0 <HAL_GPIO_Init+0x1d4>
 800179c:	2303      	movs	r3, #3
 800179e:	e006      	b.n	80017ae <HAL_GPIO_Init+0x1e2>
 80017a0:	2307      	movs	r3, #7
 80017a2:	e004      	b.n	80017ae <HAL_GPIO_Init+0x1e2>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e002      	b.n	80017ae <HAL_GPIO_Init+0x1e2>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_GPIO_Init+0x1e2>
 80017ac:	2300      	movs	r3, #0
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	f002 0203 	and.w	r2, r2, #3
 80017b4:	0092      	lsls	r2, r2, #2
 80017b6:	4093      	lsls	r3, r2
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017be:	4937      	ldr	r1, [pc, #220]	@ (800189c <HAL_GPIO_Init+0x2d0>)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017cc:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <HAL_GPIO_Init+0x2e0>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017f0:	4a2e      	ldr	r2, [pc, #184]	@ (80018ac <HAL_GPIO_Init+0x2e0>)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017f6:	4b2d      	ldr	r3, [pc, #180]	@ (80018ac <HAL_GPIO_Init+0x2e0>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800181a:	4a24      	ldr	r2, [pc, #144]	@ (80018ac <HAL_GPIO_Init+0x2e0>)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001820:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <HAL_GPIO_Init+0x2e0>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001844:	4a19      	ldr	r2, [pc, #100]	@ (80018ac <HAL_GPIO_Init+0x2e0>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_GPIO_Init+0x2e0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800186e:	4a0f      	ldr	r2, [pc, #60]	@ (80018ac <HAL_GPIO_Init+0x2e0>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3301      	adds	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	f47f aea9 	bne.w	80015dc <HAL_GPIO_Init+0x10>
  }
}
 800188a:	bf00      	nop
 800188c:	bf00      	nop
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40021000 	.word	0x40021000
 800189c:	40010000 	.word	0x40010000
 80018a0:	48000400 	.word	0x48000400
 80018a4:	48000800 	.word	0x48000800
 80018a8:	48000c00 	.word	0x48000c00
 80018ac:	40010400 	.word	0x40010400

080018b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40007000 	.word	0x40007000

080018d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018d4:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40007000 	.word	0x40007000

080018ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018fa:	d130      	bne.n	800195e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018fc:	4b23      	ldr	r3, [pc, #140]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001908:	d038      	beq.n	800197c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800190a:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001912:	4a1e      	ldr	r2, [pc, #120]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001914:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800191a:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2232      	movs	r2, #50	@ 0x32
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	4a1b      	ldr	r2, [pc, #108]	@ (8001994 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	0c9b      	lsrs	r3, r3, #18
 800192c:	3301      	adds	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001930:	e002      	b.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3b01      	subs	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001938:	4b14      	ldr	r3, [pc, #80]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001944:	d102      	bne.n	800194c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f2      	bne.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800194c:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001958:	d110      	bne.n	800197c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e00f      	b.n	800197e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800196a:	d007      	beq.n	800197c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800196c:	4b07      	ldr	r3, [pc, #28]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001974:	4a05      	ldr	r2, [pc, #20]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40007000 	.word	0x40007000
 8001990:	20000000 	.word	0x20000000
 8001994:	431bde83 	.word	0x431bde83

08001998 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	@ 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f000 bc4f 	b.w	800224a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ac:	4b97      	ldr	r3, [pc, #604]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b6:	4b95      	ldr	r3, [pc, #596]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80e6 	beq.w	8001b9a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4c>
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	f040 808d 	bne.w	8001af6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 8089 	bne.w	8001af6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019e4:	4b89      	ldr	r3, [pc, #548]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <HAL_RCC_OscConfig+0x66>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f000 bc26 	b.w	800224a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a02:	4b82      	ldr	r3, [pc, #520]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <HAL_RCC_OscConfig+0x80>
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a16:	e005      	b.n	8001a24 <HAL_RCC_OscConfig+0x8c>
 8001a18:	4b7c      	ldr	r3, [pc, #496]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d224      	bcs.n	8001a72 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fdd9 	bl	80025e4 <RCC_SetFlashLatencyFromMSIRange>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f000 bc06 	b.w	800224a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a3e:	4b73      	ldr	r3, [pc, #460]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a72      	ldr	r2, [pc, #456]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b70      	ldr	r3, [pc, #448]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	496d      	ldr	r1, [pc, #436]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a5c:	4b6b      	ldr	r3, [pc, #428]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	4968      	ldr	r1, [pc, #416]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	e025      	b.n	8001abe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a72:	4b66      	ldr	r3, [pc, #408]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a65      	ldr	r2, [pc, #404]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b63      	ldr	r3, [pc, #396]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	4960      	ldr	r1, [pc, #384]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a90:	4b5e      	ldr	r3, [pc, #376]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	495b      	ldr	r1, [pc, #364]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fd98 	bl	80025e4 <RCC_SetFlashLatencyFromMSIRange>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e3c5      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001abe:	f000 fccd 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b51      	ldr	r3, [pc, #324]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	4950      	ldr	r1, [pc, #320]	@ (8001c10 <HAL_RCC_OscConfig+0x278>)
 8001ad0:	5ccb      	ldrb	r3, [r1, r3]
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ada:	4a4e      	ldr	r2, [pc, #312]	@ (8001c14 <HAL_RCC_OscConfig+0x27c>)
 8001adc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ade:	4b4e      	ldr	r3, [pc, #312]	@ (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fb62 	bl	80011ac <HAL_InitTick>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d052      	beq.n	8001b98 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	e3a9      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d032      	beq.n	8001b64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001afe:	4b43      	ldr	r3, [pc, #268]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a42      	ldr	r2, [pc, #264]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fb9f 	bl	800124c <HAL_GetTick>
 8001b0e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b12:	f7ff fb9b 	bl	800124c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e392      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b24:	4b39      	ldr	r3, [pc, #228]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b30:	4b36      	ldr	r3, [pc, #216]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a35      	ldr	r2, [pc, #212]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b33      	ldr	r3, [pc, #204]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	4930      	ldr	r1, [pc, #192]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	492b      	ldr	r1, [pc, #172]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
 8001b62:	e01a      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b64:	4b29      	ldr	r3, [pc, #164]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a28      	ldr	r2, [pc, #160]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fb6c 	bl	800124c <HAL_GetTick>
 8001b74:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b78:	f7ff fb68 	bl	800124c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e35f      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1e0>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d073      	beq.n	8001c8e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x220>
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d063      	beq.n	8001c8c <HAL_RCC_OscConfig+0x2f4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d15f      	bne.n	8001c8c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e33c      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x250>
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a0b      	ldr	r2, [pc, #44]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e025      	b.n	8001c34 <HAL_RCC_OscConfig+0x29c>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bf0:	d114      	bne.n	8001c1c <HAL_RCC_OscConfig+0x284>
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b03      	ldr	r3, [pc, #12]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a02      	ldr	r2, [pc, #8]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e013      	b.n	8001c34 <HAL_RCC_OscConfig+0x29c>
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	08006644 	.word	0x08006644
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a8e      	ldr	r2, [pc, #568]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b8c      	ldr	r3, [pc, #560]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a8b      	ldr	r2, [pc, #556]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fb06 	bl	800124c <HAL_GetTick>
 8001c40:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fb02 	bl	800124c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	@ 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e2f9      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c56:	4b81      	ldr	r3, [pc, #516]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x2ac>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff faf2 	bl	800124c <HAL_GetTick>
 8001c68:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff faee 	bl	800124c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	@ 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e2e5      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7e:	4b77      	ldr	r3, [pc, #476]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x2d4>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d060      	beq.n	8001d5c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_OscConfig+0x314>
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d119      	bne.n	8001cda <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d116      	bne.n	8001cda <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cac:	4b6b      	ldr	r3, [pc, #428]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x32c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e2c2      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b65      	ldr	r3, [pc, #404]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	4962      	ldr	r1, [pc, #392]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd8:	e040      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d023      	beq.n	8001d2a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a5d      	ldr	r2, [pc, #372]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff faad 	bl	800124c <HAL_GetTick>
 8001cf2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7ff faa9 	bl	800124c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e2a0      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d08:	4b54      	ldr	r3, [pc, #336]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b51      	ldr	r3, [pc, #324]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	494e      	ldr	r1, [pc, #312]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e018      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff fa89 	bl	800124c <HAL_GetTick>
 8001d3a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fa85 	bl	800124c <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e27c      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d50:	4b42      	ldr	r3, [pc, #264]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8082 	beq.w	8001e6e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d05f      	beq.n	8001e32 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001d72:	4b3a      	ldr	r3, [pc, #232]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d78:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d037      	beq.n	8001df8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d006      	beq.n	8001da0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e254      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01b      	beq.n	8001de2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001daa:	4b2c      	ldr	r3, [pc, #176]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dba:	f7ff fa47 	bl	800124c <HAL_GetTick>
 8001dbe:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fa43 	bl	800124c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b11      	cmp	r3, #17
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e23a      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd4:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1ef      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001de8:	f023 0210 	bic.w	r2, r3, #16
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	491a      	ldr	r1, [pc, #104]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df8:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dfe:	4a17      	ldr	r2, [pc, #92]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff fa20 	bl	800124c <HAL_GetTick>
 8001e0c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff fa1c 	bl	800124c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b11      	cmp	r3, #17
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e213      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ef      	beq.n	8001e10 <HAL_RCC_OscConfig+0x478>
 8001e30:	e01d      	b.n	8001e6e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e38:	4a08      	ldr	r2, [pc, #32]	@ (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7ff fa03 	bl	800124c <HAL_GetTick>
 8001e46:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7ff f9ff 	bl	800124c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b11      	cmp	r3, #17
 8001e56:	d903      	bls.n	8001e60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e1f6      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
 8001e5c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e60:	4ba9      	ldr	r3, [pc, #676]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ed      	bne.n	8001e4a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80bd 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e82:	4ba1      	ldr	r3, [pc, #644]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10e      	bne.n	8001eac <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b9e      	ldr	r3, [pc, #632]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	4a9d      	ldr	r2, [pc, #628]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e9a:	4b9b      	ldr	r3, [pc, #620]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eac:	4b97      	ldr	r3, [pc, #604]	@ (800210c <HAL_RCC_OscConfig+0x774>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d118      	bne.n	8001eea <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb8:	4b94      	ldr	r3, [pc, #592]	@ (800210c <HAL_RCC_OscConfig+0x774>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a93      	ldr	r2, [pc, #588]	@ (800210c <HAL_RCC_OscConfig+0x774>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f9c2 	bl	800124c <HAL_GetTick>
 8001ec8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ecc:	f7ff f9be 	bl	800124c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1b5      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ede:	4b8b      	ldr	r3, [pc, #556]	@ (800210c <HAL_RCC_OscConfig+0x774>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d02c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001ef6:	4b84      	ldr	r3, [pc, #528]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f08:	497f      	ldr	r1, [pc, #508]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d010      	beq.n	8001f3e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f1c:	4b7a      	ldr	r3, [pc, #488]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f22:	4a79      	ldr	r2, [pc, #484]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f2c:	4b76      	ldr	r3, [pc, #472]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f32:	4a75      	ldr	r2, [pc, #468]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f3c:	e018      	b.n	8001f70 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f3e:	4b72      	ldr	r3, [pc, #456]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f44:	4a70      	ldr	r2, [pc, #448]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f4e:	e00f      	b.n	8001f70 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f50:	4b6d      	ldr	r3, [pc, #436]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f56:	4a6c      	ldr	r2, [pc, #432]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f60:	4b69      	ldr	r3, [pc, #420]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f66:	4a68      	ldr	r2, [pc, #416]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f68:	f023 0304 	bic.w	r3, r3, #4
 8001f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d016      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7ff f968 	bl	800124c <HAL_GetTick>
 8001f7c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f7ff f964 	bl	800124c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e159      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f96:	4b5c      	ldr	r3, [pc, #368]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ed      	beq.n	8001f80 <HAL_RCC_OscConfig+0x5e8>
 8001fa4:	e01d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f951 	bl	800124c <HAL_GetTick>
 8001faa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7ff f94d 	bl	800124c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e142      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fc4:	4b50      	ldr	r3, [pc, #320]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ed      	bne.n	8001fae <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001fd2:	4b4d      	ldr	r3, [pc, #308]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001fda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4b47      	ldr	r3, [pc, #284]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	4a46      	ldr	r2, [pc, #280]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d03c      	beq.n	800207c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01c      	beq.n	8002044 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800200a:	4b3f      	ldr	r3, [pc, #252]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 800200c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002010:	4a3d      	ldr	r2, [pc, #244]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f7ff f917 	bl	800124c <HAL_GetTick>
 800201e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002022:	f7ff f913 	bl	800124c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e10a      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002034:	4b34      	ldr	r3, [pc, #208]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8002036:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0ef      	beq.n	8002022 <HAL_RCC_OscConfig+0x68a>
 8002042:	e01b      	b.n	800207c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002044:	4b30      	ldr	r3, [pc, #192]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8002046:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800204a:	4a2f      	ldr	r2, [pc, #188]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7ff f8fa 	bl	800124c <HAL_GetTick>
 8002058:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800205c:	f7ff f8f6 	bl	800124c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0ed      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800206e:	4b26      	ldr	r3, [pc, #152]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8002070:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ef      	bne.n	800205c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80e1 	beq.w	8002248 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	2b02      	cmp	r3, #2
 800208c:	f040 80b5 	bne.w	80021fa <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002090:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0203 	and.w	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d124      	bne.n	80020ee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ae:	3b01      	subs	r3, #1
 80020b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d11b      	bne.n	80020ee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d113      	bne.n	80020ee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d05f      	beq.n	80021ae <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	d05a      	beq.n	80021aa <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020f4:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a03      	ldr	r2, [pc, #12]	@ (8002108 <HAL_RCC_OscConfig+0x770>)
 80020fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002100:	f7ff f8a4 	bl	800124c <HAL_GetTick>
 8002104:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002106:	e00c      	b.n	8002122 <HAL_RCC_OscConfig+0x78a>
 8002108:	40021000 	.word	0x40021000
 800210c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff f89c 	bl	800124c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e093      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002122:	4b4c      	ldr	r3, [pc, #304]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800212e:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	4b49      	ldr	r3, [pc, #292]	@ (8002258 <HAL_RCC_OscConfig+0x8c0>)
 8002134:	4013      	ands	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800213e:	3a01      	subs	r2, #1
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	4311      	orrs	r1, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002148:	0212      	lsls	r2, r2, #8
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002150:	0852      	lsrs	r2, r2, #1
 8002152:	3a01      	subs	r2, #1
 8002154:	0552      	lsls	r2, r2, #21
 8002156:	4311      	orrs	r1, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800215c:	0852      	lsrs	r2, r2, #1
 800215e:	3a01      	subs	r2, #1
 8002160:	0652      	lsls	r2, r2, #25
 8002162:	430a      	orrs	r2, r1
 8002164:	493b      	ldr	r1, [pc, #236]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800216a:	4b3a      	ldr	r3, [pc, #232]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a39      	ldr	r2, [pc, #228]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 8002170:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002174:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002176:	4b37      	ldr	r3, [pc, #220]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	4a36      	ldr	r2, [pc, #216]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 800217c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002180:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002182:	f7ff f863 	bl	800124c <HAL_GetTick>
 8002186:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218a:	f7ff f85f 	bl	800124c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e056      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219c:	4b2d      	ldr	r3, [pc, #180]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a8:	e04e      	b.n	8002248 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e04d      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	4b29      	ldr	r3, [pc, #164]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d146      	bne.n	8002248 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021ba:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a25      	ldr	r2, [pc, #148]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 80021c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021c4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c6:	4b23      	ldr	r3, [pc, #140]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	4a22      	ldr	r2, [pc, #136]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 80021cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021d0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021d2:	f7ff f83b 	bl	800124c <HAL_GetTick>
 80021d6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7ff f837 	bl	800124c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e02e      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ec:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x842>
 80021f8:	e026      	b.n	8002248 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	2b0c      	cmp	r3, #12
 80021fe:	d021      	beq.n	8002244 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b14      	ldr	r3, [pc, #80]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a13      	ldr	r2, [pc, #76]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff f81e 	bl	800124c <HAL_GetTick>
 8002210:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff f81a 	bl	800124c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e011      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	4a07      	ldr	r2, [pc, #28]	@ (8002254 <HAL_RCC_OscConfig+0x8bc>)
 8002238:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800223c:	f023 0303 	bic.w	r3, r3, #3
 8002240:	60d3      	str	r3, [r2, #12]
 8002242:	e001      	b.n	8002248 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3728      	adds	r7, #40	@ 0x28
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	f99f808c 	.word	0xf99f808c

0800225c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0e7      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b75      	ldr	r3, [pc, #468]	@ (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d910      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b72      	ldr	r3, [pc, #456]	@ (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 0207 	bic.w	r2, r3, #7
 8002286:	4970      	ldr	r1, [pc, #448]	@ (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b6e      	ldr	r3, [pc, #440]	@ (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0cf      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d010      	beq.n	80022ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	4b66      	ldr	r3, [pc, #408]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d908      	bls.n	80022ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b63      	ldr	r3, [pc, #396]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4960      	ldr	r1, [pc, #384]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d04c      	beq.n	8002374 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e2:	4b5a      	ldr	r3, [pc, #360]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d121      	bne.n	8002332 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0a6      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fa:	4b54      	ldr	r3, [pc, #336]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d115      	bne.n	8002332 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e09a      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002312:	4b4e      	ldr	r3, [pc, #312]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e08e      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002322:	4b4a      	ldr	r3, [pc, #296]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e086      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002332:	4b46      	ldr	r3, [pc, #280]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 0203 	bic.w	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4943      	ldr	r1, [pc, #268]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002344:	f7fe ff82 	bl	800124c <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	e00a      	b.n	8002362 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234c:	f7fe ff7e 	bl	800124c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e06e      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	4b3a      	ldr	r3, [pc, #232]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 020c 	and.w	r2, r3, #12
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	429a      	cmp	r2, r3
 8002372:	d1eb      	bne.n	800234c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d010      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	4b31      	ldr	r3, [pc, #196]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800238c:	429a      	cmp	r2, r3
 800238e:	d208      	bcs.n	80023a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b2e      	ldr	r3, [pc, #184]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	492b      	ldr	r1, [pc, #172]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a2:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d210      	bcs.n	80023d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b0:	4b25      	ldr	r3, [pc, #148]	@ (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 0207 	bic.w	r2, r3, #7
 80023b8:	4923      	ldr	r1, [pc, #140]	@ (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c0:	4b21      	ldr	r3, [pc, #132]	@ (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e036      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023de:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4918      	ldr	r1, [pc, #96]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d009      	beq.n	8002410 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fc:	4b13      	ldr	r3, [pc, #76]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4910      	ldr	r1, [pc, #64]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002410:	f000 f824 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	490b      	ldr	r1, [pc, #44]	@ (8002450 <HAL_RCC_ClockConfig+0x1f4>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	4a09      	ldr	r2, [pc, #36]	@ (8002454 <HAL_RCC_ClockConfig+0x1f8>)
 800242e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002430:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <HAL_RCC_ClockConfig+0x1fc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe feb9 	bl	80011ac <HAL_InitTick>
 800243a:	4603      	mov	r3, r0
 800243c:	72fb      	strb	r3, [r7, #11]

  return status;
 800243e:	7afb      	ldrb	r3, [r7, #11]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40022000 	.word	0x40022000
 800244c:	40021000 	.word	0x40021000
 8002450:	08006644 	.word	0x08006644
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	@ 0x24
 8002460:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246a:	4b3e      	ldr	r3, [pc, #248]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002474:	4b3b      	ldr	r3, [pc, #236]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x34>
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d121      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d11e      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002490:	4b34      	ldr	r3, [pc, #208]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800249c:	4b31      	ldr	r3, [pc, #196]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e005      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d102      	bne.n	80024da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024d4:	4b25      	ldr	r3, [pc, #148]	@ (800256c <HAL_RCC_GetSysClockFreq+0x110>)
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	e004      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e0:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x114>)
 80024e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d134      	bne.n	8002554 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0xa6>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d003      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0xac>
 8002500:	e005      	b.n	800250e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002502:	4b1a      	ldr	r3, [pc, #104]	@ (800256c <HAL_RCC_GetSysClockFreq+0x110>)
 8002504:	617b      	str	r3, [r7, #20]
      break;
 8002506:	e005      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002508:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x114>)
 800250a:	617b      	str	r3, [r7, #20]
      break;
 800250c:	e002      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	617b      	str	r3, [r7, #20]
      break;
 8002512:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	3301      	adds	r3, #1
 8002520:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002522:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	fb03 f202 	mul.w	r2, r3, r2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	0e5b      	lsrs	r3, r3, #25
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	3301      	adds	r3, #1
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002554:	69bb      	ldr	r3, [r7, #24]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3724      	adds	r7, #36	@ 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	0800665c 	.word	0x0800665c
 800256c:	00f42400 	.word	0x00f42400
 8002570:	007a1200 	.word	0x007a1200

08002574 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002578:	4b03      	ldr	r3, [pc, #12]	@ (8002588 <HAL_RCC_GetHCLKFreq+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20000000 	.word	0x20000000

0800258c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002590:	f7ff fff0 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4904      	ldr	r1, [pc, #16]	@ (80025b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08006654 	.word	0x08006654

080025b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025bc:	f7ff ffda 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0adb      	lsrs	r3, r3, #11
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4904      	ldr	r1, [pc, #16]	@ (80025e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08006654 	.word	0x08006654

080025e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025f0:	4b2a      	ldr	r3, [pc, #168]	@ (800269c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025fc:	f7ff f968 	bl	80018d0 <HAL_PWREx_GetVoltageRange>
 8002600:	6178      	str	r0, [r7, #20]
 8002602:	e014      	b.n	800262e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002604:	4b25      	ldr	r3, [pc, #148]	@ (800269c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002608:	4a24      	ldr	r2, [pc, #144]	@ (800269c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800260e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002610:	4b22      	ldr	r3, [pc, #136]	@ (800269c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800261c:	f7ff f958 	bl	80018d0 <HAL_PWREx_GetVoltageRange>
 8002620:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002622:	4b1e      	ldr	r3, [pc, #120]	@ (800269c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	4a1d      	ldr	r2, [pc, #116]	@ (800269c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800262c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002634:	d10b      	bne.n	800264e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b80      	cmp	r3, #128	@ 0x80
 800263a:	d919      	bls.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002640:	d902      	bls.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002642:	2302      	movs	r3, #2
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	e013      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002648:	2301      	movs	r3, #1
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	e010      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b80      	cmp	r3, #128	@ 0x80
 8002652:	d902      	bls.n	800265a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002654:	2303      	movs	r3, #3
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	e00a      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b80      	cmp	r3, #128	@ 0x80
 800265e:	d102      	bne.n	8002666 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002660:	2302      	movs	r3, #2
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	e004      	b.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b70      	cmp	r3, #112	@ 0x70
 800266a:	d101      	bne.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800266c:	2301      	movs	r3, #1
 800266e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 0207 	bic.w	r2, r3, #7
 8002678:	4909      	ldr	r1, [pc, #36]	@ (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002680:	4b07      	ldr	r3, [pc, #28]	@ (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	40022000 	.word	0x40022000

080026a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026ac:	2300      	movs	r3, #0
 80026ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b0:	2300      	movs	r3, #0
 80026b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 809e 	beq.w	80027fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026c6:	4b46      	ldr	r3, [pc, #280]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80026d6:	2300      	movs	r3, #0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00d      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b40      	ldr	r3, [pc, #256]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e0:	4a3f      	ldr	r2, [pc, #252]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026e8:	4b3d      	ldr	r3, [pc, #244]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f4:	2301      	movs	r3, #1
 80026f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f8:	4b3a      	ldr	r3, [pc, #232]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a39      	ldr	r2, [pc, #228]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80026fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002704:	f7fe fda2 	bl	800124c <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800270a:	e009      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270c:	f7fe fd9e 	bl	800124c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d902      	bls.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	74fb      	strb	r3, [r7, #19]
        break;
 800271e:	e005      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002720:	4b30      	ldr	r3, [pc, #192]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ef      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d15a      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002732:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002738:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800273c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01e      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	429a      	cmp	r2, r3
 800274c:	d019      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800274e:	4b24      	ldr	r3, [pc, #144]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002758:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800275a:	4b21      	ldr	r3, [pc, #132]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002760:	4a1f      	ldr	r2, [pc, #124]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002766:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800276a:	4b1d      	ldr	r3, [pc, #116]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002770:	4a1b      	ldr	r2, [pc, #108]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002776:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800277a:	4a19      	ldr	r2, [pc, #100]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d016      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe fd5e 	bl	800124c <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002792:	e00b      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe fd5a 	bl	800124c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d902      	bls.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	74fb      	strb	r3, [r7, #19]
            break;
 80027aa:	e006      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0ec      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c0:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	4904      	ldr	r1, [pc, #16]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027d6:	e009      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
 80027dc:	e006      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x148>
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ec:	7c7b      	ldrb	r3, [r7, #17]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d105      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4b6e      	ldr	r3, [pc, #440]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	4a6d      	ldr	r2, [pc, #436]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800280a:	4b68      	ldr	r3, [pc, #416]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002810:	f023 0203 	bic.w	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4964      	ldr	r1, [pc, #400]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800282c:	4b5f      	ldr	r3, [pc, #380]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002832:	f023 020c 	bic.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	495c      	ldr	r1, [pc, #368]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800284e:	4b57      	ldr	r3, [pc, #348]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002854:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4953      	ldr	r1, [pc, #332]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002870:	4b4e      	ldr	r3, [pc, #312]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002876:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	494b      	ldr	r1, [pc, #300]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002892:	4b46      	ldr	r3, [pc, #280]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002898:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4942      	ldr	r1, [pc, #264]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028b4:	4b3d      	ldr	r3, [pc, #244]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	493a      	ldr	r1, [pc, #232]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028d6:	4b35      	ldr	r3, [pc, #212]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	4931      	ldr	r1, [pc, #196]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028f8:	4b2c      	ldr	r3, [pc, #176]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4929      	ldr	r1, [pc, #164]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800291a:	4b24      	ldr	r3, [pc, #144]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002920:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	4920      	ldr	r1, [pc, #128]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d015      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800293c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002942:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	4918      	ldr	r1, [pc, #96]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800295a:	d105      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a12      	ldr	r2, [pc, #72]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002966:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d015      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002974:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	490a      	ldr	r1, [pc, #40]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002992:	d105      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800299a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800299e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000

080029b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80029b4:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	6013      	str	r3, [r2, #0]
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000

080029d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d07f      	beq.n	8002ae2 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe f9fe 	bl	8000df8 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8002a02:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a0c:	4b37      	ldr	r3, [pc, #220]	@ (8002aec <HAL_RTC_Init+0x11c>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d05b      	beq.n	8002ad0 <HAL_RTC_Init+0x100>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	22ca      	movs	r2, #202	@ 0xca
 8002a1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2253      	movs	r2, #83	@ 0x53
 8002a26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fad1 	bl	8002fd0 <RTC_EnterInitMode>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d127      	bne.n	8002a88 <HAL_RTC_Init+0xb8>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8002a46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a4a:	6193      	str	r3, [r2, #24]
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6999      	ldr	r1, [r3, #24]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6912      	ldr	r2, [r2, #16]
 8002a72:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6919      	ldr	r1, [r3, #16]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	041a      	lsls	r2, r3, #16
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fad7 	bl	800303c <RTC_ExitInitMode>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d116      	bne.n	8002ac6 <HAL_RTC_Init+0xf6>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 8002aa6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6999      	ldr	r1, [r3, #24]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	22ff      	movs	r2, #255	@ 0xff
 8002acc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ace:	e001      	b.n	8002ad4 <HAL_RTC_Init+0x104>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <HAL_RTC_Init+0x112>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    }
  }

  return status;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40002800 	.word	0x40002800

08002af0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_RTC_SetTime+0x1a>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e08b      	b.n	8002c22 <HAL_RTC_SetTime+0x132>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	22ca      	movs	r2, #202	@ 0xca
 8002b20:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2253      	movs	r2, #83	@ 0x53
 8002b28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fa50 	bl	8002fd0 <RTC_EnterInitMode>
 8002b30:	4603      	mov	r3, r0
 8002b32:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d163      	bne.n	8002c02 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d126      	bne.n	8002b8e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 faad 	bl	80030b8 <RTC_ByteToBcd2>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	785b      	ldrb	r3, [r3, #1]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 faa6 	bl	80030b8 <RTC_ByteToBcd2>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b70:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	789b      	ldrb	r3, [r3, #2]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fa9e 	bl	80030b8 <RTC_ByteToBcd2>
 8002b7c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b7e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	78db      	ldrb	r3, [r3, #3]
 8002b86:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e018      	b.n	8002bc0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bb4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	78db      	ldrb	r3, [r3, #3]
 8002bba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002bca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002bce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bde:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6999      	ldr	r1, [r3, #24]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fa1f 	bl	800303c <RTC_ExitInitMode>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	22ff      	movs	r2, #255	@ 0xff
 8002c08:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d103      	bne.n	8002c18 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return status;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}

08002c2a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c2a:	b590      	push	{r4, r7, lr}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_RTC_SetDate+0x1a>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e075      	b.n	8002d30 <HAL_RTC_SetDate+0x106>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10e      	bne.n	8002c78 <HAL_RTC_SetDate+0x4e>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	785b      	ldrb	r3, [r3, #1]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	785b      	ldrb	r3, [r3, #1]
 8002c6a:	f023 0310 	bic.w	r3, r3, #16
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	330a      	adds	r3, #10
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	78db      	ldrb	r3, [r3, #3]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fa18 	bl	80030b8 <RTC_ByteToBcd2>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	785b      	ldrb	r3, [r3, #1]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fa11 	bl	80030b8 <RTC_ByteToBcd2>
 8002c96:	4603      	mov	r3, r0
 8002c98:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002c9a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	789b      	ldrb	r3, [r3, #2]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fa09 	bl	80030b8 <RTC_ByteToBcd2>
 8002ca6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ca8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e00e      	b.n	8002cd6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	78db      	ldrb	r3, [r3, #3]
 8002cbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002cc4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002cca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	22ca      	movs	r2, #202	@ 0xca
 8002cdc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2253      	movs	r2, #83	@ 0x53
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f972 	bl	8002fd0 <RTC_EnterInitMode>
 8002cec:	4603      	mov	r3, r0
 8002cee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d00:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d04:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f998 	bl	800303c <RTC_ExitInitMode>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	22ff      	movs	r2, #255	@ 0xff
 8002d16:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return status;
 8002d2e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd90      	pop	{r4, r7, pc}

08002d38 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_RTC_SetAlarm_IT+0x1a>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e0db      	b.n	8002f0a <HAL_RTC_SetAlarm_IT+0x1d2>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  if (Format == RTC_FORMAT_BIN)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d137      	bne.n	8002dd8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 f999 	bl	80030b8 <RTC_ByteToBcd2>
 8002d86:	4603      	mov	r3, r0
 8002d88:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f992 	bl	80030b8 <RTC_ByteToBcd2>
 8002d94:	4603      	mov	r3, r0
 8002d96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d98:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	789b      	ldrb	r3, [r3, #2]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f98a 	bl	80030b8 <RTC_ByteToBcd2>
 8002da4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002da6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	78db      	ldrb	r3, [r3, #3]
 8002dae:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002db0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f97c 	bl	80030b8 <RTC_ByteToBcd2>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002dc4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002dcc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e023      	b.n	8002e20 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2200      	movs	r2, #0
 8002dea:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	785b      	ldrb	r3, [r3, #1]
 8002df6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002df8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002dfe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	78db      	ldrb	r3, [r3, #3]
 8002e04:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002e06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e0e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002e10:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002e16:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	22ca      	movs	r2, #202	@ 0xca
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2253      	movs	r2, #83	@ 0x53
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e44:	d124      	bne.n	8002e90 <HAL_RTC_SetAlarm_IT+0x158>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e54:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e7c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e8c:	619a      	str	r2, [r3, #24]
 8002e8e:	e023      	b.n	8002ed8 <HAL_RTC_SetAlarm_IT+0x1a0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e9e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec6:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ed6:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8002ede:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f14 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8002eea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eee:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	22ff      	movs	r2, #255	@ 0xff
 8002ef6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40010400 	.word	0x40010400

08002f18 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002f20:	4b13      	ldr	r3, [pc, #76]	@ (8002f70 <HAL_RTC_AlarmIRQHandler+0x58>)
 8002f22:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002f26:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d006      	beq.n	8002f48 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f816 	bl	8002f74 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2202      	movs	r2, #2
 8002f58:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8cc 	bl	80030f8 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40010400 	.word	0x40010400

08002f74 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0d      	ldr	r2, [pc, #52]	@ (8002fcc <HAL_RTC_WaitForSynchro+0x44>)
 8002f96:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 8002f98:	f7fe f958 	bl	800124c <HAL_GetTick>
 8002f9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002f9e:	e009      	b.n	8002fb4 <HAL_RTC_WaitForSynchro+0x2c>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fa0:	f7fe f954 	bl	800124c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fae:	d901      	bls.n	8002fb4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e007      	b.n	8002fc4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ee      	beq.n	8002fa0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	0001005c 	.word	0x0001005c

08002fd0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d123      	bne.n	8003032 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ff8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ffa:	f7fe f927 	bl	800124c <HAL_GetTick>
 8002ffe:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003000:	e00d      	b.n	800301e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003002:	f7fe f923 	bl	800124c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003010:	d905      	bls.n	800301e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2203      	movs	r2, #3
 800301a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <RTC_EnterInitMode+0x62>
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b03      	cmp	r3, #3
 8003030:	d1e7      	bne.n	8003002 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003048:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <RTC_ExitInitMode+0x78>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a19      	ldr	r2, [pc, #100]	@ (80030b4 <RTC_ExitInitMode+0x78>)
 800304e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003052:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003054:	4b17      	ldr	r3, [pc, #92]	@ (80030b4 <RTC_ExitInitMode+0x78>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10c      	bne.n	800307a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff ff91 	bl	8002f88 <HAL_RTC_WaitForSynchro>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01e      	beq.n	80030aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2203      	movs	r2, #3
 8003070:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      status = HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e017      	b.n	80030aa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800307a:	4b0e      	ldr	r3, [pc, #56]	@ (80030b4 <RTC_ExitInitMode+0x78>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	4a0d      	ldr	r2, [pc, #52]	@ (80030b4 <RTC_ExitInitMode+0x78>)
 8003080:	f023 0320 	bic.w	r3, r3, #32
 8003084:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ff7e 	bl	8002f88 <HAL_RTC_WaitForSynchro>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2203      	movs	r2, #3
 8003096:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      status = HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800309e:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <RTC_ExitInitMode+0x78>)
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	4a04      	ldr	r2, [pc, #16]	@ (80030b4 <RTC_ExitInitMode+0x78>)
 80030a4:	f043 0320 	orr.w	r3, r3, #32
 80030a8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40002800 	.word	0x40002800

080030b8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80030ca:	e005      	b.n	80030d8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3301      	adds	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80030d2:	7afb      	ldrb	r3, [r7, #11]
 80030d4:	3b0a      	subs	r3, #10
 80030d6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80030d8:	7afb      	ldrb	r3, [r7, #11]
 80030da:	2b09      	cmp	r3, #9
 80030dc:	d8f6      	bhi.n	80030cc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	7afb      	ldrb	r3, [r7, #11]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	b2db      	uxtb	r3, r3
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e040      	b.n	80031a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd fe9a 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	@ 0x24
 8003138:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0201 	bic.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fefa 	bl	8003f4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fc9d 	bl	8003a98 <UART_SetConfig>
 800315e:	4603      	mov	r3, r0
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e01b      	b.n	80031a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 ff79 	bl	8004090 <UART_CheckIdleState>
 800319e:	4603      	mov	r3, r0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	@ 0x28
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d177      	bne.n	80032b0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_UART_Transmit+0x24>
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e070      	b.n	80032b2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2221      	movs	r2, #33	@ 0x21
 80031dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031de:	f7fe f835 	bl	800124c <HAL_GetTick>
 80031e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fc:	d108      	bne.n	8003210 <HAL_UART_Transmit+0x68>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	e003      	b.n	8003218 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003218:	e02f      	b.n	800327a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2200      	movs	r2, #0
 8003222:	2180      	movs	r1, #128	@ 0x80
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 ffdb 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e03b      	b.n	80032b2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	881a      	ldrh	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800324c:	b292      	uxth	r2, r2
 800324e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	3302      	adds	r3, #2
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e007      	b.n	8003268 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3301      	adds	r3, #1
 8003266:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1c9      	bne.n	800321a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2200      	movs	r2, #0
 800328e:	2140      	movs	r1, #64	@ 0x40
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 ffa5 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d004      	beq.n	80032a6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e005      	b.n	80032b2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b08a      	sub	sp, #40	@ 0x28
 80032be:	af02      	add	r7, sp, #8
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	f040 80b6 	bne.w	8003442 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <HAL_UART_Receive+0x28>
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0ae      	b.n	8003444 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2222      	movs	r2, #34	@ 0x22
 80032f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032fc:	f7fd ffa6 	bl	800124c <HAL_GetTick>
 8003300:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	88fa      	ldrh	r2, [r7, #6]
 8003306:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331a:	d10e      	bne.n	800333a <HAL_UART_Receive+0x80>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <HAL_UART_Receive+0x76>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800332a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800332e:	e02d      	b.n	800338c <HAL_UART_Receive+0xd2>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	22ff      	movs	r2, #255	@ 0xff
 8003334:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003338:	e028      	b.n	800338c <HAL_UART_Receive+0xd2>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10d      	bne.n	800335e <HAL_UART_Receive+0xa4>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_UART_Receive+0x9a>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	22ff      	movs	r2, #255	@ 0xff
 800334e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003352:	e01b      	b.n	800338c <HAL_UART_Receive+0xd2>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	227f      	movs	r2, #127	@ 0x7f
 8003358:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800335c:	e016      	b.n	800338c <HAL_UART_Receive+0xd2>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003366:	d10d      	bne.n	8003384 <HAL_UART_Receive+0xca>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <HAL_UART_Receive+0xc0>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	227f      	movs	r2, #127	@ 0x7f
 8003374:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003378:	e008      	b.n	800338c <HAL_UART_Receive+0xd2>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	223f      	movs	r2, #63	@ 0x3f
 800337e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003382:	e003      	b.n	800338c <HAL_UART_Receive+0xd2>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003392:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339c:	d108      	bne.n	80033b0 <HAL_UART_Receive+0xf6>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e003      	b.n	80033b8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80033b8:	e037      	b.n	800342a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2120      	movs	r1, #32
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 ff0b 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e033      	b.n	8003444 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10c      	bne.n	80033fc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	8a7b      	ldrh	r3, [r7, #18]
 80033ec:	4013      	ands	r3, r2
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	3302      	adds	r3, #2
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	e00d      	b.n	8003418 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003402:	b29b      	uxth	r3, r3
 8003404:	b2da      	uxtb	r2, r3
 8003406:	8a7b      	ldrh	r3, [r7, #18]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	4013      	ands	r3, r2
 800340c:	b2da      	uxtb	r2, r3
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1c1      	bne.n	80033ba <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b0ba      	sub	sp, #232	@ 0xe8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003472:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003476:	f640 030f 	movw	r3, #2063	@ 0x80f
 800347a:	4013      	ands	r3, r2
 800347c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d115      	bne.n	80034b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00f      	beq.n	80034b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 82ca 	beq.w	8003a3e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
      }
      return;
 80034b2:	e2c4      	b.n	8003a3e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80034b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8117 	beq.w	80036ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80034ce:	4b85      	ldr	r3, [pc, #532]	@ (80036e4 <HAL_UART_IRQHandler+0x298>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 810a 	beq.w	80036ec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d011      	beq.n	8003508 <HAL_UART_IRQHandler+0xbc>
 80034e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2201      	movs	r2, #1
 80034f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034fe:	f043 0201 	orr.w	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d011      	beq.n	8003538 <HAL_UART_IRQHandler+0xec>
 8003514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2202      	movs	r2, #2
 8003526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800352e:	f043 0204 	orr.w	r2, r3, #4
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d011      	beq.n	8003568 <HAL_UART_IRQHandler+0x11c>
 8003544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2204      	movs	r2, #4
 8003556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800355e:	f043 0202 	orr.w	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d017      	beq.n	80035a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003584:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00b      	beq.n	80035a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2208      	movs	r2, #8
 8003592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800359a:	f043 0208 	orr.w	r2, r3, #8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d012      	beq.n	80035d6 <HAL_UART_IRQHandler+0x18a>
 80035b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8230 	beq.w	8003a42 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00d      	beq.n	800360a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003610:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361e:	2b40      	cmp	r3, #64	@ 0x40
 8003620:	d005      	beq.n	800362e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003626:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800362a:	2b00      	cmp	r3, #0
 800362c:	d04f      	beq.n	80036ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fe43 	bl	80042ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363e:	2b40      	cmp	r3, #64	@ 0x40
 8003640:	d141      	bne.n	80036c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3308      	adds	r3, #8
 8003648:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003658:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800365c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800366e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003672:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800367a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1d9      	bne.n	8003642 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003692:	2b00      	cmp	r3, #0
 8003694:	d013      	beq.n	80036be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369a:	4a13      	ldr	r2, [pc, #76]	@ (80036e8 <HAL_UART_IRQHandler+0x29c>)
 800369c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fd ff51 	bl	800154a <HAL_DMA_Abort_IT>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d017      	beq.n	80036de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036b8:	4610      	mov	r0, r2
 80036ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036bc:	e00f      	b.n	80036de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f9d4 	bl	8003a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c4:	e00b      	b.n	80036de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f9d0 	bl	8003a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036cc:	e007      	b.n	80036de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f9cc 	bl	8003a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80036dc:	e1b1      	b.n	8003a42 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036de:	bf00      	nop
    return;
 80036e0:	e1af      	b.n	8003a42 <HAL_UART_IRQHandler+0x5f6>
 80036e2:	bf00      	nop
 80036e4:	04000120 	.word	0x04000120
 80036e8:	08004383 	.word	0x08004383

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	f040 816a 	bne.w	80039ca <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8163 	beq.w	80039ca <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 815c 	beq.w	80039ca <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2210      	movs	r2, #16
 8003718:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003724:	2b40      	cmp	r3, #64	@ 0x40
 8003726:	f040 80d4 	bne.w	80038d2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003736:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80ad 	beq.w	800389a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800374a:	429a      	cmp	r2, r3
 800374c:	f080 80a5 	bcs.w	800389a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003756:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 8086 	bne.w	8003878 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800379a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1da      	bne.n	800376c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3308      	adds	r3, #8
 80037bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3308      	adds	r3, #8
 80037d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80037de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80037e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80037ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e1      	bne.n	80037b6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3308      	adds	r3, #8
 80037f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3308      	adds	r3, #8
 8003812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003818:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800381c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e3      	bne.n	80037f2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003848:	f023 0310 	bic.w	r3, r3, #16
 800384c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800385a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800385c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e4      	bne.n	8003838 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd fe2b 	bl	80014ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800388a:	b29b      	uxth	r3, r3
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	b29b      	uxth	r3, r3
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8f4 	bl	8003a80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003898:	e0d5      	b.n	8003a46 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038a4:	429a      	cmp	r2, r3
 80038a6:	f040 80ce 	bne.w	8003a46 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	f040 80c5 	bne.w	8003a46 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038c8:	4619      	mov	r1, r3
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8d8 	bl	8003a80 <HAL_UARTEx_RxEventCallback>
      return;
 80038d0:	e0b9      	b.n	8003a46 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80ab 	beq.w	8003a4a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80038f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80a6 	beq.w	8003a4a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003906:	e853 3f00 	ldrex	r3, [r3]
 800390a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800390c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003912:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003920:	647b      	str	r3, [r7, #68]	@ 0x44
 8003922:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800392e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e4      	bne.n	80038fe <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	623b      	str	r3, [r7, #32]
   return(result);
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3308      	adds	r3, #8
 8003954:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003958:	633a      	str	r2, [r7, #48]	@ 0x30
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800395e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e3      	bne.n	8003934 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	60fb      	str	r3, [r7, #12]
   return(result);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f023 0310 	bic.w	r3, r3, #16
 8003994:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	69b9      	ldr	r1, [r7, #24]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	617b      	str	r3, [r7, #20]
   return(result);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e4      	bne.n	8003980 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f85c 	bl	8003a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039c8:	e03f      	b.n	8003a4a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00e      	beq.n	80039f4 <HAL_UART_IRQHandler+0x5a8>
 80039d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d008      	beq.n	80039f4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80039ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fd08 	bl	8004402 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039f2:	e02d      	b.n	8003a50 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00e      	beq.n	8003a1e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01c      	beq.n	8003a4e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
    }
    return;
 8003a1c:	e017      	b.n	8003a4e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d012      	beq.n	8003a50 <HAL_UART_IRQHandler+0x604>
 8003a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fcb9 	bl	80043ae <UART_EndTransmit_IT>
    return;
 8003a3c:	e008      	b.n	8003a50 <HAL_UART_IRQHandler+0x604>
      return;
 8003a3e:	bf00      	nop
 8003a40:	e006      	b.n	8003a50 <HAL_UART_IRQHandler+0x604>
    return;
 8003a42:	bf00      	nop
 8003a44:	e004      	b.n	8003a50 <HAL_UART_IRQHandler+0x604>
      return;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <HAL_UART_IRQHandler+0x604>
      return;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_UART_IRQHandler+0x604>
    return;
 8003a4e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003a50:	37e8      	adds	r7, #232	@ 0xe8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop

08003a58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a9c:	b08a      	sub	sp, #40	@ 0x28
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b9e      	ldr	r3, [pc, #632]	@ (8003d40 <UART_SetConfig+0x2a8>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a93      	ldr	r2, [pc, #588]	@ (8003d44 <UART_SetConfig+0x2ac>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b00:	4313      	orrs	r3, r2
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b14:	430a      	orrs	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a8a      	ldr	r2, [pc, #552]	@ (8003d48 <UART_SetConfig+0x2b0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d126      	bne.n	8003b70 <UART_SetConfig+0xd8>
 8003b22:	4b8a      	ldr	r3, [pc, #552]	@ (8003d4c <UART_SetConfig+0x2b4>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d81b      	bhi.n	8003b68 <UART_SetConfig+0xd0>
 8003b30:	a201      	add	r2, pc, #4	@ (adr r2, 8003b38 <UART_SetConfig+0xa0>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b49 	.word	0x08003b49
 8003b3c:	08003b59 	.word	0x08003b59
 8003b40:	08003b51 	.word	0x08003b51
 8003b44:	08003b61 	.word	0x08003b61
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4e:	e0ab      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003b50:	2302      	movs	r3, #2
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b56:	e0a7      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5e:	e0a3      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003b60:	2308      	movs	r3, #8
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b66:	e09f      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6e:	e09b      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a76      	ldr	r2, [pc, #472]	@ (8003d50 <UART_SetConfig+0x2b8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d138      	bne.n	8003bec <UART_SetConfig+0x154>
 8003b7a:	4b74      	ldr	r3, [pc, #464]	@ (8003d4c <UART_SetConfig+0x2b4>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b80:	f003 030c 	and.w	r3, r3, #12
 8003b84:	2b0c      	cmp	r3, #12
 8003b86:	d82d      	bhi.n	8003be4 <UART_SetConfig+0x14c>
 8003b88:	a201      	add	r2, pc, #4	@ (adr r2, 8003b90 <UART_SetConfig+0xf8>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bc5 	.word	0x08003bc5
 8003b94:	08003be5 	.word	0x08003be5
 8003b98:	08003be5 	.word	0x08003be5
 8003b9c:	08003be5 	.word	0x08003be5
 8003ba0:	08003bd5 	.word	0x08003bd5
 8003ba4:	08003be5 	.word	0x08003be5
 8003ba8:	08003be5 	.word	0x08003be5
 8003bac:	08003be5 	.word	0x08003be5
 8003bb0:	08003bcd 	.word	0x08003bcd
 8003bb4:	08003be5 	.word	0x08003be5
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003be5 	.word	0x08003be5
 8003bc0:	08003bdd 	.word	0x08003bdd
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bca:	e06d      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd2:	e069      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bda:	e065      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003bdc:	2308      	movs	r3, #8
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be2:	e061      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003be4:	2310      	movs	r3, #16
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bea:	e05d      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a58      	ldr	r2, [pc, #352]	@ (8003d54 <UART_SetConfig+0x2bc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d125      	bne.n	8003c42 <UART_SetConfig+0x1aa>
 8003bf6:	4b55      	ldr	r3, [pc, #340]	@ (8003d4c <UART_SetConfig+0x2b4>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c00:	2b30      	cmp	r3, #48	@ 0x30
 8003c02:	d016      	beq.n	8003c32 <UART_SetConfig+0x19a>
 8003c04:	2b30      	cmp	r3, #48	@ 0x30
 8003c06:	d818      	bhi.n	8003c3a <UART_SetConfig+0x1a2>
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d00a      	beq.n	8003c22 <UART_SetConfig+0x18a>
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d814      	bhi.n	8003c3a <UART_SetConfig+0x1a2>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <UART_SetConfig+0x182>
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d008      	beq.n	8003c2a <UART_SetConfig+0x192>
 8003c18:	e00f      	b.n	8003c3a <UART_SetConfig+0x1a2>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c20:	e042      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003c22:	2302      	movs	r3, #2
 8003c24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c28:	e03e      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c30:	e03a      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003c32:	2308      	movs	r3, #8
 8003c34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c38:	e036      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003c3a:	2310      	movs	r3, #16
 8003c3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c40:	e032      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a3f      	ldr	r2, [pc, #252]	@ (8003d44 <UART_SetConfig+0x2ac>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d12a      	bne.n	8003ca2 <UART_SetConfig+0x20a>
 8003c4c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d4c <UART_SetConfig+0x2b4>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c52:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c5a:	d01a      	beq.n	8003c92 <UART_SetConfig+0x1fa>
 8003c5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c60:	d81b      	bhi.n	8003c9a <UART_SetConfig+0x202>
 8003c62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c66:	d00c      	beq.n	8003c82 <UART_SetConfig+0x1ea>
 8003c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c6c:	d815      	bhi.n	8003c9a <UART_SetConfig+0x202>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <UART_SetConfig+0x1e2>
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c76:	d008      	beq.n	8003c8a <UART_SetConfig+0x1f2>
 8003c78:	e00f      	b.n	8003c9a <UART_SetConfig+0x202>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c80:	e012      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003c82:	2302      	movs	r3, #2
 8003c84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c88:	e00e      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003c8a:	2304      	movs	r3, #4
 8003c8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c90:	e00a      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003c92:	2308      	movs	r3, #8
 8003c94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c98:	e006      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003c9a:	2310      	movs	r3, #16
 8003c9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca0:	e002      	b.n	8003ca8 <UART_SetConfig+0x210>
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a25      	ldr	r2, [pc, #148]	@ (8003d44 <UART_SetConfig+0x2ac>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	f040 808a 	bne.w	8003dc8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d824      	bhi.n	8003d06 <UART_SetConfig+0x26e>
 8003cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <UART_SetConfig+0x22c>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003d07 	.word	0x08003d07
 8003ccc:	08003cf1 	.word	0x08003cf1
 8003cd0:	08003d07 	.word	0x08003d07
 8003cd4:	08003cf7 	.word	0x08003cf7
 8003cd8:	08003d07 	.word	0x08003d07
 8003cdc:	08003d07 	.word	0x08003d07
 8003ce0:	08003d07 	.word	0x08003d07
 8003ce4:	08003cff 	.word	0x08003cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce8:	f7fe fc50 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8003cec:	61f8      	str	r0, [r7, #28]
        break;
 8003cee:	e010      	b.n	8003d12 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf0:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <UART_SetConfig+0x2c0>)
 8003cf2:	61fb      	str	r3, [r7, #28]
        break;
 8003cf4:	e00d      	b.n	8003d12 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cf6:	f7fe fbb1 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8003cfa:	61f8      	str	r0, [r7, #28]
        break;
 8003cfc:	e009      	b.n	8003d12 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d02:	61fb      	str	r3, [r7, #28]
        break;
 8003d04:	e005      	b.n	8003d12 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8109 	beq.w	8003f2c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d305      	bcc.n	8003d36 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d912      	bls.n	8003d5c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d3c:	e0f6      	b.n	8003f2c <UART_SetConfig+0x494>
 8003d3e:	bf00      	nop
 8003d40:	efff69f3 	.word	0xefff69f3
 8003d44:	40008000 	.word	0x40008000
 8003d48:	40013800 	.word	0x40013800
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40004400 	.word	0x40004400
 8003d54:	40004800 	.word	0x40004800
 8003d58:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	461c      	mov	r4, r3
 8003d62:	4615      	mov	r5, r2
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	022b      	lsls	r3, r5, #8
 8003d6e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d72:	0222      	lsls	r2, r4, #8
 8003d74:	68f9      	ldr	r1, [r7, #12]
 8003d76:	6849      	ldr	r1, [r1, #4]
 8003d78:	0849      	lsrs	r1, r1, #1
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	4688      	mov	r8, r1
 8003d7e:	4681      	mov	r9, r0
 8003d80:	eb12 0a08 	adds.w	sl, r2, r8
 8003d84:	eb43 0b09 	adc.w	fp, r3, r9
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d96:	4650      	mov	r0, sl
 8003d98:	4659      	mov	r1, fp
 8003d9a:	f7fc fa71 	bl	8000280 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4613      	mov	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dac:	d308      	bcc.n	8003dc0 <UART_SetConfig+0x328>
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003db4:	d204      	bcs.n	8003dc0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	e0b5      	b.n	8003f2c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003dc6:	e0b1      	b.n	8003f2c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd0:	d15d      	bne.n	8003e8e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d827      	bhi.n	8003e2a <UART_SetConfig+0x392>
 8003dda:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <UART_SetConfig+0x348>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e0d 	.word	0x08003e0d
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	08003e2b 	.word	0x08003e2b
 8003df0:	08003e1b 	.word	0x08003e1b
 8003df4:	08003e2b 	.word	0x08003e2b
 8003df8:	08003e2b 	.word	0x08003e2b
 8003dfc:	08003e2b 	.word	0x08003e2b
 8003e00:	08003e23 	.word	0x08003e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7fe fbc2 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8003e08:	61f8      	str	r0, [r7, #28]
        break;
 8003e0a:	e014      	b.n	8003e36 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7fe fbd4 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8003e10:	61f8      	str	r0, [r7, #28]
        break;
 8003e12:	e010      	b.n	8003e36 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e14:	4b4c      	ldr	r3, [pc, #304]	@ (8003f48 <UART_SetConfig+0x4b0>)
 8003e16:	61fb      	str	r3, [r7, #28]
        break;
 8003e18:	e00d      	b.n	8003e36 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7fe fb1f 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8003e1e:	61f8      	str	r0, [r7, #28]
        break;
 8003e20:	e009      	b.n	8003e36 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e26:	61fb      	str	r3, [r7, #28]
        break;
 8003e28:	e005      	b.n	8003e36 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d077      	beq.n	8003f2c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	005a      	lsls	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	441a      	add	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b0f      	cmp	r3, #15
 8003e56:	d916      	bls.n	8003e86 <UART_SetConfig+0x3ee>
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e5e:	d212      	bcs.n	8003e86 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f023 030f 	bic.w	r3, r3, #15
 8003e68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	8afb      	ldrh	r3, [r7, #22]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	8afa      	ldrh	r2, [r7, #22]
 8003e82:	60da      	str	r2, [r3, #12]
 8003e84:	e052      	b.n	8003f2c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e8c:	e04e      	b.n	8003f2c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d827      	bhi.n	8003ee6 <UART_SetConfig+0x44e>
 8003e96:	a201      	add	r2, pc, #4	@ (adr r2, 8003e9c <UART_SetConfig+0x404>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ec1 	.word	0x08003ec1
 8003ea0:	08003ec9 	.word	0x08003ec9
 8003ea4:	08003ed1 	.word	0x08003ed1
 8003ea8:	08003ee7 	.word	0x08003ee7
 8003eac:	08003ed7 	.word	0x08003ed7
 8003eb0:	08003ee7 	.word	0x08003ee7
 8003eb4:	08003ee7 	.word	0x08003ee7
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	08003edf 	.word	0x08003edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec0:	f7fe fb64 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8003ec4:	61f8      	str	r0, [r7, #28]
        break;
 8003ec6:	e014      	b.n	8003ef2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec8:	f7fe fb76 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8003ecc:	61f8      	str	r0, [r7, #28]
        break;
 8003ece:	e010      	b.n	8003ef2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f48 <UART_SetConfig+0x4b0>)
 8003ed2:	61fb      	str	r3, [r7, #28]
        break;
 8003ed4:	e00d      	b.n	8003ef2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed6:	f7fe fac1 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8003eda:	61f8      	str	r0, [r7, #28]
        break;
 8003edc:	e009      	b.n	8003ef2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ee2:	61fb      	str	r3, [r7, #28]
        break;
 8003ee4:	e005      	b.n	8003ef2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ef0:	bf00      	nop
    }

    if (pclk != 0U)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d019      	beq.n	8003f2c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	085a      	lsrs	r2, r3, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	441a      	add	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b0f      	cmp	r3, #15
 8003f10:	d909      	bls.n	8003f26 <UART_SetConfig+0x48e>
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f18:	d205      	bcs.n	8003f26 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	e002      	b.n	8003f2c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f38:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3728      	adds	r7, #40	@ 0x28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f46:	bf00      	nop
 8003f48:	00f42400 	.word	0x00f42400

08003f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01a      	beq.n	8004062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800404a:	d10a      	bne.n	8004062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
  }
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b098      	sub	sp, #96	@ 0x60
 8004094:	af02      	add	r7, sp, #8
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a0:	f7fd f8d4 	bl	800124c <HAL_GetTick>
 80040a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d12e      	bne.n	8004112 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040bc:	2200      	movs	r2, #0
 80040be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f88c 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d021      	beq.n	8004112 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e6      	bne.n	80040ce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e062      	b.n	80041d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d149      	bne.n	80041b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004120:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004128:	2200      	movs	r2, #0
 800412a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f856 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d03c      	beq.n	80041b4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	623b      	str	r3, [r7, #32]
   return(result);
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800414e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004158:	633b      	str	r3, [r7, #48]	@ 0x30
 800415a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800415e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e6      	bne.n	800413a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3308      	adds	r3, #8
 8004172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	60fb      	str	r3, [r7, #12]
   return(result);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3308      	adds	r3, #8
 800418a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800418c:	61fa      	str	r2, [r7, #28]
 800418e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	69b9      	ldr	r1, [r7, #24]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	617b      	str	r3, [r7, #20]
   return(result);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e011      	b.n	80041d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3758      	adds	r7, #88	@ 0x58
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f0:	e04f      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d04b      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fd f827 	bl	800124c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <UART_WaitOnFlagUntilTimeout+0x30>
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e04e      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	d037      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b80      	cmp	r3, #128	@ 0x80
 8004226:	d034      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b40      	cmp	r3, #64	@ 0x40
 800422c:	d031      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b08      	cmp	r3, #8
 800423a:	d110      	bne.n	800425e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2208      	movs	r2, #8
 8004242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f838 	bl	80042ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2208      	movs	r2, #8
 800424e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e029      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800426c:	d111      	bne.n	8004292 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f81e 	bl	80042ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e00f      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	429a      	cmp	r2, r3
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d0a0      	beq.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b095      	sub	sp, #84	@ 0x54
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e6      	bne.n	80042c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3308      	adds	r3, #8
 80042fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	61fb      	str	r3, [r7, #28]
   return(result);
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3308      	adds	r3, #8
 8004312:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004314:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004316:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800431a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e5      	bne.n	80042f4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800432c:	2b01      	cmp	r3, #1
 800432e:	d118      	bne.n	8004362 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	60bb      	str	r3, [r7, #8]
   return(result);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f023 0310 	bic.w	r3, r3, #16
 8004344:	647b      	str	r3, [r7, #68]	@ 0x44
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6979      	ldr	r1, [r7, #20]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	613b      	str	r3, [r7, #16]
   return(result);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e6      	bne.n	8004330 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004376:	bf00      	nop
 8004378:	3754      	adds	r7, #84	@ 0x54
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f7ff fb63 	bl	8003a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b088      	sub	sp, #32
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6979      	ldr	r1, [r7, #20]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	613b      	str	r3, [r7, #16]
   return(result);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e6      	bne.n	80043b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fb2f 	bl	8003a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043fa:	bf00      	nop
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <std>:
 8004418:	2300      	movs	r3, #0
 800441a:	b510      	push	{r4, lr}
 800441c:	4604      	mov	r4, r0
 800441e:	e9c0 3300 	strd	r3, r3, [r0]
 8004422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004426:	6083      	str	r3, [r0, #8]
 8004428:	8181      	strh	r1, [r0, #12]
 800442a:	6643      	str	r3, [r0, #100]	@ 0x64
 800442c:	81c2      	strh	r2, [r0, #14]
 800442e:	6183      	str	r3, [r0, #24]
 8004430:	4619      	mov	r1, r3
 8004432:	2208      	movs	r2, #8
 8004434:	305c      	adds	r0, #92	@ 0x5c
 8004436:	f000 fa59 	bl	80048ec <memset>
 800443a:	4b0d      	ldr	r3, [pc, #52]	@ (8004470 <std+0x58>)
 800443c:	6263      	str	r3, [r4, #36]	@ 0x24
 800443e:	4b0d      	ldr	r3, [pc, #52]	@ (8004474 <std+0x5c>)
 8004440:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <std+0x60>)
 8004444:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004446:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <std+0x64>)
 8004448:	6323      	str	r3, [r4, #48]	@ 0x30
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <std+0x68>)
 800444c:	6224      	str	r4, [r4, #32]
 800444e:	429c      	cmp	r4, r3
 8004450:	d006      	beq.n	8004460 <std+0x48>
 8004452:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004456:	4294      	cmp	r4, r2
 8004458:	d002      	beq.n	8004460 <std+0x48>
 800445a:	33d0      	adds	r3, #208	@ 0xd0
 800445c:	429c      	cmp	r4, r3
 800445e:	d105      	bne.n	800446c <std+0x54>
 8004460:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004468:	f000 bace 	b.w	8004a08 <__retarget_lock_init_recursive>
 800446c:	bd10      	pop	{r4, pc}
 800446e:	bf00      	nop
 8004470:	08004739 	.word	0x08004739
 8004474:	0800475f 	.word	0x0800475f
 8004478:	08004797 	.word	0x08004797
 800447c:	080047bb 	.word	0x080047bb
 8004480:	20000140 	.word	0x20000140

08004484 <stdio_exit_handler>:
 8004484:	4a02      	ldr	r2, [pc, #8]	@ (8004490 <stdio_exit_handler+0xc>)
 8004486:	4903      	ldr	r1, [pc, #12]	@ (8004494 <stdio_exit_handler+0x10>)
 8004488:	4803      	ldr	r0, [pc, #12]	@ (8004498 <stdio_exit_handler+0x14>)
 800448a:	f000 b869 	b.w	8004560 <_fwalk_sglue>
 800448e:	bf00      	nop
 8004490:	2000000c 	.word	0x2000000c
 8004494:	08005b8d 	.word	0x08005b8d
 8004498:	2000001c 	.word	0x2000001c

0800449c <cleanup_stdio>:
 800449c:	6841      	ldr	r1, [r0, #4]
 800449e:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <cleanup_stdio+0x34>)
 80044a0:	4299      	cmp	r1, r3
 80044a2:	b510      	push	{r4, lr}
 80044a4:	4604      	mov	r4, r0
 80044a6:	d001      	beq.n	80044ac <cleanup_stdio+0x10>
 80044a8:	f001 fb70 	bl	8005b8c <_fflush_r>
 80044ac:	68a1      	ldr	r1, [r4, #8]
 80044ae:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <cleanup_stdio+0x38>)
 80044b0:	4299      	cmp	r1, r3
 80044b2:	d002      	beq.n	80044ba <cleanup_stdio+0x1e>
 80044b4:	4620      	mov	r0, r4
 80044b6:	f001 fb69 	bl	8005b8c <_fflush_r>
 80044ba:	68e1      	ldr	r1, [r4, #12]
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <cleanup_stdio+0x3c>)
 80044be:	4299      	cmp	r1, r3
 80044c0:	d004      	beq.n	80044cc <cleanup_stdio+0x30>
 80044c2:	4620      	mov	r0, r4
 80044c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c8:	f001 bb60 	b.w	8005b8c <_fflush_r>
 80044cc:	bd10      	pop	{r4, pc}
 80044ce:	bf00      	nop
 80044d0:	20000140 	.word	0x20000140
 80044d4:	200001a8 	.word	0x200001a8
 80044d8:	20000210 	.word	0x20000210

080044dc <global_stdio_init.part.0>:
 80044dc:	b510      	push	{r4, lr}
 80044de:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <global_stdio_init.part.0+0x30>)
 80044e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004510 <global_stdio_init.part.0+0x34>)
 80044e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004514 <global_stdio_init.part.0+0x38>)
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	4620      	mov	r0, r4
 80044e8:	2200      	movs	r2, #0
 80044ea:	2104      	movs	r1, #4
 80044ec:	f7ff ff94 	bl	8004418 <std>
 80044f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044f4:	2201      	movs	r2, #1
 80044f6:	2109      	movs	r1, #9
 80044f8:	f7ff ff8e 	bl	8004418 <std>
 80044fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004500:	2202      	movs	r2, #2
 8004502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004506:	2112      	movs	r1, #18
 8004508:	f7ff bf86 	b.w	8004418 <std>
 800450c:	20000278 	.word	0x20000278
 8004510:	20000140 	.word	0x20000140
 8004514:	08004485 	.word	0x08004485

08004518 <__sfp_lock_acquire>:
 8004518:	4801      	ldr	r0, [pc, #4]	@ (8004520 <__sfp_lock_acquire+0x8>)
 800451a:	f000 ba76 	b.w	8004a0a <__retarget_lock_acquire_recursive>
 800451e:	bf00      	nop
 8004520:	20000281 	.word	0x20000281

08004524 <__sfp_lock_release>:
 8004524:	4801      	ldr	r0, [pc, #4]	@ (800452c <__sfp_lock_release+0x8>)
 8004526:	f000 ba71 	b.w	8004a0c <__retarget_lock_release_recursive>
 800452a:	bf00      	nop
 800452c:	20000281 	.word	0x20000281

08004530 <__sinit>:
 8004530:	b510      	push	{r4, lr}
 8004532:	4604      	mov	r4, r0
 8004534:	f7ff fff0 	bl	8004518 <__sfp_lock_acquire>
 8004538:	6a23      	ldr	r3, [r4, #32]
 800453a:	b11b      	cbz	r3, 8004544 <__sinit+0x14>
 800453c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004540:	f7ff bff0 	b.w	8004524 <__sfp_lock_release>
 8004544:	4b04      	ldr	r3, [pc, #16]	@ (8004558 <__sinit+0x28>)
 8004546:	6223      	str	r3, [r4, #32]
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <__sinit+0x2c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f5      	bne.n	800453c <__sinit+0xc>
 8004550:	f7ff ffc4 	bl	80044dc <global_stdio_init.part.0>
 8004554:	e7f2      	b.n	800453c <__sinit+0xc>
 8004556:	bf00      	nop
 8004558:	0800449d 	.word	0x0800449d
 800455c:	20000278 	.word	0x20000278

08004560 <_fwalk_sglue>:
 8004560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004564:	4607      	mov	r7, r0
 8004566:	4688      	mov	r8, r1
 8004568:	4614      	mov	r4, r2
 800456a:	2600      	movs	r6, #0
 800456c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004570:	f1b9 0901 	subs.w	r9, r9, #1
 8004574:	d505      	bpl.n	8004582 <_fwalk_sglue+0x22>
 8004576:	6824      	ldr	r4, [r4, #0]
 8004578:	2c00      	cmp	r4, #0
 800457a:	d1f7      	bne.n	800456c <_fwalk_sglue+0xc>
 800457c:	4630      	mov	r0, r6
 800457e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004582:	89ab      	ldrh	r3, [r5, #12]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d907      	bls.n	8004598 <_fwalk_sglue+0x38>
 8004588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800458c:	3301      	adds	r3, #1
 800458e:	d003      	beq.n	8004598 <_fwalk_sglue+0x38>
 8004590:	4629      	mov	r1, r5
 8004592:	4638      	mov	r0, r7
 8004594:	47c0      	blx	r8
 8004596:	4306      	orrs	r6, r0
 8004598:	3568      	adds	r5, #104	@ 0x68
 800459a:	e7e9      	b.n	8004570 <_fwalk_sglue+0x10>

0800459c <iprintf>:
 800459c:	b40f      	push	{r0, r1, r2, r3}
 800459e:	b507      	push	{r0, r1, r2, lr}
 80045a0:	4906      	ldr	r1, [pc, #24]	@ (80045bc <iprintf+0x20>)
 80045a2:	ab04      	add	r3, sp, #16
 80045a4:	6808      	ldr	r0, [r1, #0]
 80045a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80045aa:	6881      	ldr	r1, [r0, #8]
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	f000 fe75 	bl	800529c <_vfiprintf_r>
 80045b2:	b003      	add	sp, #12
 80045b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045b8:	b004      	add	sp, #16
 80045ba:	4770      	bx	lr
 80045bc:	20000018 	.word	0x20000018

080045c0 <_puts_r>:
 80045c0:	6a03      	ldr	r3, [r0, #32]
 80045c2:	b570      	push	{r4, r5, r6, lr}
 80045c4:	6884      	ldr	r4, [r0, #8]
 80045c6:	4605      	mov	r5, r0
 80045c8:	460e      	mov	r6, r1
 80045ca:	b90b      	cbnz	r3, 80045d0 <_puts_r+0x10>
 80045cc:	f7ff ffb0 	bl	8004530 <__sinit>
 80045d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045d2:	07db      	lsls	r3, r3, #31
 80045d4:	d405      	bmi.n	80045e2 <_puts_r+0x22>
 80045d6:	89a3      	ldrh	r3, [r4, #12]
 80045d8:	0598      	lsls	r0, r3, #22
 80045da:	d402      	bmi.n	80045e2 <_puts_r+0x22>
 80045dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045de:	f000 fa14 	bl	8004a0a <__retarget_lock_acquire_recursive>
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	0719      	lsls	r1, r3, #28
 80045e6:	d502      	bpl.n	80045ee <_puts_r+0x2e>
 80045e8:	6923      	ldr	r3, [r4, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d135      	bne.n	800465a <_puts_r+0x9a>
 80045ee:	4621      	mov	r1, r4
 80045f0:	4628      	mov	r0, r5
 80045f2:	f000 f925 	bl	8004840 <__swsetup_r>
 80045f6:	b380      	cbz	r0, 800465a <_puts_r+0x9a>
 80045f8:	f04f 35ff 	mov.w	r5, #4294967295
 80045fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045fe:	07da      	lsls	r2, r3, #31
 8004600:	d405      	bmi.n	800460e <_puts_r+0x4e>
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	059b      	lsls	r3, r3, #22
 8004606:	d402      	bmi.n	800460e <_puts_r+0x4e>
 8004608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800460a:	f000 f9ff 	bl	8004a0c <__retarget_lock_release_recursive>
 800460e:	4628      	mov	r0, r5
 8004610:	bd70      	pop	{r4, r5, r6, pc}
 8004612:	2b00      	cmp	r3, #0
 8004614:	da04      	bge.n	8004620 <_puts_r+0x60>
 8004616:	69a2      	ldr	r2, [r4, #24]
 8004618:	429a      	cmp	r2, r3
 800461a:	dc17      	bgt.n	800464c <_puts_r+0x8c>
 800461c:	290a      	cmp	r1, #10
 800461e:	d015      	beq.n	800464c <_puts_r+0x8c>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	6022      	str	r2, [r4, #0]
 8004626:	7019      	strb	r1, [r3, #0]
 8004628:	68a3      	ldr	r3, [r4, #8]
 800462a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800462e:	3b01      	subs	r3, #1
 8004630:	60a3      	str	r3, [r4, #8]
 8004632:	2900      	cmp	r1, #0
 8004634:	d1ed      	bne.n	8004612 <_puts_r+0x52>
 8004636:	2b00      	cmp	r3, #0
 8004638:	da11      	bge.n	800465e <_puts_r+0x9e>
 800463a:	4622      	mov	r2, r4
 800463c:	210a      	movs	r1, #10
 800463e:	4628      	mov	r0, r5
 8004640:	f000 f8bf 	bl	80047c2 <__swbuf_r>
 8004644:	3001      	adds	r0, #1
 8004646:	d0d7      	beq.n	80045f8 <_puts_r+0x38>
 8004648:	250a      	movs	r5, #10
 800464a:	e7d7      	b.n	80045fc <_puts_r+0x3c>
 800464c:	4622      	mov	r2, r4
 800464e:	4628      	mov	r0, r5
 8004650:	f000 f8b7 	bl	80047c2 <__swbuf_r>
 8004654:	3001      	adds	r0, #1
 8004656:	d1e7      	bne.n	8004628 <_puts_r+0x68>
 8004658:	e7ce      	b.n	80045f8 <_puts_r+0x38>
 800465a:	3e01      	subs	r6, #1
 800465c:	e7e4      	b.n	8004628 <_puts_r+0x68>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	6022      	str	r2, [r4, #0]
 8004664:	220a      	movs	r2, #10
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e7ee      	b.n	8004648 <_puts_r+0x88>
	...

0800466c <puts>:
 800466c:	4b02      	ldr	r3, [pc, #8]	@ (8004678 <puts+0xc>)
 800466e:	4601      	mov	r1, r0
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	f7ff bfa5 	b.w	80045c0 <_puts_r>
 8004676:	bf00      	nop
 8004678:	20000018 	.word	0x20000018

0800467c <sniprintf>:
 800467c:	b40c      	push	{r2, r3}
 800467e:	b530      	push	{r4, r5, lr}
 8004680:	4b17      	ldr	r3, [pc, #92]	@ (80046e0 <sniprintf+0x64>)
 8004682:	1e0c      	subs	r4, r1, #0
 8004684:	681d      	ldr	r5, [r3, #0]
 8004686:	b09d      	sub	sp, #116	@ 0x74
 8004688:	da08      	bge.n	800469c <sniprintf+0x20>
 800468a:	238b      	movs	r3, #139	@ 0x8b
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	f04f 30ff 	mov.w	r0, #4294967295
 8004692:	b01d      	add	sp, #116	@ 0x74
 8004694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004698:	b002      	add	sp, #8
 800469a:	4770      	bx	lr
 800469c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80046a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80046a4:	bf14      	ite	ne
 80046a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046aa:	4623      	moveq	r3, r4
 80046ac:	9304      	str	r3, [sp, #16]
 80046ae:	9307      	str	r3, [sp, #28]
 80046b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046b4:	9002      	str	r0, [sp, #8]
 80046b6:	9006      	str	r0, [sp, #24]
 80046b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80046be:	ab21      	add	r3, sp, #132	@ 0x84
 80046c0:	a902      	add	r1, sp, #8
 80046c2:	4628      	mov	r0, r5
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	f000 faf7 	bl	8004cb8 <_svfiprintf_r>
 80046ca:	1c43      	adds	r3, r0, #1
 80046cc:	bfbc      	itt	lt
 80046ce:	238b      	movlt	r3, #139	@ 0x8b
 80046d0:	602b      	strlt	r3, [r5, #0]
 80046d2:	2c00      	cmp	r4, #0
 80046d4:	d0dd      	beq.n	8004692 <sniprintf+0x16>
 80046d6:	9b02      	ldr	r3, [sp, #8]
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e7d9      	b.n	8004692 <sniprintf+0x16>
 80046de:	bf00      	nop
 80046e0:	20000018 	.word	0x20000018

080046e4 <siscanf>:
 80046e4:	b40e      	push	{r1, r2, r3}
 80046e6:	b530      	push	{r4, r5, lr}
 80046e8:	b09c      	sub	sp, #112	@ 0x70
 80046ea:	ac1f      	add	r4, sp, #124	@ 0x7c
 80046ec:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80046f0:	f854 5b04 	ldr.w	r5, [r4], #4
 80046f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80046f8:	9002      	str	r0, [sp, #8]
 80046fa:	9006      	str	r0, [sp, #24]
 80046fc:	f7fb fd68 	bl	80001d0 <strlen>
 8004700:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <siscanf+0x4c>)
 8004702:	9003      	str	r0, [sp, #12]
 8004704:	9007      	str	r0, [sp, #28]
 8004706:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004708:	480a      	ldr	r0, [pc, #40]	@ (8004734 <siscanf+0x50>)
 800470a:	9401      	str	r4, [sp, #4]
 800470c:	2300      	movs	r3, #0
 800470e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004710:	9314      	str	r3, [sp, #80]	@ 0x50
 8004712:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004716:	f8ad 3016 	strh.w	r3, [sp, #22]
 800471a:	462a      	mov	r2, r5
 800471c:	4623      	mov	r3, r4
 800471e:	a902      	add	r1, sp, #8
 8004720:	6800      	ldr	r0, [r0, #0]
 8004722:	f000 fc1d 	bl	8004f60 <__ssvfiscanf_r>
 8004726:	b01c      	add	sp, #112	@ 0x70
 8004728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800472c:	b003      	add	sp, #12
 800472e:	4770      	bx	lr
 8004730:	0800475b 	.word	0x0800475b
 8004734:	20000018 	.word	0x20000018

08004738 <__sread>:
 8004738:	b510      	push	{r4, lr}
 800473a:	460c      	mov	r4, r1
 800473c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004740:	f000 f914 	bl	800496c <_read_r>
 8004744:	2800      	cmp	r0, #0
 8004746:	bfab      	itete	ge
 8004748:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800474a:	89a3      	ldrhlt	r3, [r4, #12]
 800474c:	181b      	addge	r3, r3, r0
 800474e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004752:	bfac      	ite	ge
 8004754:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004756:	81a3      	strhlt	r3, [r4, #12]
 8004758:	bd10      	pop	{r4, pc}

0800475a <__seofread>:
 800475a:	2000      	movs	r0, #0
 800475c:	4770      	bx	lr

0800475e <__swrite>:
 800475e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004762:	461f      	mov	r7, r3
 8004764:	898b      	ldrh	r3, [r1, #12]
 8004766:	05db      	lsls	r3, r3, #23
 8004768:	4605      	mov	r5, r0
 800476a:	460c      	mov	r4, r1
 800476c:	4616      	mov	r6, r2
 800476e:	d505      	bpl.n	800477c <__swrite+0x1e>
 8004770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004774:	2302      	movs	r3, #2
 8004776:	2200      	movs	r2, #0
 8004778:	f000 f8e6 	bl	8004948 <_lseek_r>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004782:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	4632      	mov	r2, r6
 800478a:	463b      	mov	r3, r7
 800478c:	4628      	mov	r0, r5
 800478e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004792:	f000 b8fd 	b.w	8004990 <_write_r>

08004796 <__sseek>:
 8004796:	b510      	push	{r4, lr}
 8004798:	460c      	mov	r4, r1
 800479a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479e:	f000 f8d3 	bl	8004948 <_lseek_r>
 80047a2:	1c43      	adds	r3, r0, #1
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	bf15      	itete	ne
 80047a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047b2:	81a3      	strheq	r3, [r4, #12]
 80047b4:	bf18      	it	ne
 80047b6:	81a3      	strhne	r3, [r4, #12]
 80047b8:	bd10      	pop	{r4, pc}

080047ba <__sclose>:
 80047ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047be:	f000 b8b3 	b.w	8004928 <_close_r>

080047c2 <__swbuf_r>:
 80047c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c4:	460e      	mov	r6, r1
 80047c6:	4614      	mov	r4, r2
 80047c8:	4605      	mov	r5, r0
 80047ca:	b118      	cbz	r0, 80047d4 <__swbuf_r+0x12>
 80047cc:	6a03      	ldr	r3, [r0, #32]
 80047ce:	b90b      	cbnz	r3, 80047d4 <__swbuf_r+0x12>
 80047d0:	f7ff feae 	bl	8004530 <__sinit>
 80047d4:	69a3      	ldr	r3, [r4, #24]
 80047d6:	60a3      	str	r3, [r4, #8]
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	071a      	lsls	r2, r3, #28
 80047dc:	d501      	bpl.n	80047e2 <__swbuf_r+0x20>
 80047de:	6923      	ldr	r3, [r4, #16]
 80047e0:	b943      	cbnz	r3, 80047f4 <__swbuf_r+0x32>
 80047e2:	4621      	mov	r1, r4
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 f82b 	bl	8004840 <__swsetup_r>
 80047ea:	b118      	cbz	r0, 80047f4 <__swbuf_r+0x32>
 80047ec:	f04f 37ff 	mov.w	r7, #4294967295
 80047f0:	4638      	mov	r0, r7
 80047f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	6922      	ldr	r2, [r4, #16]
 80047f8:	1a98      	subs	r0, r3, r2
 80047fa:	6963      	ldr	r3, [r4, #20]
 80047fc:	b2f6      	uxtb	r6, r6
 80047fe:	4283      	cmp	r3, r0
 8004800:	4637      	mov	r7, r6
 8004802:	dc05      	bgt.n	8004810 <__swbuf_r+0x4e>
 8004804:	4621      	mov	r1, r4
 8004806:	4628      	mov	r0, r5
 8004808:	f001 f9c0 	bl	8005b8c <_fflush_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	d1ed      	bne.n	80047ec <__swbuf_r+0x2a>
 8004810:	68a3      	ldr	r3, [r4, #8]
 8004812:	3b01      	subs	r3, #1
 8004814:	60a3      	str	r3, [r4, #8]
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	6022      	str	r2, [r4, #0]
 800481c:	701e      	strb	r6, [r3, #0]
 800481e:	6962      	ldr	r2, [r4, #20]
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	429a      	cmp	r2, r3
 8004824:	d004      	beq.n	8004830 <__swbuf_r+0x6e>
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	07db      	lsls	r3, r3, #31
 800482a:	d5e1      	bpl.n	80047f0 <__swbuf_r+0x2e>
 800482c:	2e0a      	cmp	r6, #10
 800482e:	d1df      	bne.n	80047f0 <__swbuf_r+0x2e>
 8004830:	4621      	mov	r1, r4
 8004832:	4628      	mov	r0, r5
 8004834:	f001 f9aa 	bl	8005b8c <_fflush_r>
 8004838:	2800      	cmp	r0, #0
 800483a:	d0d9      	beq.n	80047f0 <__swbuf_r+0x2e>
 800483c:	e7d6      	b.n	80047ec <__swbuf_r+0x2a>
	...

08004840 <__swsetup_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	4b29      	ldr	r3, [pc, #164]	@ (80048e8 <__swsetup_r+0xa8>)
 8004844:	4605      	mov	r5, r0
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	460c      	mov	r4, r1
 800484a:	b118      	cbz	r0, 8004854 <__swsetup_r+0x14>
 800484c:	6a03      	ldr	r3, [r0, #32]
 800484e:	b90b      	cbnz	r3, 8004854 <__swsetup_r+0x14>
 8004850:	f7ff fe6e 	bl	8004530 <__sinit>
 8004854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004858:	0719      	lsls	r1, r3, #28
 800485a:	d422      	bmi.n	80048a2 <__swsetup_r+0x62>
 800485c:	06da      	lsls	r2, r3, #27
 800485e:	d407      	bmi.n	8004870 <__swsetup_r+0x30>
 8004860:	2209      	movs	r2, #9
 8004862:	602a      	str	r2, [r5, #0]
 8004864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004868:	81a3      	strh	r3, [r4, #12]
 800486a:	f04f 30ff 	mov.w	r0, #4294967295
 800486e:	e033      	b.n	80048d8 <__swsetup_r+0x98>
 8004870:	0758      	lsls	r0, r3, #29
 8004872:	d512      	bpl.n	800489a <__swsetup_r+0x5a>
 8004874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004876:	b141      	cbz	r1, 800488a <__swsetup_r+0x4a>
 8004878:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800487c:	4299      	cmp	r1, r3
 800487e:	d002      	beq.n	8004886 <__swsetup_r+0x46>
 8004880:	4628      	mov	r0, r5
 8004882:	f000 f8c5 	bl	8004a10 <_free_r>
 8004886:	2300      	movs	r3, #0
 8004888:	6363      	str	r3, [r4, #52]	@ 0x34
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	2300      	movs	r3, #0
 8004894:	6063      	str	r3, [r4, #4]
 8004896:	6923      	ldr	r3, [r4, #16]
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	89a3      	ldrh	r3, [r4, #12]
 800489c:	f043 0308 	orr.w	r3, r3, #8
 80048a0:	81a3      	strh	r3, [r4, #12]
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	b94b      	cbnz	r3, 80048ba <__swsetup_r+0x7a>
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80048ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b0:	d003      	beq.n	80048ba <__swsetup_r+0x7a>
 80048b2:	4621      	mov	r1, r4
 80048b4:	4628      	mov	r0, r5
 80048b6:	f001 f9b7 	bl	8005c28 <__smakebuf_r>
 80048ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048be:	f013 0201 	ands.w	r2, r3, #1
 80048c2:	d00a      	beq.n	80048da <__swsetup_r+0x9a>
 80048c4:	2200      	movs	r2, #0
 80048c6:	60a2      	str	r2, [r4, #8]
 80048c8:	6962      	ldr	r2, [r4, #20]
 80048ca:	4252      	negs	r2, r2
 80048cc:	61a2      	str	r2, [r4, #24]
 80048ce:	6922      	ldr	r2, [r4, #16]
 80048d0:	b942      	cbnz	r2, 80048e4 <__swsetup_r+0xa4>
 80048d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048d6:	d1c5      	bne.n	8004864 <__swsetup_r+0x24>
 80048d8:	bd38      	pop	{r3, r4, r5, pc}
 80048da:	0799      	lsls	r1, r3, #30
 80048dc:	bf58      	it	pl
 80048de:	6962      	ldrpl	r2, [r4, #20]
 80048e0:	60a2      	str	r2, [r4, #8]
 80048e2:	e7f4      	b.n	80048ce <__swsetup_r+0x8e>
 80048e4:	2000      	movs	r0, #0
 80048e6:	e7f7      	b.n	80048d8 <__swsetup_r+0x98>
 80048e8:	20000018 	.word	0x20000018

080048ec <memset>:
 80048ec:	4402      	add	r2, r0
 80048ee:	4603      	mov	r3, r0
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d100      	bne.n	80048f6 <memset+0xa>
 80048f4:	4770      	bx	lr
 80048f6:	f803 1b01 	strb.w	r1, [r3], #1
 80048fa:	e7f9      	b.n	80048f0 <memset+0x4>

080048fc <strstr>:
 80048fc:	780a      	ldrb	r2, [r1, #0]
 80048fe:	b570      	push	{r4, r5, r6, lr}
 8004900:	b96a      	cbnz	r2, 800491e <strstr+0x22>
 8004902:	bd70      	pop	{r4, r5, r6, pc}
 8004904:	429a      	cmp	r2, r3
 8004906:	d109      	bne.n	800491c <strstr+0x20>
 8004908:	460c      	mov	r4, r1
 800490a:	4605      	mov	r5, r0
 800490c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f6      	beq.n	8004902 <strstr+0x6>
 8004914:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004918:	429e      	cmp	r6, r3
 800491a:	d0f7      	beq.n	800490c <strstr+0x10>
 800491c:	3001      	adds	r0, #1
 800491e:	7803      	ldrb	r3, [r0, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1ef      	bne.n	8004904 <strstr+0x8>
 8004924:	4618      	mov	r0, r3
 8004926:	e7ec      	b.n	8004902 <strstr+0x6>

08004928 <_close_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d06      	ldr	r5, [pc, #24]	@ (8004944 <_close_r+0x1c>)
 800492c:	2300      	movs	r3, #0
 800492e:	4604      	mov	r4, r0
 8004930:	4608      	mov	r0, r1
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	f7fc fb7b 	bl	800102e <_close>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_close_r+0x1a>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	b103      	cbz	r3, 8004942 <_close_r+0x1a>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	2000027c 	.word	0x2000027c

08004948 <_lseek_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4d07      	ldr	r5, [pc, #28]	@ (8004968 <_lseek_r+0x20>)
 800494c:	4604      	mov	r4, r0
 800494e:	4608      	mov	r0, r1
 8004950:	4611      	mov	r1, r2
 8004952:	2200      	movs	r2, #0
 8004954:	602a      	str	r2, [r5, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f7fc fb90 	bl	800107c <_lseek>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_lseek_r+0x1e>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_lseek_r+0x1e>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	2000027c 	.word	0x2000027c

0800496c <_read_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4d07      	ldr	r5, [pc, #28]	@ (800498c <_read_r+0x20>)
 8004970:	4604      	mov	r4, r0
 8004972:	4608      	mov	r0, r1
 8004974:	4611      	mov	r1, r2
 8004976:	2200      	movs	r2, #0
 8004978:	602a      	str	r2, [r5, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	f7fc fb1e 	bl	8000fbc <_read>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_read_r+0x1e>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_read_r+0x1e>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	2000027c 	.word	0x2000027c

08004990 <_write_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d07      	ldr	r5, [pc, #28]	@ (80049b0 <_write_r+0x20>)
 8004994:	4604      	mov	r4, r0
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	2200      	movs	r2, #0
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f7fc fb29 	bl	8000ff6 <_write>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_write_r+0x1e>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_write_r+0x1e>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	2000027c 	.word	0x2000027c

080049b4 <__errno>:
 80049b4:	4b01      	ldr	r3, [pc, #4]	@ (80049bc <__errno+0x8>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000018 	.word	0x20000018

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4d0d      	ldr	r5, [pc, #52]	@ (80049f8 <__libc_init_array+0x38>)
 80049c4:	4c0d      	ldr	r4, [pc, #52]	@ (80049fc <__libc_init_array+0x3c>)
 80049c6:	1b64      	subs	r4, r4, r5
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	2600      	movs	r6, #0
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	4d0b      	ldr	r5, [pc, #44]	@ (8004a00 <__libc_init_array+0x40>)
 80049d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004a04 <__libc_init_array+0x44>)
 80049d4:	f001 fb54 	bl	8006080 <_init>
 80049d8:	1b64      	subs	r4, r4, r5
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	2600      	movs	r6, #0
 80049de:	42a6      	cmp	r6, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e8:	4798      	blx	r3
 80049ea:	3601      	adds	r6, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f2:	4798      	blx	r3
 80049f4:	3601      	adds	r6, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	080067e4 	.word	0x080067e4
 80049fc:	080067e4 	.word	0x080067e4
 8004a00:	080067e4 	.word	0x080067e4
 8004a04:	080067e8 	.word	0x080067e8

08004a08 <__retarget_lock_init_recursive>:
 8004a08:	4770      	bx	lr

08004a0a <__retarget_lock_acquire_recursive>:
 8004a0a:	4770      	bx	lr

08004a0c <__retarget_lock_release_recursive>:
 8004a0c:	4770      	bx	lr
	...

08004a10 <_free_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4605      	mov	r5, r0
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d041      	beq.n	8004a9c <_free_r+0x8c>
 8004a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a1c:	1f0c      	subs	r4, r1, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bfb8      	it	lt
 8004a22:	18e4      	addlt	r4, r4, r3
 8004a24:	f000 f8e0 	bl	8004be8 <__malloc_lock>
 8004a28:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa0 <_free_r+0x90>)
 8004a2a:	6813      	ldr	r3, [r2, #0]
 8004a2c:	b933      	cbnz	r3, 8004a3c <_free_r+0x2c>
 8004a2e:	6063      	str	r3, [r4, #4]
 8004a30:	6014      	str	r4, [r2, #0]
 8004a32:	4628      	mov	r0, r5
 8004a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a38:	f000 b8dc 	b.w	8004bf4 <__malloc_unlock>
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	d908      	bls.n	8004a52 <_free_r+0x42>
 8004a40:	6820      	ldr	r0, [r4, #0]
 8004a42:	1821      	adds	r1, r4, r0
 8004a44:	428b      	cmp	r3, r1
 8004a46:	bf01      	itttt	eq
 8004a48:	6819      	ldreq	r1, [r3, #0]
 8004a4a:	685b      	ldreq	r3, [r3, #4]
 8004a4c:	1809      	addeq	r1, r1, r0
 8004a4e:	6021      	streq	r1, [r4, #0]
 8004a50:	e7ed      	b.n	8004a2e <_free_r+0x1e>
 8004a52:	461a      	mov	r2, r3
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b10b      	cbz	r3, 8004a5c <_free_r+0x4c>
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	d9fa      	bls.n	8004a52 <_free_r+0x42>
 8004a5c:	6811      	ldr	r1, [r2, #0]
 8004a5e:	1850      	adds	r0, r2, r1
 8004a60:	42a0      	cmp	r0, r4
 8004a62:	d10b      	bne.n	8004a7c <_free_r+0x6c>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	4401      	add	r1, r0
 8004a68:	1850      	adds	r0, r2, r1
 8004a6a:	4283      	cmp	r3, r0
 8004a6c:	6011      	str	r1, [r2, #0]
 8004a6e:	d1e0      	bne.n	8004a32 <_free_r+0x22>
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	6053      	str	r3, [r2, #4]
 8004a76:	4408      	add	r0, r1
 8004a78:	6010      	str	r0, [r2, #0]
 8004a7a:	e7da      	b.n	8004a32 <_free_r+0x22>
 8004a7c:	d902      	bls.n	8004a84 <_free_r+0x74>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	e7d6      	b.n	8004a32 <_free_r+0x22>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	1821      	adds	r1, r4, r0
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	bf04      	itt	eq
 8004a8c:	6819      	ldreq	r1, [r3, #0]
 8004a8e:	685b      	ldreq	r3, [r3, #4]
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	bf04      	itt	eq
 8004a94:	1809      	addeq	r1, r1, r0
 8004a96:	6021      	streq	r1, [r4, #0]
 8004a98:	6054      	str	r4, [r2, #4]
 8004a9a:	e7ca      	b.n	8004a32 <_free_r+0x22>
 8004a9c:	bd38      	pop	{r3, r4, r5, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000288 	.word	0x20000288

08004aa4 <sbrk_aligned>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	4e0f      	ldr	r6, [pc, #60]	@ (8004ae4 <sbrk_aligned+0x40>)
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	6831      	ldr	r1, [r6, #0]
 8004aac:	4605      	mov	r5, r0
 8004aae:	b911      	cbnz	r1, 8004ab6 <sbrk_aligned+0x12>
 8004ab0:	f001 f9a6 	bl	8005e00 <_sbrk_r>
 8004ab4:	6030      	str	r0, [r6, #0]
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f001 f9a1 	bl	8005e00 <_sbrk_r>
 8004abe:	1c43      	adds	r3, r0, #1
 8004ac0:	d103      	bne.n	8004aca <sbrk_aligned+0x26>
 8004ac2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	bd70      	pop	{r4, r5, r6, pc}
 8004aca:	1cc4      	adds	r4, r0, #3
 8004acc:	f024 0403 	bic.w	r4, r4, #3
 8004ad0:	42a0      	cmp	r0, r4
 8004ad2:	d0f8      	beq.n	8004ac6 <sbrk_aligned+0x22>
 8004ad4:	1a21      	subs	r1, r4, r0
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f001 f992 	bl	8005e00 <_sbrk_r>
 8004adc:	3001      	adds	r0, #1
 8004ade:	d1f2      	bne.n	8004ac6 <sbrk_aligned+0x22>
 8004ae0:	e7ef      	b.n	8004ac2 <sbrk_aligned+0x1e>
 8004ae2:	bf00      	nop
 8004ae4:	20000284 	.word	0x20000284

08004ae8 <_malloc_r>:
 8004ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aec:	1ccd      	adds	r5, r1, #3
 8004aee:	f025 0503 	bic.w	r5, r5, #3
 8004af2:	3508      	adds	r5, #8
 8004af4:	2d0c      	cmp	r5, #12
 8004af6:	bf38      	it	cc
 8004af8:	250c      	movcc	r5, #12
 8004afa:	2d00      	cmp	r5, #0
 8004afc:	4606      	mov	r6, r0
 8004afe:	db01      	blt.n	8004b04 <_malloc_r+0x1c>
 8004b00:	42a9      	cmp	r1, r5
 8004b02:	d904      	bls.n	8004b0e <_malloc_r+0x26>
 8004b04:	230c      	movs	r3, #12
 8004b06:	6033      	str	r3, [r6, #0]
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004be4 <_malloc_r+0xfc>
 8004b12:	f000 f869 	bl	8004be8 <__malloc_lock>
 8004b16:	f8d8 3000 	ldr.w	r3, [r8]
 8004b1a:	461c      	mov	r4, r3
 8004b1c:	bb44      	cbnz	r4, 8004b70 <_malloc_r+0x88>
 8004b1e:	4629      	mov	r1, r5
 8004b20:	4630      	mov	r0, r6
 8004b22:	f7ff ffbf 	bl	8004aa4 <sbrk_aligned>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	4604      	mov	r4, r0
 8004b2a:	d158      	bne.n	8004bde <_malloc_r+0xf6>
 8004b2c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b30:	4627      	mov	r7, r4
 8004b32:	2f00      	cmp	r7, #0
 8004b34:	d143      	bne.n	8004bbe <_malloc_r+0xd6>
 8004b36:	2c00      	cmp	r4, #0
 8004b38:	d04b      	beq.n	8004bd2 <_malloc_r+0xea>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	4630      	mov	r0, r6
 8004b40:	eb04 0903 	add.w	r9, r4, r3
 8004b44:	f001 f95c 	bl	8005e00 <_sbrk_r>
 8004b48:	4581      	cmp	r9, r0
 8004b4a:	d142      	bne.n	8004bd2 <_malloc_r+0xea>
 8004b4c:	6821      	ldr	r1, [r4, #0]
 8004b4e:	1a6d      	subs	r5, r5, r1
 8004b50:	4629      	mov	r1, r5
 8004b52:	4630      	mov	r0, r6
 8004b54:	f7ff ffa6 	bl	8004aa4 <sbrk_aligned>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d03a      	beq.n	8004bd2 <_malloc_r+0xea>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	442b      	add	r3, r5
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	f8d8 3000 	ldr.w	r3, [r8]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	bb62      	cbnz	r2, 8004bc4 <_malloc_r+0xdc>
 8004b6a:	f8c8 7000 	str.w	r7, [r8]
 8004b6e:	e00f      	b.n	8004b90 <_malloc_r+0xa8>
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	1b52      	subs	r2, r2, r5
 8004b74:	d420      	bmi.n	8004bb8 <_malloc_r+0xd0>
 8004b76:	2a0b      	cmp	r2, #11
 8004b78:	d917      	bls.n	8004baa <_malloc_r+0xc2>
 8004b7a:	1961      	adds	r1, r4, r5
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	6025      	str	r5, [r4, #0]
 8004b80:	bf18      	it	ne
 8004b82:	6059      	strne	r1, [r3, #4]
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	bf08      	it	eq
 8004b88:	f8c8 1000 	streq.w	r1, [r8]
 8004b8c:	5162      	str	r2, [r4, r5]
 8004b8e:	604b      	str	r3, [r1, #4]
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 f82f 	bl	8004bf4 <__malloc_unlock>
 8004b96:	f104 000b 	add.w	r0, r4, #11
 8004b9a:	1d23      	adds	r3, r4, #4
 8004b9c:	f020 0007 	bic.w	r0, r0, #7
 8004ba0:	1ac2      	subs	r2, r0, r3
 8004ba2:	bf1c      	itt	ne
 8004ba4:	1a1b      	subne	r3, r3, r0
 8004ba6:	50a3      	strne	r3, [r4, r2]
 8004ba8:	e7af      	b.n	8004b0a <_malloc_r+0x22>
 8004baa:	6862      	ldr	r2, [r4, #4]
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	bf0c      	ite	eq
 8004bb0:	f8c8 2000 	streq.w	r2, [r8]
 8004bb4:	605a      	strne	r2, [r3, #4]
 8004bb6:	e7eb      	b.n	8004b90 <_malloc_r+0xa8>
 8004bb8:	4623      	mov	r3, r4
 8004bba:	6864      	ldr	r4, [r4, #4]
 8004bbc:	e7ae      	b.n	8004b1c <_malloc_r+0x34>
 8004bbe:	463c      	mov	r4, r7
 8004bc0:	687f      	ldr	r7, [r7, #4]
 8004bc2:	e7b6      	b.n	8004b32 <_malloc_r+0x4a>
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	42a3      	cmp	r3, r4
 8004bca:	d1fb      	bne.n	8004bc4 <_malloc_r+0xdc>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6053      	str	r3, [r2, #4]
 8004bd0:	e7de      	b.n	8004b90 <_malloc_r+0xa8>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	6033      	str	r3, [r6, #0]
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	f000 f80c 	bl	8004bf4 <__malloc_unlock>
 8004bdc:	e794      	b.n	8004b08 <_malloc_r+0x20>
 8004bde:	6005      	str	r5, [r0, #0]
 8004be0:	e7d6      	b.n	8004b90 <_malloc_r+0xa8>
 8004be2:	bf00      	nop
 8004be4:	20000288 	.word	0x20000288

08004be8 <__malloc_lock>:
 8004be8:	4801      	ldr	r0, [pc, #4]	@ (8004bf0 <__malloc_lock+0x8>)
 8004bea:	f7ff bf0e 	b.w	8004a0a <__retarget_lock_acquire_recursive>
 8004bee:	bf00      	nop
 8004bf0:	20000280 	.word	0x20000280

08004bf4 <__malloc_unlock>:
 8004bf4:	4801      	ldr	r0, [pc, #4]	@ (8004bfc <__malloc_unlock+0x8>)
 8004bf6:	f7ff bf09 	b.w	8004a0c <__retarget_lock_release_recursive>
 8004bfa:	bf00      	nop
 8004bfc:	20000280 	.word	0x20000280

08004c00 <__ssputs_r>:
 8004c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c04:	688e      	ldr	r6, [r1, #8]
 8004c06:	461f      	mov	r7, r3
 8004c08:	42be      	cmp	r6, r7
 8004c0a:	680b      	ldr	r3, [r1, #0]
 8004c0c:	4682      	mov	sl, r0
 8004c0e:	460c      	mov	r4, r1
 8004c10:	4690      	mov	r8, r2
 8004c12:	d82d      	bhi.n	8004c70 <__ssputs_r+0x70>
 8004c14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c1c:	d026      	beq.n	8004c6c <__ssputs_r+0x6c>
 8004c1e:	6965      	ldr	r5, [r4, #20]
 8004c20:	6909      	ldr	r1, [r1, #16]
 8004c22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c26:	eba3 0901 	sub.w	r9, r3, r1
 8004c2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c2e:	1c7b      	adds	r3, r7, #1
 8004c30:	444b      	add	r3, r9
 8004c32:	106d      	asrs	r5, r5, #1
 8004c34:	429d      	cmp	r5, r3
 8004c36:	bf38      	it	cc
 8004c38:	461d      	movcc	r5, r3
 8004c3a:	0553      	lsls	r3, r2, #21
 8004c3c:	d527      	bpl.n	8004c8e <__ssputs_r+0x8e>
 8004c3e:	4629      	mov	r1, r5
 8004c40:	f7ff ff52 	bl	8004ae8 <_malloc_r>
 8004c44:	4606      	mov	r6, r0
 8004c46:	b360      	cbz	r0, 8004ca2 <__ssputs_r+0xa2>
 8004c48:	6921      	ldr	r1, [r4, #16]
 8004c4a:	464a      	mov	r2, r9
 8004c4c:	f001 f8e8 	bl	8005e20 <memcpy>
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c5a:	81a3      	strh	r3, [r4, #12]
 8004c5c:	6126      	str	r6, [r4, #16]
 8004c5e:	6165      	str	r5, [r4, #20]
 8004c60:	444e      	add	r6, r9
 8004c62:	eba5 0509 	sub.w	r5, r5, r9
 8004c66:	6026      	str	r6, [r4, #0]
 8004c68:	60a5      	str	r5, [r4, #8]
 8004c6a:	463e      	mov	r6, r7
 8004c6c:	42be      	cmp	r6, r7
 8004c6e:	d900      	bls.n	8004c72 <__ssputs_r+0x72>
 8004c70:	463e      	mov	r6, r7
 8004c72:	6820      	ldr	r0, [r4, #0]
 8004c74:	4632      	mov	r2, r6
 8004c76:	4641      	mov	r1, r8
 8004c78:	f001 f885 	bl	8005d86 <memmove>
 8004c7c:	68a3      	ldr	r3, [r4, #8]
 8004c7e:	1b9b      	subs	r3, r3, r6
 8004c80:	60a3      	str	r3, [r4, #8]
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	4433      	add	r3, r6
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	2000      	movs	r0, #0
 8004c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8e:	462a      	mov	r2, r5
 8004c90:	f001 f8d4 	bl	8005e3c <_realloc_r>
 8004c94:	4606      	mov	r6, r0
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d1e0      	bne.n	8004c5c <__ssputs_r+0x5c>
 8004c9a:	6921      	ldr	r1, [r4, #16]
 8004c9c:	4650      	mov	r0, sl
 8004c9e:	f7ff feb7 	bl	8004a10 <_free_r>
 8004ca2:	230c      	movs	r3, #12
 8004ca4:	f8ca 3000 	str.w	r3, [sl]
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	e7e9      	b.n	8004c8a <__ssputs_r+0x8a>
	...

08004cb8 <_svfiprintf_r>:
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	4698      	mov	r8, r3
 8004cbe:	898b      	ldrh	r3, [r1, #12]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	b09d      	sub	sp, #116	@ 0x74
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	460d      	mov	r5, r1
 8004cc8:	4614      	mov	r4, r2
 8004cca:	d510      	bpl.n	8004cee <_svfiprintf_r+0x36>
 8004ccc:	690b      	ldr	r3, [r1, #16]
 8004cce:	b973      	cbnz	r3, 8004cee <_svfiprintf_r+0x36>
 8004cd0:	2140      	movs	r1, #64	@ 0x40
 8004cd2:	f7ff ff09 	bl	8004ae8 <_malloc_r>
 8004cd6:	6028      	str	r0, [r5, #0]
 8004cd8:	6128      	str	r0, [r5, #16]
 8004cda:	b930      	cbnz	r0, 8004cea <_svfiprintf_r+0x32>
 8004cdc:	230c      	movs	r3, #12
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	b01d      	add	sp, #116	@ 0x74
 8004ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cea:	2340      	movs	r3, #64	@ 0x40
 8004cec:	616b      	str	r3, [r5, #20]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cfc:	2330      	movs	r3, #48	@ 0x30
 8004cfe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e9c <_svfiprintf_r+0x1e4>
 8004d02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d06:	f04f 0901 	mov.w	r9, #1
 8004d0a:	4623      	mov	r3, r4
 8004d0c:	469a      	mov	sl, r3
 8004d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d12:	b10a      	cbz	r2, 8004d18 <_svfiprintf_r+0x60>
 8004d14:	2a25      	cmp	r2, #37	@ 0x25
 8004d16:	d1f9      	bne.n	8004d0c <_svfiprintf_r+0x54>
 8004d18:	ebba 0b04 	subs.w	fp, sl, r4
 8004d1c:	d00b      	beq.n	8004d36 <_svfiprintf_r+0x7e>
 8004d1e:	465b      	mov	r3, fp
 8004d20:	4622      	mov	r2, r4
 8004d22:	4629      	mov	r1, r5
 8004d24:	4638      	mov	r0, r7
 8004d26:	f7ff ff6b 	bl	8004c00 <__ssputs_r>
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	f000 80a7 	beq.w	8004e7e <_svfiprintf_r+0x1c6>
 8004d30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d32:	445a      	add	r2, fp
 8004d34:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d36:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 809f 	beq.w	8004e7e <_svfiprintf_r+0x1c6>
 8004d40:	2300      	movs	r3, #0
 8004d42:	f04f 32ff 	mov.w	r2, #4294967295
 8004d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d4a:	f10a 0a01 	add.w	sl, sl, #1
 8004d4e:	9304      	str	r3, [sp, #16]
 8004d50:	9307      	str	r3, [sp, #28]
 8004d52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d56:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d58:	4654      	mov	r4, sl
 8004d5a:	2205      	movs	r2, #5
 8004d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d60:	484e      	ldr	r0, [pc, #312]	@ (8004e9c <_svfiprintf_r+0x1e4>)
 8004d62:	f7fb fa3d 	bl	80001e0 <memchr>
 8004d66:	9a04      	ldr	r2, [sp, #16]
 8004d68:	b9d8      	cbnz	r0, 8004da2 <_svfiprintf_r+0xea>
 8004d6a:	06d0      	lsls	r0, r2, #27
 8004d6c:	bf44      	itt	mi
 8004d6e:	2320      	movmi	r3, #32
 8004d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d74:	0711      	lsls	r1, r2, #28
 8004d76:	bf44      	itt	mi
 8004d78:	232b      	movmi	r3, #43	@ 0x2b
 8004d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d82:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d84:	d015      	beq.n	8004db2 <_svfiprintf_r+0xfa>
 8004d86:	9a07      	ldr	r2, [sp, #28]
 8004d88:	4654      	mov	r4, sl
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f04f 0c0a 	mov.w	ip, #10
 8004d90:	4621      	mov	r1, r4
 8004d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d96:	3b30      	subs	r3, #48	@ 0x30
 8004d98:	2b09      	cmp	r3, #9
 8004d9a:	d94b      	bls.n	8004e34 <_svfiprintf_r+0x17c>
 8004d9c:	b1b0      	cbz	r0, 8004dcc <_svfiprintf_r+0x114>
 8004d9e:	9207      	str	r2, [sp, #28]
 8004da0:	e014      	b.n	8004dcc <_svfiprintf_r+0x114>
 8004da2:	eba0 0308 	sub.w	r3, r0, r8
 8004da6:	fa09 f303 	lsl.w	r3, r9, r3
 8004daa:	4313      	orrs	r3, r2
 8004dac:	9304      	str	r3, [sp, #16]
 8004dae:	46a2      	mov	sl, r4
 8004db0:	e7d2      	b.n	8004d58 <_svfiprintf_r+0xa0>
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	1d19      	adds	r1, r3, #4
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	9103      	str	r1, [sp, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bfbb      	ittet	lt
 8004dbe:	425b      	neglt	r3, r3
 8004dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8004dc4:	9307      	strge	r3, [sp, #28]
 8004dc6:	9307      	strlt	r3, [sp, #28]
 8004dc8:	bfb8      	it	lt
 8004dca:	9204      	strlt	r2, [sp, #16]
 8004dcc:	7823      	ldrb	r3, [r4, #0]
 8004dce:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dd0:	d10a      	bne.n	8004de8 <_svfiprintf_r+0x130>
 8004dd2:	7863      	ldrb	r3, [r4, #1]
 8004dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dd6:	d132      	bne.n	8004e3e <_svfiprintf_r+0x186>
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	1d1a      	adds	r2, r3, #4
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	9203      	str	r2, [sp, #12]
 8004de0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004de4:	3402      	adds	r4, #2
 8004de6:	9305      	str	r3, [sp, #20]
 8004de8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004eac <_svfiprintf_r+0x1f4>
 8004dec:	7821      	ldrb	r1, [r4, #0]
 8004dee:	2203      	movs	r2, #3
 8004df0:	4650      	mov	r0, sl
 8004df2:	f7fb f9f5 	bl	80001e0 <memchr>
 8004df6:	b138      	cbz	r0, 8004e08 <_svfiprintf_r+0x150>
 8004df8:	9b04      	ldr	r3, [sp, #16]
 8004dfa:	eba0 000a 	sub.w	r0, r0, sl
 8004dfe:	2240      	movs	r2, #64	@ 0x40
 8004e00:	4082      	lsls	r2, r0
 8004e02:	4313      	orrs	r3, r2
 8004e04:	3401      	adds	r4, #1
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0c:	4824      	ldr	r0, [pc, #144]	@ (8004ea0 <_svfiprintf_r+0x1e8>)
 8004e0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e12:	2206      	movs	r2, #6
 8004e14:	f7fb f9e4 	bl	80001e0 <memchr>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d036      	beq.n	8004e8a <_svfiprintf_r+0x1d2>
 8004e1c:	4b21      	ldr	r3, [pc, #132]	@ (8004ea4 <_svfiprintf_r+0x1ec>)
 8004e1e:	bb1b      	cbnz	r3, 8004e68 <_svfiprintf_r+0x1b0>
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	3307      	adds	r3, #7
 8004e24:	f023 0307 	bic.w	r3, r3, #7
 8004e28:	3308      	adds	r3, #8
 8004e2a:	9303      	str	r3, [sp, #12]
 8004e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e2e:	4433      	add	r3, r6
 8004e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e32:	e76a      	b.n	8004d0a <_svfiprintf_r+0x52>
 8004e34:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e38:	460c      	mov	r4, r1
 8004e3a:	2001      	movs	r0, #1
 8004e3c:	e7a8      	b.n	8004d90 <_svfiprintf_r+0xd8>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	3401      	adds	r4, #1
 8004e42:	9305      	str	r3, [sp, #20]
 8004e44:	4619      	mov	r1, r3
 8004e46:	f04f 0c0a 	mov.w	ip, #10
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e50:	3a30      	subs	r2, #48	@ 0x30
 8004e52:	2a09      	cmp	r2, #9
 8004e54:	d903      	bls.n	8004e5e <_svfiprintf_r+0x1a6>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0c6      	beq.n	8004de8 <_svfiprintf_r+0x130>
 8004e5a:	9105      	str	r1, [sp, #20]
 8004e5c:	e7c4      	b.n	8004de8 <_svfiprintf_r+0x130>
 8004e5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e62:	4604      	mov	r4, r0
 8004e64:	2301      	movs	r3, #1
 8004e66:	e7f0      	b.n	8004e4a <_svfiprintf_r+0x192>
 8004e68:	ab03      	add	r3, sp, #12
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	462a      	mov	r2, r5
 8004e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea8 <_svfiprintf_r+0x1f0>)
 8004e70:	a904      	add	r1, sp, #16
 8004e72:	4638      	mov	r0, r7
 8004e74:	f3af 8000 	nop.w
 8004e78:	1c42      	adds	r2, r0, #1
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	d1d6      	bne.n	8004e2c <_svfiprintf_r+0x174>
 8004e7e:	89ab      	ldrh	r3, [r5, #12]
 8004e80:	065b      	lsls	r3, r3, #25
 8004e82:	f53f af2d 	bmi.w	8004ce0 <_svfiprintf_r+0x28>
 8004e86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e88:	e72c      	b.n	8004ce4 <_svfiprintf_r+0x2c>
 8004e8a:	ab03      	add	r3, sp, #12
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	462a      	mov	r2, r5
 8004e90:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <_svfiprintf_r+0x1f0>)
 8004e92:	a904      	add	r1, sp, #16
 8004e94:	4638      	mov	r0, r7
 8004e96:	f000 fb87 	bl	80055a8 <_printf_i>
 8004e9a:	e7ed      	b.n	8004e78 <_svfiprintf_r+0x1c0>
 8004e9c:	0800668c 	.word	0x0800668c
 8004ea0:	08006696 	.word	0x08006696
 8004ea4:	00000000 	.word	0x00000000
 8004ea8:	08004c01 	.word	0x08004c01
 8004eac:	08006692 	.word	0x08006692

08004eb0 <_sungetc_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	1c4b      	adds	r3, r1, #1
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	d103      	bne.n	8004ec0 <_sungetc_r+0x10>
 8004eb8:	f04f 35ff 	mov.w	r5, #4294967295
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	8993      	ldrh	r3, [r2, #12]
 8004ec2:	f023 0320 	bic.w	r3, r3, #32
 8004ec6:	8193      	strh	r3, [r2, #12]
 8004ec8:	6853      	ldr	r3, [r2, #4]
 8004eca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ecc:	b2cd      	uxtb	r5, r1
 8004ece:	b18a      	cbz	r2, 8004ef4 <_sungetc_r+0x44>
 8004ed0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	dd08      	ble.n	8004ee8 <_sungetc_r+0x38>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	6022      	str	r2, [r4, #0]
 8004edc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	6063      	str	r3, [r4, #4]
 8004ee6:	e7e9      	b.n	8004ebc <_sungetc_r+0xc>
 8004ee8:	4621      	mov	r1, r4
 8004eea:	f000 ff12 	bl	8005d12 <__submore>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d0f1      	beq.n	8004ed6 <_sungetc_r+0x26>
 8004ef2:	e7e1      	b.n	8004eb8 <_sungetc_r+0x8>
 8004ef4:	6921      	ldr	r1, [r4, #16]
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	b141      	cbz	r1, 8004f0c <_sungetc_r+0x5c>
 8004efa:	4291      	cmp	r1, r2
 8004efc:	d206      	bcs.n	8004f0c <_sungetc_r+0x5c>
 8004efe:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004f02:	42a9      	cmp	r1, r5
 8004f04:	d102      	bne.n	8004f0c <_sungetc_r+0x5c>
 8004f06:	3a01      	subs	r2, #1
 8004f08:	6022      	str	r2, [r4, #0]
 8004f0a:	e7ea      	b.n	8004ee2 <_sungetc_r+0x32>
 8004f0c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004f10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f14:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f16:	2303      	movs	r3, #3
 8004f18:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004f1a:	4623      	mov	r3, r4
 8004f1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	2301      	movs	r3, #1
 8004f24:	e7de      	b.n	8004ee4 <_sungetc_r+0x34>

08004f26 <__ssrefill_r>:
 8004f26:	b510      	push	{r4, lr}
 8004f28:	460c      	mov	r4, r1
 8004f2a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004f2c:	b169      	cbz	r1, 8004f4a <__ssrefill_r+0x24>
 8004f2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f32:	4299      	cmp	r1, r3
 8004f34:	d001      	beq.n	8004f3a <__ssrefill_r+0x14>
 8004f36:	f7ff fd6b 	bl	8004a10 <_free_r>
 8004f3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f3c:	6063      	str	r3, [r4, #4]
 8004f3e:	2000      	movs	r0, #0
 8004f40:	6360      	str	r0, [r4, #52]	@ 0x34
 8004f42:	b113      	cbz	r3, 8004f4a <__ssrefill_r+0x24>
 8004f44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	bd10      	pop	{r4, pc}
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6063      	str	r3, [r4, #4]
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	f043 0320 	orr.w	r3, r3, #32
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5e:	e7f3      	b.n	8004f48 <__ssrefill_r+0x22>

08004f60 <__ssvfiscanf_r>:
 8004f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	460c      	mov	r4, r1
 8004f66:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004f70:	49a5      	ldr	r1, [pc, #660]	@ (8005208 <__ssvfiscanf_r+0x2a8>)
 8004f72:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004f74:	f10d 0804 	add.w	r8, sp, #4
 8004f78:	49a4      	ldr	r1, [pc, #656]	@ (800520c <__ssvfiscanf_r+0x2ac>)
 8004f7a:	4fa5      	ldr	r7, [pc, #660]	@ (8005210 <__ssvfiscanf_r+0x2b0>)
 8004f7c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004f80:	4606      	mov	r6, r0
 8004f82:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	7813      	ldrb	r3, [r2, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8158 	beq.w	800523e <__ssvfiscanf_r+0x2de>
 8004f8e:	5cf9      	ldrb	r1, [r7, r3]
 8004f90:	f011 0108 	ands.w	r1, r1, #8
 8004f94:	f102 0501 	add.w	r5, r2, #1
 8004f98:	d019      	beq.n	8004fce <__ssvfiscanf_r+0x6e>
 8004f9a:	6863      	ldr	r3, [r4, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dd0f      	ble.n	8004fc0 <__ssvfiscanf_r+0x60>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	781a      	ldrb	r2, [r3, #0]
 8004fa4:	5cba      	ldrb	r2, [r7, r2]
 8004fa6:	0712      	lsls	r2, r2, #28
 8004fa8:	d401      	bmi.n	8004fae <__ssvfiscanf_r+0x4e>
 8004faa:	462a      	mov	r2, r5
 8004fac:	e7eb      	b.n	8004f86 <__ssvfiscanf_r+0x26>
 8004fae:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004fb0:	3201      	adds	r2, #1
 8004fb2:	9245      	str	r2, [sp, #276]	@ 0x114
 8004fb4:	6862      	ldr	r2, [r4, #4]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	3a01      	subs	r2, #1
 8004fba:	6062      	str	r2, [r4, #4]
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	e7ec      	b.n	8004f9a <__ssvfiscanf_r+0x3a>
 8004fc0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	4798      	blx	r3
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d0e9      	beq.n	8004fa0 <__ssvfiscanf_r+0x40>
 8004fcc:	e7ed      	b.n	8004faa <__ssvfiscanf_r+0x4a>
 8004fce:	2b25      	cmp	r3, #37	@ 0x25
 8004fd0:	d012      	beq.n	8004ff8 <__ssvfiscanf_r+0x98>
 8004fd2:	4699      	mov	r9, r3
 8004fd4:	6863      	ldr	r3, [r4, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f340 8093 	ble.w	8005102 <__ssvfiscanf_r+0x1a2>
 8004fdc:	6822      	ldr	r2, [r4, #0]
 8004fde:	7813      	ldrb	r3, [r2, #0]
 8004fe0:	454b      	cmp	r3, r9
 8004fe2:	f040 812c 	bne.w	800523e <__ssvfiscanf_r+0x2de>
 8004fe6:	6863      	ldr	r3, [r4, #4]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	6063      	str	r3, [r4, #4]
 8004fec:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004fee:	3201      	adds	r2, #1
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	6022      	str	r2, [r4, #0]
 8004ff4:	9345      	str	r3, [sp, #276]	@ 0x114
 8004ff6:	e7d8      	b.n	8004faa <__ssvfiscanf_r+0x4a>
 8004ff8:	9141      	str	r1, [sp, #260]	@ 0x104
 8004ffa:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004ffc:	7853      	ldrb	r3, [r2, #1]
 8004ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005000:	bf02      	ittt	eq
 8005002:	2310      	moveq	r3, #16
 8005004:	1c95      	addeq	r5, r2, #2
 8005006:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005008:	220a      	movs	r2, #10
 800500a:	46a9      	mov	r9, r5
 800500c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005010:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005014:	2b09      	cmp	r3, #9
 8005016:	d91e      	bls.n	8005056 <__ssvfiscanf_r+0xf6>
 8005018:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8005214 <__ssvfiscanf_r+0x2b4>
 800501c:	2203      	movs	r2, #3
 800501e:	4650      	mov	r0, sl
 8005020:	f7fb f8de 	bl	80001e0 <memchr>
 8005024:	b138      	cbz	r0, 8005036 <__ssvfiscanf_r+0xd6>
 8005026:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005028:	eba0 000a 	sub.w	r0, r0, sl
 800502c:	2301      	movs	r3, #1
 800502e:	4083      	lsls	r3, r0
 8005030:	4313      	orrs	r3, r2
 8005032:	9341      	str	r3, [sp, #260]	@ 0x104
 8005034:	464d      	mov	r5, r9
 8005036:	f815 3b01 	ldrb.w	r3, [r5], #1
 800503a:	2b78      	cmp	r3, #120	@ 0x78
 800503c:	d806      	bhi.n	800504c <__ssvfiscanf_r+0xec>
 800503e:	2b57      	cmp	r3, #87	@ 0x57
 8005040:	d810      	bhi.n	8005064 <__ssvfiscanf_r+0x104>
 8005042:	2b25      	cmp	r3, #37	@ 0x25
 8005044:	d0c5      	beq.n	8004fd2 <__ssvfiscanf_r+0x72>
 8005046:	d857      	bhi.n	80050f8 <__ssvfiscanf_r+0x198>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d065      	beq.n	8005118 <__ssvfiscanf_r+0x1b8>
 800504c:	2303      	movs	r3, #3
 800504e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005050:	230a      	movs	r3, #10
 8005052:	9342      	str	r3, [sp, #264]	@ 0x108
 8005054:	e078      	b.n	8005148 <__ssvfiscanf_r+0x1e8>
 8005056:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005058:	fb02 1103 	mla	r1, r2, r3, r1
 800505c:	3930      	subs	r1, #48	@ 0x30
 800505e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005060:	464d      	mov	r5, r9
 8005062:	e7d2      	b.n	800500a <__ssvfiscanf_r+0xaa>
 8005064:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005068:	2a20      	cmp	r2, #32
 800506a:	d8ef      	bhi.n	800504c <__ssvfiscanf_r+0xec>
 800506c:	a101      	add	r1, pc, #4	@ (adr r1, 8005074 <__ssvfiscanf_r+0x114>)
 800506e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005072:	bf00      	nop
 8005074:	08005127 	.word	0x08005127
 8005078:	0800504d 	.word	0x0800504d
 800507c:	0800504d 	.word	0x0800504d
 8005080:	08005181 	.word	0x08005181
 8005084:	0800504d 	.word	0x0800504d
 8005088:	0800504d 	.word	0x0800504d
 800508c:	0800504d 	.word	0x0800504d
 8005090:	0800504d 	.word	0x0800504d
 8005094:	0800504d 	.word	0x0800504d
 8005098:	0800504d 	.word	0x0800504d
 800509c:	0800504d 	.word	0x0800504d
 80050a0:	08005197 	.word	0x08005197
 80050a4:	0800517d 	.word	0x0800517d
 80050a8:	080050ff 	.word	0x080050ff
 80050ac:	080050ff 	.word	0x080050ff
 80050b0:	080050ff 	.word	0x080050ff
 80050b4:	0800504d 	.word	0x0800504d
 80050b8:	08005139 	.word	0x08005139
 80050bc:	0800504d 	.word	0x0800504d
 80050c0:	0800504d 	.word	0x0800504d
 80050c4:	0800504d 	.word	0x0800504d
 80050c8:	0800504d 	.word	0x0800504d
 80050cc:	080051a7 	.word	0x080051a7
 80050d0:	08005141 	.word	0x08005141
 80050d4:	0800511f 	.word	0x0800511f
 80050d8:	0800504d 	.word	0x0800504d
 80050dc:	0800504d 	.word	0x0800504d
 80050e0:	080051a3 	.word	0x080051a3
 80050e4:	0800504d 	.word	0x0800504d
 80050e8:	0800517d 	.word	0x0800517d
 80050ec:	0800504d 	.word	0x0800504d
 80050f0:	0800504d 	.word	0x0800504d
 80050f4:	08005127 	.word	0x08005127
 80050f8:	3b45      	subs	r3, #69	@ 0x45
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d8a6      	bhi.n	800504c <__ssvfiscanf_r+0xec>
 80050fe:	2305      	movs	r3, #5
 8005100:	e021      	b.n	8005146 <__ssvfiscanf_r+0x1e6>
 8005102:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005104:	4621      	mov	r1, r4
 8005106:	4630      	mov	r0, r6
 8005108:	4798      	blx	r3
 800510a:	2800      	cmp	r0, #0
 800510c:	f43f af66 	beq.w	8004fdc <__ssvfiscanf_r+0x7c>
 8005110:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005112:	2800      	cmp	r0, #0
 8005114:	f040 808b 	bne.w	800522e <__ssvfiscanf_r+0x2ce>
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	e08b      	b.n	8005236 <__ssvfiscanf_r+0x2d6>
 800511e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005120:	f042 0220 	orr.w	r2, r2, #32
 8005124:	9241      	str	r2, [sp, #260]	@ 0x104
 8005126:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800512c:	9241      	str	r2, [sp, #260]	@ 0x104
 800512e:	2210      	movs	r2, #16
 8005130:	2b6e      	cmp	r3, #110	@ 0x6e
 8005132:	9242      	str	r2, [sp, #264]	@ 0x108
 8005134:	d902      	bls.n	800513c <__ssvfiscanf_r+0x1dc>
 8005136:	e005      	b.n	8005144 <__ssvfiscanf_r+0x1e4>
 8005138:	2300      	movs	r3, #0
 800513a:	9342      	str	r3, [sp, #264]	@ 0x108
 800513c:	2303      	movs	r3, #3
 800513e:	e002      	b.n	8005146 <__ssvfiscanf_r+0x1e6>
 8005140:	2308      	movs	r3, #8
 8005142:	9342      	str	r3, [sp, #264]	@ 0x108
 8005144:	2304      	movs	r3, #4
 8005146:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005148:	6863      	ldr	r3, [r4, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	dd39      	ble.n	80051c2 <__ssvfiscanf_r+0x262>
 800514e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005150:	0659      	lsls	r1, r3, #25
 8005152:	d404      	bmi.n	800515e <__ssvfiscanf_r+0x1fe>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	781a      	ldrb	r2, [r3, #0]
 8005158:	5cba      	ldrb	r2, [r7, r2]
 800515a:	0712      	lsls	r2, r2, #28
 800515c:	d438      	bmi.n	80051d0 <__ssvfiscanf_r+0x270>
 800515e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005160:	2b02      	cmp	r3, #2
 8005162:	dc47      	bgt.n	80051f4 <__ssvfiscanf_r+0x294>
 8005164:	466b      	mov	r3, sp
 8005166:	4622      	mov	r2, r4
 8005168:	a941      	add	r1, sp, #260	@ 0x104
 800516a:	4630      	mov	r0, r6
 800516c:	f000 fb3c 	bl	80057e8 <_scanf_chars>
 8005170:	2801      	cmp	r0, #1
 8005172:	d064      	beq.n	800523e <__ssvfiscanf_r+0x2de>
 8005174:	2802      	cmp	r0, #2
 8005176:	f47f af18 	bne.w	8004faa <__ssvfiscanf_r+0x4a>
 800517a:	e7c9      	b.n	8005110 <__ssvfiscanf_r+0x1b0>
 800517c:	220a      	movs	r2, #10
 800517e:	e7d7      	b.n	8005130 <__ssvfiscanf_r+0x1d0>
 8005180:	4629      	mov	r1, r5
 8005182:	4640      	mov	r0, r8
 8005184:	f000 fd8c 	bl	8005ca0 <__sccl>
 8005188:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800518a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800518e:	9341      	str	r3, [sp, #260]	@ 0x104
 8005190:	4605      	mov	r5, r0
 8005192:	2301      	movs	r3, #1
 8005194:	e7d7      	b.n	8005146 <__ssvfiscanf_r+0x1e6>
 8005196:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800519c:	9341      	str	r3, [sp, #260]	@ 0x104
 800519e:	2300      	movs	r3, #0
 80051a0:	e7d1      	b.n	8005146 <__ssvfiscanf_r+0x1e6>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e7cf      	b.n	8005146 <__ssvfiscanf_r+0x1e6>
 80051a6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80051a8:	06c3      	lsls	r3, r0, #27
 80051aa:	f53f aefe 	bmi.w	8004faa <__ssvfiscanf_r+0x4a>
 80051ae:	9b00      	ldr	r3, [sp, #0]
 80051b0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80051b2:	1d19      	adds	r1, r3, #4
 80051b4:	9100      	str	r1, [sp, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	07c0      	lsls	r0, r0, #31
 80051ba:	bf4c      	ite	mi
 80051bc:	801a      	strhmi	r2, [r3, #0]
 80051be:	601a      	strpl	r2, [r3, #0]
 80051c0:	e6f3      	b.n	8004faa <__ssvfiscanf_r+0x4a>
 80051c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80051c4:	4621      	mov	r1, r4
 80051c6:	4630      	mov	r0, r6
 80051c8:	4798      	blx	r3
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d0bf      	beq.n	800514e <__ssvfiscanf_r+0x1ee>
 80051ce:	e79f      	b.n	8005110 <__ssvfiscanf_r+0x1b0>
 80051d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80051d2:	3201      	adds	r2, #1
 80051d4:	9245      	str	r2, [sp, #276]	@ 0x114
 80051d6:	6862      	ldr	r2, [r4, #4]
 80051d8:	3a01      	subs	r2, #1
 80051da:	2a00      	cmp	r2, #0
 80051dc:	6062      	str	r2, [r4, #4]
 80051de:	dd02      	ble.n	80051e6 <__ssvfiscanf_r+0x286>
 80051e0:	3301      	adds	r3, #1
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	e7b6      	b.n	8005154 <__ssvfiscanf_r+0x1f4>
 80051e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80051e8:	4621      	mov	r1, r4
 80051ea:	4630      	mov	r0, r6
 80051ec:	4798      	blx	r3
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d0b0      	beq.n	8005154 <__ssvfiscanf_r+0x1f4>
 80051f2:	e78d      	b.n	8005110 <__ssvfiscanf_r+0x1b0>
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	dc0f      	bgt.n	8005218 <__ssvfiscanf_r+0x2b8>
 80051f8:	466b      	mov	r3, sp
 80051fa:	4622      	mov	r2, r4
 80051fc:	a941      	add	r1, sp, #260	@ 0x104
 80051fe:	4630      	mov	r0, r6
 8005200:	f000 fb4c 	bl	800589c <_scanf_i>
 8005204:	e7b4      	b.n	8005170 <__ssvfiscanf_r+0x210>
 8005206:	bf00      	nop
 8005208:	08004eb1 	.word	0x08004eb1
 800520c:	08004f27 	.word	0x08004f27
 8005210:	080066db 	.word	0x080066db
 8005214:	08006692 	.word	0x08006692
 8005218:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <__ssvfiscanf_r+0x2e4>)
 800521a:	2b00      	cmp	r3, #0
 800521c:	f43f aec5 	beq.w	8004faa <__ssvfiscanf_r+0x4a>
 8005220:	466b      	mov	r3, sp
 8005222:	4622      	mov	r2, r4
 8005224:	a941      	add	r1, sp, #260	@ 0x104
 8005226:	4630      	mov	r0, r6
 8005228:	f3af 8000 	nop.w
 800522c:	e7a0      	b.n	8005170 <__ssvfiscanf_r+0x210>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	065b      	lsls	r3, r3, #25
 8005232:	f53f af71 	bmi.w	8005118 <__ssvfiscanf_r+0x1b8>
 8005236:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800523a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005240:	e7f9      	b.n	8005236 <__ssvfiscanf_r+0x2d6>
 8005242:	bf00      	nop
 8005244:	00000000 	.word	0x00000000

08005248 <__sfputc_r>:
 8005248:	6893      	ldr	r3, [r2, #8]
 800524a:	3b01      	subs	r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	b410      	push	{r4}
 8005250:	6093      	str	r3, [r2, #8]
 8005252:	da08      	bge.n	8005266 <__sfputc_r+0x1e>
 8005254:	6994      	ldr	r4, [r2, #24]
 8005256:	42a3      	cmp	r3, r4
 8005258:	db01      	blt.n	800525e <__sfputc_r+0x16>
 800525a:	290a      	cmp	r1, #10
 800525c:	d103      	bne.n	8005266 <__sfputc_r+0x1e>
 800525e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005262:	f7ff baae 	b.w	80047c2 <__swbuf_r>
 8005266:	6813      	ldr	r3, [r2, #0]
 8005268:	1c58      	adds	r0, r3, #1
 800526a:	6010      	str	r0, [r2, #0]
 800526c:	7019      	strb	r1, [r3, #0]
 800526e:	4608      	mov	r0, r1
 8005270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005274:	4770      	bx	lr

08005276 <__sfputs_r>:
 8005276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005278:	4606      	mov	r6, r0
 800527a:	460f      	mov	r7, r1
 800527c:	4614      	mov	r4, r2
 800527e:	18d5      	adds	r5, r2, r3
 8005280:	42ac      	cmp	r4, r5
 8005282:	d101      	bne.n	8005288 <__sfputs_r+0x12>
 8005284:	2000      	movs	r0, #0
 8005286:	e007      	b.n	8005298 <__sfputs_r+0x22>
 8005288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800528c:	463a      	mov	r2, r7
 800528e:	4630      	mov	r0, r6
 8005290:	f7ff ffda 	bl	8005248 <__sfputc_r>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d1f3      	bne.n	8005280 <__sfputs_r+0xa>
 8005298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800529c <_vfiprintf_r>:
 800529c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a0:	460d      	mov	r5, r1
 80052a2:	b09d      	sub	sp, #116	@ 0x74
 80052a4:	4614      	mov	r4, r2
 80052a6:	4698      	mov	r8, r3
 80052a8:	4606      	mov	r6, r0
 80052aa:	b118      	cbz	r0, 80052b4 <_vfiprintf_r+0x18>
 80052ac:	6a03      	ldr	r3, [r0, #32]
 80052ae:	b90b      	cbnz	r3, 80052b4 <_vfiprintf_r+0x18>
 80052b0:	f7ff f93e 	bl	8004530 <__sinit>
 80052b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052b6:	07d9      	lsls	r1, r3, #31
 80052b8:	d405      	bmi.n	80052c6 <_vfiprintf_r+0x2a>
 80052ba:	89ab      	ldrh	r3, [r5, #12]
 80052bc:	059a      	lsls	r2, r3, #22
 80052be:	d402      	bmi.n	80052c6 <_vfiprintf_r+0x2a>
 80052c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052c2:	f7ff fba2 	bl	8004a0a <__retarget_lock_acquire_recursive>
 80052c6:	89ab      	ldrh	r3, [r5, #12]
 80052c8:	071b      	lsls	r3, r3, #28
 80052ca:	d501      	bpl.n	80052d0 <_vfiprintf_r+0x34>
 80052cc:	692b      	ldr	r3, [r5, #16]
 80052ce:	b99b      	cbnz	r3, 80052f8 <_vfiprintf_r+0x5c>
 80052d0:	4629      	mov	r1, r5
 80052d2:	4630      	mov	r0, r6
 80052d4:	f7ff fab4 	bl	8004840 <__swsetup_r>
 80052d8:	b170      	cbz	r0, 80052f8 <_vfiprintf_r+0x5c>
 80052da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052dc:	07dc      	lsls	r4, r3, #31
 80052de:	d504      	bpl.n	80052ea <_vfiprintf_r+0x4e>
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295
 80052e4:	b01d      	add	sp, #116	@ 0x74
 80052e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ea:	89ab      	ldrh	r3, [r5, #12]
 80052ec:	0598      	lsls	r0, r3, #22
 80052ee:	d4f7      	bmi.n	80052e0 <_vfiprintf_r+0x44>
 80052f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052f2:	f7ff fb8b 	bl	8004a0c <__retarget_lock_release_recursive>
 80052f6:	e7f3      	b.n	80052e0 <_vfiprintf_r+0x44>
 80052f8:	2300      	movs	r3, #0
 80052fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80052fc:	2320      	movs	r3, #32
 80052fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005302:	f8cd 800c 	str.w	r8, [sp, #12]
 8005306:	2330      	movs	r3, #48	@ 0x30
 8005308:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80054b8 <_vfiprintf_r+0x21c>
 800530c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005310:	f04f 0901 	mov.w	r9, #1
 8005314:	4623      	mov	r3, r4
 8005316:	469a      	mov	sl, r3
 8005318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800531c:	b10a      	cbz	r2, 8005322 <_vfiprintf_r+0x86>
 800531e:	2a25      	cmp	r2, #37	@ 0x25
 8005320:	d1f9      	bne.n	8005316 <_vfiprintf_r+0x7a>
 8005322:	ebba 0b04 	subs.w	fp, sl, r4
 8005326:	d00b      	beq.n	8005340 <_vfiprintf_r+0xa4>
 8005328:	465b      	mov	r3, fp
 800532a:	4622      	mov	r2, r4
 800532c:	4629      	mov	r1, r5
 800532e:	4630      	mov	r0, r6
 8005330:	f7ff ffa1 	bl	8005276 <__sfputs_r>
 8005334:	3001      	adds	r0, #1
 8005336:	f000 80a7 	beq.w	8005488 <_vfiprintf_r+0x1ec>
 800533a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800533c:	445a      	add	r2, fp
 800533e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005340:	f89a 3000 	ldrb.w	r3, [sl]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 809f 	beq.w	8005488 <_vfiprintf_r+0x1ec>
 800534a:	2300      	movs	r3, #0
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005354:	f10a 0a01 	add.w	sl, sl, #1
 8005358:	9304      	str	r3, [sp, #16]
 800535a:	9307      	str	r3, [sp, #28]
 800535c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005360:	931a      	str	r3, [sp, #104]	@ 0x68
 8005362:	4654      	mov	r4, sl
 8005364:	2205      	movs	r2, #5
 8005366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800536a:	4853      	ldr	r0, [pc, #332]	@ (80054b8 <_vfiprintf_r+0x21c>)
 800536c:	f7fa ff38 	bl	80001e0 <memchr>
 8005370:	9a04      	ldr	r2, [sp, #16]
 8005372:	b9d8      	cbnz	r0, 80053ac <_vfiprintf_r+0x110>
 8005374:	06d1      	lsls	r1, r2, #27
 8005376:	bf44      	itt	mi
 8005378:	2320      	movmi	r3, #32
 800537a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800537e:	0713      	lsls	r3, r2, #28
 8005380:	bf44      	itt	mi
 8005382:	232b      	movmi	r3, #43	@ 0x2b
 8005384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005388:	f89a 3000 	ldrb.w	r3, [sl]
 800538c:	2b2a      	cmp	r3, #42	@ 0x2a
 800538e:	d015      	beq.n	80053bc <_vfiprintf_r+0x120>
 8005390:	9a07      	ldr	r2, [sp, #28]
 8005392:	4654      	mov	r4, sl
 8005394:	2000      	movs	r0, #0
 8005396:	f04f 0c0a 	mov.w	ip, #10
 800539a:	4621      	mov	r1, r4
 800539c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053a0:	3b30      	subs	r3, #48	@ 0x30
 80053a2:	2b09      	cmp	r3, #9
 80053a4:	d94b      	bls.n	800543e <_vfiprintf_r+0x1a2>
 80053a6:	b1b0      	cbz	r0, 80053d6 <_vfiprintf_r+0x13a>
 80053a8:	9207      	str	r2, [sp, #28]
 80053aa:	e014      	b.n	80053d6 <_vfiprintf_r+0x13a>
 80053ac:	eba0 0308 	sub.w	r3, r0, r8
 80053b0:	fa09 f303 	lsl.w	r3, r9, r3
 80053b4:	4313      	orrs	r3, r2
 80053b6:	9304      	str	r3, [sp, #16]
 80053b8:	46a2      	mov	sl, r4
 80053ba:	e7d2      	b.n	8005362 <_vfiprintf_r+0xc6>
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	1d19      	adds	r1, r3, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	9103      	str	r1, [sp, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bfbb      	ittet	lt
 80053c8:	425b      	neglt	r3, r3
 80053ca:	f042 0202 	orrlt.w	r2, r2, #2
 80053ce:	9307      	strge	r3, [sp, #28]
 80053d0:	9307      	strlt	r3, [sp, #28]
 80053d2:	bfb8      	it	lt
 80053d4:	9204      	strlt	r2, [sp, #16]
 80053d6:	7823      	ldrb	r3, [r4, #0]
 80053d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80053da:	d10a      	bne.n	80053f2 <_vfiprintf_r+0x156>
 80053dc:	7863      	ldrb	r3, [r4, #1]
 80053de:	2b2a      	cmp	r3, #42	@ 0x2a
 80053e0:	d132      	bne.n	8005448 <_vfiprintf_r+0x1ac>
 80053e2:	9b03      	ldr	r3, [sp, #12]
 80053e4:	1d1a      	adds	r2, r3, #4
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	9203      	str	r2, [sp, #12]
 80053ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053ee:	3402      	adds	r4, #2
 80053f0:	9305      	str	r3, [sp, #20]
 80053f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80054c8 <_vfiprintf_r+0x22c>
 80053f6:	7821      	ldrb	r1, [r4, #0]
 80053f8:	2203      	movs	r2, #3
 80053fa:	4650      	mov	r0, sl
 80053fc:	f7fa fef0 	bl	80001e0 <memchr>
 8005400:	b138      	cbz	r0, 8005412 <_vfiprintf_r+0x176>
 8005402:	9b04      	ldr	r3, [sp, #16]
 8005404:	eba0 000a 	sub.w	r0, r0, sl
 8005408:	2240      	movs	r2, #64	@ 0x40
 800540a:	4082      	lsls	r2, r0
 800540c:	4313      	orrs	r3, r2
 800540e:	3401      	adds	r4, #1
 8005410:	9304      	str	r3, [sp, #16]
 8005412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005416:	4829      	ldr	r0, [pc, #164]	@ (80054bc <_vfiprintf_r+0x220>)
 8005418:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800541c:	2206      	movs	r2, #6
 800541e:	f7fa fedf 	bl	80001e0 <memchr>
 8005422:	2800      	cmp	r0, #0
 8005424:	d03f      	beq.n	80054a6 <_vfiprintf_r+0x20a>
 8005426:	4b26      	ldr	r3, [pc, #152]	@ (80054c0 <_vfiprintf_r+0x224>)
 8005428:	bb1b      	cbnz	r3, 8005472 <_vfiprintf_r+0x1d6>
 800542a:	9b03      	ldr	r3, [sp, #12]
 800542c:	3307      	adds	r3, #7
 800542e:	f023 0307 	bic.w	r3, r3, #7
 8005432:	3308      	adds	r3, #8
 8005434:	9303      	str	r3, [sp, #12]
 8005436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005438:	443b      	add	r3, r7
 800543a:	9309      	str	r3, [sp, #36]	@ 0x24
 800543c:	e76a      	b.n	8005314 <_vfiprintf_r+0x78>
 800543e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005442:	460c      	mov	r4, r1
 8005444:	2001      	movs	r0, #1
 8005446:	e7a8      	b.n	800539a <_vfiprintf_r+0xfe>
 8005448:	2300      	movs	r3, #0
 800544a:	3401      	adds	r4, #1
 800544c:	9305      	str	r3, [sp, #20]
 800544e:	4619      	mov	r1, r3
 8005450:	f04f 0c0a 	mov.w	ip, #10
 8005454:	4620      	mov	r0, r4
 8005456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800545a:	3a30      	subs	r2, #48	@ 0x30
 800545c:	2a09      	cmp	r2, #9
 800545e:	d903      	bls.n	8005468 <_vfiprintf_r+0x1cc>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0c6      	beq.n	80053f2 <_vfiprintf_r+0x156>
 8005464:	9105      	str	r1, [sp, #20]
 8005466:	e7c4      	b.n	80053f2 <_vfiprintf_r+0x156>
 8005468:	fb0c 2101 	mla	r1, ip, r1, r2
 800546c:	4604      	mov	r4, r0
 800546e:	2301      	movs	r3, #1
 8005470:	e7f0      	b.n	8005454 <_vfiprintf_r+0x1b8>
 8005472:	ab03      	add	r3, sp, #12
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	462a      	mov	r2, r5
 8005478:	4b12      	ldr	r3, [pc, #72]	@ (80054c4 <_vfiprintf_r+0x228>)
 800547a:	a904      	add	r1, sp, #16
 800547c:	4630      	mov	r0, r6
 800547e:	f3af 8000 	nop.w
 8005482:	4607      	mov	r7, r0
 8005484:	1c78      	adds	r0, r7, #1
 8005486:	d1d6      	bne.n	8005436 <_vfiprintf_r+0x19a>
 8005488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800548a:	07d9      	lsls	r1, r3, #31
 800548c:	d405      	bmi.n	800549a <_vfiprintf_r+0x1fe>
 800548e:	89ab      	ldrh	r3, [r5, #12]
 8005490:	059a      	lsls	r2, r3, #22
 8005492:	d402      	bmi.n	800549a <_vfiprintf_r+0x1fe>
 8005494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005496:	f7ff fab9 	bl	8004a0c <__retarget_lock_release_recursive>
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	065b      	lsls	r3, r3, #25
 800549e:	f53f af1f 	bmi.w	80052e0 <_vfiprintf_r+0x44>
 80054a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054a4:	e71e      	b.n	80052e4 <_vfiprintf_r+0x48>
 80054a6:	ab03      	add	r3, sp, #12
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	462a      	mov	r2, r5
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <_vfiprintf_r+0x228>)
 80054ae:	a904      	add	r1, sp, #16
 80054b0:	4630      	mov	r0, r6
 80054b2:	f000 f879 	bl	80055a8 <_printf_i>
 80054b6:	e7e4      	b.n	8005482 <_vfiprintf_r+0x1e6>
 80054b8:	0800668c 	.word	0x0800668c
 80054bc:	08006696 	.word	0x08006696
 80054c0:	00000000 	.word	0x00000000
 80054c4:	08005277 	.word	0x08005277
 80054c8:	08006692 	.word	0x08006692

080054cc <_printf_common>:
 80054cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d0:	4616      	mov	r6, r2
 80054d2:	4698      	mov	r8, r3
 80054d4:	688a      	ldr	r2, [r1, #8]
 80054d6:	690b      	ldr	r3, [r1, #16]
 80054d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054dc:	4293      	cmp	r3, r2
 80054de:	bfb8      	it	lt
 80054e0:	4613      	movlt	r3, r2
 80054e2:	6033      	str	r3, [r6, #0]
 80054e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054e8:	4607      	mov	r7, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	b10a      	cbz	r2, 80054f2 <_printf_common+0x26>
 80054ee:	3301      	adds	r3, #1
 80054f0:	6033      	str	r3, [r6, #0]
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	0699      	lsls	r1, r3, #26
 80054f6:	bf42      	ittt	mi
 80054f8:	6833      	ldrmi	r3, [r6, #0]
 80054fa:	3302      	addmi	r3, #2
 80054fc:	6033      	strmi	r3, [r6, #0]
 80054fe:	6825      	ldr	r5, [r4, #0]
 8005500:	f015 0506 	ands.w	r5, r5, #6
 8005504:	d106      	bne.n	8005514 <_printf_common+0x48>
 8005506:	f104 0a19 	add.w	sl, r4, #25
 800550a:	68e3      	ldr	r3, [r4, #12]
 800550c:	6832      	ldr	r2, [r6, #0]
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	42ab      	cmp	r3, r5
 8005512:	dc26      	bgt.n	8005562 <_printf_common+0x96>
 8005514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	3b00      	subs	r3, #0
 800551c:	bf18      	it	ne
 800551e:	2301      	movne	r3, #1
 8005520:	0692      	lsls	r2, r2, #26
 8005522:	d42b      	bmi.n	800557c <_printf_common+0xb0>
 8005524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005528:	4641      	mov	r1, r8
 800552a:	4638      	mov	r0, r7
 800552c:	47c8      	blx	r9
 800552e:	3001      	adds	r0, #1
 8005530:	d01e      	beq.n	8005570 <_printf_common+0xa4>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	6922      	ldr	r2, [r4, #16]
 8005536:	f003 0306 	and.w	r3, r3, #6
 800553a:	2b04      	cmp	r3, #4
 800553c:	bf02      	ittt	eq
 800553e:	68e5      	ldreq	r5, [r4, #12]
 8005540:	6833      	ldreq	r3, [r6, #0]
 8005542:	1aed      	subeq	r5, r5, r3
 8005544:	68a3      	ldr	r3, [r4, #8]
 8005546:	bf0c      	ite	eq
 8005548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800554c:	2500      	movne	r5, #0
 800554e:	4293      	cmp	r3, r2
 8005550:	bfc4      	itt	gt
 8005552:	1a9b      	subgt	r3, r3, r2
 8005554:	18ed      	addgt	r5, r5, r3
 8005556:	2600      	movs	r6, #0
 8005558:	341a      	adds	r4, #26
 800555a:	42b5      	cmp	r5, r6
 800555c:	d11a      	bne.n	8005594 <_printf_common+0xc8>
 800555e:	2000      	movs	r0, #0
 8005560:	e008      	b.n	8005574 <_printf_common+0xa8>
 8005562:	2301      	movs	r3, #1
 8005564:	4652      	mov	r2, sl
 8005566:	4641      	mov	r1, r8
 8005568:	4638      	mov	r0, r7
 800556a:	47c8      	blx	r9
 800556c:	3001      	adds	r0, #1
 800556e:	d103      	bne.n	8005578 <_printf_common+0xac>
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005578:	3501      	adds	r5, #1
 800557a:	e7c6      	b.n	800550a <_printf_common+0x3e>
 800557c:	18e1      	adds	r1, r4, r3
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	2030      	movs	r0, #48	@ 0x30
 8005582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005586:	4422      	add	r2, r4
 8005588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800558c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005590:	3302      	adds	r3, #2
 8005592:	e7c7      	b.n	8005524 <_printf_common+0x58>
 8005594:	2301      	movs	r3, #1
 8005596:	4622      	mov	r2, r4
 8005598:	4641      	mov	r1, r8
 800559a:	4638      	mov	r0, r7
 800559c:	47c8      	blx	r9
 800559e:	3001      	adds	r0, #1
 80055a0:	d0e6      	beq.n	8005570 <_printf_common+0xa4>
 80055a2:	3601      	adds	r6, #1
 80055a4:	e7d9      	b.n	800555a <_printf_common+0x8e>
	...

080055a8 <_printf_i>:
 80055a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	7e0f      	ldrb	r7, [r1, #24]
 80055ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055b0:	2f78      	cmp	r7, #120	@ 0x78
 80055b2:	4691      	mov	r9, r2
 80055b4:	4680      	mov	r8, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	469a      	mov	sl, r3
 80055ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055be:	d807      	bhi.n	80055d0 <_printf_i+0x28>
 80055c0:	2f62      	cmp	r7, #98	@ 0x62
 80055c2:	d80a      	bhi.n	80055da <_printf_i+0x32>
 80055c4:	2f00      	cmp	r7, #0
 80055c6:	f000 80d2 	beq.w	800576e <_printf_i+0x1c6>
 80055ca:	2f58      	cmp	r7, #88	@ 0x58
 80055cc:	f000 80b9 	beq.w	8005742 <_printf_i+0x19a>
 80055d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055d8:	e03a      	b.n	8005650 <_printf_i+0xa8>
 80055da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055de:	2b15      	cmp	r3, #21
 80055e0:	d8f6      	bhi.n	80055d0 <_printf_i+0x28>
 80055e2:	a101      	add	r1, pc, #4	@ (adr r1, 80055e8 <_printf_i+0x40>)
 80055e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055e8:	08005641 	.word	0x08005641
 80055ec:	08005655 	.word	0x08005655
 80055f0:	080055d1 	.word	0x080055d1
 80055f4:	080055d1 	.word	0x080055d1
 80055f8:	080055d1 	.word	0x080055d1
 80055fc:	080055d1 	.word	0x080055d1
 8005600:	08005655 	.word	0x08005655
 8005604:	080055d1 	.word	0x080055d1
 8005608:	080055d1 	.word	0x080055d1
 800560c:	080055d1 	.word	0x080055d1
 8005610:	080055d1 	.word	0x080055d1
 8005614:	08005755 	.word	0x08005755
 8005618:	0800567f 	.word	0x0800567f
 800561c:	0800570f 	.word	0x0800570f
 8005620:	080055d1 	.word	0x080055d1
 8005624:	080055d1 	.word	0x080055d1
 8005628:	08005777 	.word	0x08005777
 800562c:	080055d1 	.word	0x080055d1
 8005630:	0800567f 	.word	0x0800567f
 8005634:	080055d1 	.word	0x080055d1
 8005638:	080055d1 	.word	0x080055d1
 800563c:	08005717 	.word	0x08005717
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6032      	str	r2, [r6, #0]
 8005648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800564c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005650:	2301      	movs	r3, #1
 8005652:	e09d      	b.n	8005790 <_printf_i+0x1e8>
 8005654:	6833      	ldr	r3, [r6, #0]
 8005656:	6820      	ldr	r0, [r4, #0]
 8005658:	1d19      	adds	r1, r3, #4
 800565a:	6031      	str	r1, [r6, #0]
 800565c:	0606      	lsls	r6, r0, #24
 800565e:	d501      	bpl.n	8005664 <_printf_i+0xbc>
 8005660:	681d      	ldr	r5, [r3, #0]
 8005662:	e003      	b.n	800566c <_printf_i+0xc4>
 8005664:	0645      	lsls	r5, r0, #25
 8005666:	d5fb      	bpl.n	8005660 <_printf_i+0xb8>
 8005668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800566c:	2d00      	cmp	r5, #0
 800566e:	da03      	bge.n	8005678 <_printf_i+0xd0>
 8005670:	232d      	movs	r3, #45	@ 0x2d
 8005672:	426d      	negs	r5, r5
 8005674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005678:	4859      	ldr	r0, [pc, #356]	@ (80057e0 <_printf_i+0x238>)
 800567a:	230a      	movs	r3, #10
 800567c:	e011      	b.n	80056a2 <_printf_i+0xfa>
 800567e:	6821      	ldr	r1, [r4, #0]
 8005680:	6833      	ldr	r3, [r6, #0]
 8005682:	0608      	lsls	r0, r1, #24
 8005684:	f853 5b04 	ldr.w	r5, [r3], #4
 8005688:	d402      	bmi.n	8005690 <_printf_i+0xe8>
 800568a:	0649      	lsls	r1, r1, #25
 800568c:	bf48      	it	mi
 800568e:	b2ad      	uxthmi	r5, r5
 8005690:	2f6f      	cmp	r7, #111	@ 0x6f
 8005692:	4853      	ldr	r0, [pc, #332]	@ (80057e0 <_printf_i+0x238>)
 8005694:	6033      	str	r3, [r6, #0]
 8005696:	bf14      	ite	ne
 8005698:	230a      	movne	r3, #10
 800569a:	2308      	moveq	r3, #8
 800569c:	2100      	movs	r1, #0
 800569e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056a2:	6866      	ldr	r6, [r4, #4]
 80056a4:	60a6      	str	r6, [r4, #8]
 80056a6:	2e00      	cmp	r6, #0
 80056a8:	bfa2      	ittt	ge
 80056aa:	6821      	ldrge	r1, [r4, #0]
 80056ac:	f021 0104 	bicge.w	r1, r1, #4
 80056b0:	6021      	strge	r1, [r4, #0]
 80056b2:	b90d      	cbnz	r5, 80056b8 <_printf_i+0x110>
 80056b4:	2e00      	cmp	r6, #0
 80056b6:	d04b      	beq.n	8005750 <_printf_i+0x1a8>
 80056b8:	4616      	mov	r6, r2
 80056ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80056be:	fb03 5711 	mls	r7, r3, r1, r5
 80056c2:	5dc7      	ldrb	r7, [r0, r7]
 80056c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056c8:	462f      	mov	r7, r5
 80056ca:	42bb      	cmp	r3, r7
 80056cc:	460d      	mov	r5, r1
 80056ce:	d9f4      	bls.n	80056ba <_printf_i+0x112>
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d10b      	bne.n	80056ec <_printf_i+0x144>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	07df      	lsls	r7, r3, #31
 80056d8:	d508      	bpl.n	80056ec <_printf_i+0x144>
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	6861      	ldr	r1, [r4, #4]
 80056de:	4299      	cmp	r1, r3
 80056e0:	bfde      	ittt	le
 80056e2:	2330      	movle	r3, #48	@ 0x30
 80056e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056ec:	1b92      	subs	r2, r2, r6
 80056ee:	6122      	str	r2, [r4, #16]
 80056f0:	f8cd a000 	str.w	sl, [sp]
 80056f4:	464b      	mov	r3, r9
 80056f6:	aa03      	add	r2, sp, #12
 80056f8:	4621      	mov	r1, r4
 80056fa:	4640      	mov	r0, r8
 80056fc:	f7ff fee6 	bl	80054cc <_printf_common>
 8005700:	3001      	adds	r0, #1
 8005702:	d14a      	bne.n	800579a <_printf_i+0x1f2>
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	b004      	add	sp, #16
 800570a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	f043 0320 	orr.w	r3, r3, #32
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	4833      	ldr	r0, [pc, #204]	@ (80057e4 <_printf_i+0x23c>)
 8005718:	2778      	movs	r7, #120	@ 0x78
 800571a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	6831      	ldr	r1, [r6, #0]
 8005722:	061f      	lsls	r7, r3, #24
 8005724:	f851 5b04 	ldr.w	r5, [r1], #4
 8005728:	d402      	bmi.n	8005730 <_printf_i+0x188>
 800572a:	065f      	lsls	r7, r3, #25
 800572c:	bf48      	it	mi
 800572e:	b2ad      	uxthmi	r5, r5
 8005730:	6031      	str	r1, [r6, #0]
 8005732:	07d9      	lsls	r1, r3, #31
 8005734:	bf44      	itt	mi
 8005736:	f043 0320 	orrmi.w	r3, r3, #32
 800573a:	6023      	strmi	r3, [r4, #0]
 800573c:	b11d      	cbz	r5, 8005746 <_printf_i+0x19e>
 800573e:	2310      	movs	r3, #16
 8005740:	e7ac      	b.n	800569c <_printf_i+0xf4>
 8005742:	4827      	ldr	r0, [pc, #156]	@ (80057e0 <_printf_i+0x238>)
 8005744:	e7e9      	b.n	800571a <_printf_i+0x172>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	f023 0320 	bic.w	r3, r3, #32
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	e7f6      	b.n	800573e <_printf_i+0x196>
 8005750:	4616      	mov	r6, r2
 8005752:	e7bd      	b.n	80056d0 <_printf_i+0x128>
 8005754:	6833      	ldr	r3, [r6, #0]
 8005756:	6825      	ldr	r5, [r4, #0]
 8005758:	6961      	ldr	r1, [r4, #20]
 800575a:	1d18      	adds	r0, r3, #4
 800575c:	6030      	str	r0, [r6, #0]
 800575e:	062e      	lsls	r6, r5, #24
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	d501      	bpl.n	8005768 <_printf_i+0x1c0>
 8005764:	6019      	str	r1, [r3, #0]
 8005766:	e002      	b.n	800576e <_printf_i+0x1c6>
 8005768:	0668      	lsls	r0, r5, #25
 800576a:	d5fb      	bpl.n	8005764 <_printf_i+0x1bc>
 800576c:	8019      	strh	r1, [r3, #0]
 800576e:	2300      	movs	r3, #0
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	4616      	mov	r6, r2
 8005774:	e7bc      	b.n	80056f0 <_printf_i+0x148>
 8005776:	6833      	ldr	r3, [r6, #0]
 8005778:	1d1a      	adds	r2, r3, #4
 800577a:	6032      	str	r2, [r6, #0]
 800577c:	681e      	ldr	r6, [r3, #0]
 800577e:	6862      	ldr	r2, [r4, #4]
 8005780:	2100      	movs	r1, #0
 8005782:	4630      	mov	r0, r6
 8005784:	f7fa fd2c 	bl	80001e0 <memchr>
 8005788:	b108      	cbz	r0, 800578e <_printf_i+0x1e6>
 800578a:	1b80      	subs	r0, r0, r6
 800578c:	6060      	str	r0, [r4, #4]
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	6123      	str	r3, [r4, #16]
 8005792:	2300      	movs	r3, #0
 8005794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005798:	e7aa      	b.n	80056f0 <_printf_i+0x148>
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	4632      	mov	r2, r6
 800579e:	4649      	mov	r1, r9
 80057a0:	4640      	mov	r0, r8
 80057a2:	47d0      	blx	sl
 80057a4:	3001      	adds	r0, #1
 80057a6:	d0ad      	beq.n	8005704 <_printf_i+0x15c>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	079b      	lsls	r3, r3, #30
 80057ac:	d413      	bmi.n	80057d6 <_printf_i+0x22e>
 80057ae:	68e0      	ldr	r0, [r4, #12]
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	4298      	cmp	r0, r3
 80057b4:	bfb8      	it	lt
 80057b6:	4618      	movlt	r0, r3
 80057b8:	e7a6      	b.n	8005708 <_printf_i+0x160>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4632      	mov	r2, r6
 80057be:	4649      	mov	r1, r9
 80057c0:	4640      	mov	r0, r8
 80057c2:	47d0      	blx	sl
 80057c4:	3001      	adds	r0, #1
 80057c6:	d09d      	beq.n	8005704 <_printf_i+0x15c>
 80057c8:	3501      	adds	r5, #1
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	9903      	ldr	r1, [sp, #12]
 80057ce:	1a5b      	subs	r3, r3, r1
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	dcf2      	bgt.n	80057ba <_printf_i+0x212>
 80057d4:	e7eb      	b.n	80057ae <_printf_i+0x206>
 80057d6:	2500      	movs	r5, #0
 80057d8:	f104 0619 	add.w	r6, r4, #25
 80057dc:	e7f5      	b.n	80057ca <_printf_i+0x222>
 80057de:	bf00      	nop
 80057e0:	0800669d 	.word	0x0800669d
 80057e4:	080066ae 	.word	0x080066ae

080057e8 <_scanf_chars>:
 80057e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057ec:	4615      	mov	r5, r2
 80057ee:	688a      	ldr	r2, [r1, #8]
 80057f0:	4680      	mov	r8, r0
 80057f2:	460c      	mov	r4, r1
 80057f4:	b932      	cbnz	r2, 8005804 <_scanf_chars+0x1c>
 80057f6:	698a      	ldr	r2, [r1, #24]
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	bf14      	ite	ne
 80057fc:	f04f 32ff 	movne.w	r2, #4294967295
 8005800:	2201      	moveq	r2, #1
 8005802:	608a      	str	r2, [r1, #8]
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005898 <_scanf_chars+0xb0>
 800580a:	06d1      	lsls	r1, r2, #27
 800580c:	bf5f      	itttt	pl
 800580e:	681a      	ldrpl	r2, [r3, #0]
 8005810:	1d11      	addpl	r1, r2, #4
 8005812:	6019      	strpl	r1, [r3, #0]
 8005814:	6816      	ldrpl	r6, [r2, #0]
 8005816:	2700      	movs	r7, #0
 8005818:	69a0      	ldr	r0, [r4, #24]
 800581a:	b188      	cbz	r0, 8005840 <_scanf_chars+0x58>
 800581c:	2801      	cmp	r0, #1
 800581e:	d107      	bne.n	8005830 <_scanf_chars+0x48>
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	781a      	ldrb	r2, [r3, #0]
 8005824:	6963      	ldr	r3, [r4, #20]
 8005826:	5c9b      	ldrb	r3, [r3, r2]
 8005828:	b953      	cbnz	r3, 8005840 <_scanf_chars+0x58>
 800582a:	2f00      	cmp	r7, #0
 800582c:	d031      	beq.n	8005892 <_scanf_chars+0xaa>
 800582e:	e022      	b.n	8005876 <_scanf_chars+0x8e>
 8005830:	2802      	cmp	r0, #2
 8005832:	d120      	bne.n	8005876 <_scanf_chars+0x8e>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f819 3003 	ldrb.w	r3, [r9, r3]
 800583c:	071b      	lsls	r3, r3, #28
 800583e:	d41a      	bmi.n	8005876 <_scanf_chars+0x8e>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	06da      	lsls	r2, r3, #27
 8005844:	bf5e      	ittt	pl
 8005846:	682b      	ldrpl	r3, [r5, #0]
 8005848:	781b      	ldrbpl	r3, [r3, #0]
 800584a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800584e:	682a      	ldr	r2, [r5, #0]
 8005850:	686b      	ldr	r3, [r5, #4]
 8005852:	3201      	adds	r2, #1
 8005854:	602a      	str	r2, [r5, #0]
 8005856:	68a2      	ldr	r2, [r4, #8]
 8005858:	3b01      	subs	r3, #1
 800585a:	3a01      	subs	r2, #1
 800585c:	606b      	str	r3, [r5, #4]
 800585e:	3701      	adds	r7, #1
 8005860:	60a2      	str	r2, [r4, #8]
 8005862:	b142      	cbz	r2, 8005876 <_scanf_chars+0x8e>
 8005864:	2b00      	cmp	r3, #0
 8005866:	dcd7      	bgt.n	8005818 <_scanf_chars+0x30>
 8005868:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800586c:	4629      	mov	r1, r5
 800586e:	4640      	mov	r0, r8
 8005870:	4798      	blx	r3
 8005872:	2800      	cmp	r0, #0
 8005874:	d0d0      	beq.n	8005818 <_scanf_chars+0x30>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	f013 0310 	ands.w	r3, r3, #16
 800587c:	d105      	bne.n	800588a <_scanf_chars+0xa2>
 800587e:	68e2      	ldr	r2, [r4, #12]
 8005880:	3201      	adds	r2, #1
 8005882:	60e2      	str	r2, [r4, #12]
 8005884:	69a2      	ldr	r2, [r4, #24]
 8005886:	b102      	cbz	r2, 800588a <_scanf_chars+0xa2>
 8005888:	7033      	strb	r3, [r6, #0]
 800588a:	6923      	ldr	r3, [r4, #16]
 800588c:	443b      	add	r3, r7
 800588e:	6123      	str	r3, [r4, #16]
 8005890:	2000      	movs	r0, #0
 8005892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005896:	bf00      	nop
 8005898:	080066db 	.word	0x080066db

0800589c <_scanf_i>:
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	4698      	mov	r8, r3
 80058a2:	4b74      	ldr	r3, [pc, #464]	@ (8005a74 <_scanf_i+0x1d8>)
 80058a4:	460c      	mov	r4, r1
 80058a6:	4682      	mov	sl, r0
 80058a8:	4616      	mov	r6, r2
 80058aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058ae:	b087      	sub	sp, #28
 80058b0:	ab03      	add	r3, sp, #12
 80058b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80058b6:	4b70      	ldr	r3, [pc, #448]	@ (8005a78 <_scanf_i+0x1dc>)
 80058b8:	69a1      	ldr	r1, [r4, #24]
 80058ba:	4a70      	ldr	r2, [pc, #448]	@ (8005a7c <_scanf_i+0x1e0>)
 80058bc:	2903      	cmp	r1, #3
 80058be:	bf08      	it	eq
 80058c0:	461a      	moveq	r2, r3
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	9201      	str	r2, [sp, #4]
 80058c6:	1e5a      	subs	r2, r3, #1
 80058c8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80058cc:	bf88      	it	hi
 80058ce:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80058d2:	4627      	mov	r7, r4
 80058d4:	bf82      	ittt	hi
 80058d6:	eb03 0905 	addhi.w	r9, r3, r5
 80058da:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80058de:	60a3      	strhi	r3, [r4, #8]
 80058e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80058e4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80058e8:	bf98      	it	ls
 80058ea:	f04f 0900 	movls.w	r9, #0
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	463d      	mov	r5, r7
 80058f2:	f04f 0b00 	mov.w	fp, #0
 80058f6:	6831      	ldr	r1, [r6, #0]
 80058f8:	ab03      	add	r3, sp, #12
 80058fa:	7809      	ldrb	r1, [r1, #0]
 80058fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005900:	2202      	movs	r2, #2
 8005902:	f7fa fc6d 	bl	80001e0 <memchr>
 8005906:	b328      	cbz	r0, 8005954 <_scanf_i+0xb8>
 8005908:	f1bb 0f01 	cmp.w	fp, #1
 800590c:	d159      	bne.n	80059c2 <_scanf_i+0x126>
 800590e:	6862      	ldr	r2, [r4, #4]
 8005910:	b92a      	cbnz	r2, 800591e <_scanf_i+0x82>
 8005912:	6822      	ldr	r2, [r4, #0]
 8005914:	2108      	movs	r1, #8
 8005916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800591a:	6061      	str	r1, [r4, #4]
 800591c:	6022      	str	r2, [r4, #0]
 800591e:	6822      	ldr	r2, [r4, #0]
 8005920:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005924:	6022      	str	r2, [r4, #0]
 8005926:	68a2      	ldr	r2, [r4, #8]
 8005928:	1e51      	subs	r1, r2, #1
 800592a:	60a1      	str	r1, [r4, #8]
 800592c:	b192      	cbz	r2, 8005954 <_scanf_i+0xb8>
 800592e:	6832      	ldr	r2, [r6, #0]
 8005930:	1c51      	adds	r1, r2, #1
 8005932:	6031      	str	r1, [r6, #0]
 8005934:	7812      	ldrb	r2, [r2, #0]
 8005936:	f805 2b01 	strb.w	r2, [r5], #1
 800593a:	6872      	ldr	r2, [r6, #4]
 800593c:	3a01      	subs	r2, #1
 800593e:	2a00      	cmp	r2, #0
 8005940:	6072      	str	r2, [r6, #4]
 8005942:	dc07      	bgt.n	8005954 <_scanf_i+0xb8>
 8005944:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005948:	4631      	mov	r1, r6
 800594a:	4650      	mov	r0, sl
 800594c:	4790      	blx	r2
 800594e:	2800      	cmp	r0, #0
 8005950:	f040 8085 	bne.w	8005a5e <_scanf_i+0x1c2>
 8005954:	f10b 0b01 	add.w	fp, fp, #1
 8005958:	f1bb 0f03 	cmp.w	fp, #3
 800595c:	d1cb      	bne.n	80058f6 <_scanf_i+0x5a>
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	b90b      	cbnz	r3, 8005966 <_scanf_i+0xca>
 8005962:	230a      	movs	r3, #10
 8005964:	6063      	str	r3, [r4, #4]
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	4945      	ldr	r1, [pc, #276]	@ (8005a80 <_scanf_i+0x1e4>)
 800596a:	6960      	ldr	r0, [r4, #20]
 800596c:	1ac9      	subs	r1, r1, r3
 800596e:	f000 f997 	bl	8005ca0 <__sccl>
 8005972:	f04f 0b00 	mov.w	fp, #0
 8005976:	68a3      	ldr	r3, [r4, #8]
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d03d      	beq.n	80059fa <_scanf_i+0x15e>
 800597e:	6831      	ldr	r1, [r6, #0]
 8005980:	6960      	ldr	r0, [r4, #20]
 8005982:	f891 c000 	ldrb.w	ip, [r1]
 8005986:	f810 000c 	ldrb.w	r0, [r0, ip]
 800598a:	2800      	cmp	r0, #0
 800598c:	d035      	beq.n	80059fa <_scanf_i+0x15e>
 800598e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005992:	d124      	bne.n	80059de <_scanf_i+0x142>
 8005994:	0510      	lsls	r0, r2, #20
 8005996:	d522      	bpl.n	80059de <_scanf_i+0x142>
 8005998:	f10b 0b01 	add.w	fp, fp, #1
 800599c:	f1b9 0f00 	cmp.w	r9, #0
 80059a0:	d003      	beq.n	80059aa <_scanf_i+0x10e>
 80059a2:	3301      	adds	r3, #1
 80059a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80059a8:	60a3      	str	r3, [r4, #8]
 80059aa:	6873      	ldr	r3, [r6, #4]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	6073      	str	r3, [r6, #4]
 80059b2:	dd1b      	ble.n	80059ec <_scanf_i+0x150>
 80059b4:	6833      	ldr	r3, [r6, #0]
 80059b6:	3301      	adds	r3, #1
 80059b8:	6033      	str	r3, [r6, #0]
 80059ba:	68a3      	ldr	r3, [r4, #8]
 80059bc:	3b01      	subs	r3, #1
 80059be:	60a3      	str	r3, [r4, #8]
 80059c0:	e7d9      	b.n	8005976 <_scanf_i+0xda>
 80059c2:	f1bb 0f02 	cmp.w	fp, #2
 80059c6:	d1ae      	bne.n	8005926 <_scanf_i+0x8a>
 80059c8:	6822      	ldr	r2, [r4, #0]
 80059ca:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80059ce:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80059d2:	d1bf      	bne.n	8005954 <_scanf_i+0xb8>
 80059d4:	2110      	movs	r1, #16
 80059d6:	6061      	str	r1, [r4, #4]
 80059d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059dc:	e7a2      	b.n	8005924 <_scanf_i+0x88>
 80059de:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80059e2:	6022      	str	r2, [r4, #0]
 80059e4:	780b      	ldrb	r3, [r1, #0]
 80059e6:	f805 3b01 	strb.w	r3, [r5], #1
 80059ea:	e7de      	b.n	80059aa <_scanf_i+0x10e>
 80059ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80059f0:	4631      	mov	r1, r6
 80059f2:	4650      	mov	r0, sl
 80059f4:	4798      	blx	r3
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d0df      	beq.n	80059ba <_scanf_i+0x11e>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	05d9      	lsls	r1, r3, #23
 80059fe:	d50d      	bpl.n	8005a1c <_scanf_i+0x180>
 8005a00:	42bd      	cmp	r5, r7
 8005a02:	d909      	bls.n	8005a18 <_scanf_i+0x17c>
 8005a04:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005a08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	4650      	mov	r0, sl
 8005a10:	4798      	blx	r3
 8005a12:	f105 39ff 	add.w	r9, r5, #4294967295
 8005a16:	464d      	mov	r5, r9
 8005a18:	42bd      	cmp	r5, r7
 8005a1a:	d028      	beq.n	8005a6e <_scanf_i+0x1d2>
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	f012 0210 	ands.w	r2, r2, #16
 8005a22:	d113      	bne.n	8005a4c <_scanf_i+0x1b0>
 8005a24:	702a      	strb	r2, [r5, #0]
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	9e01      	ldr	r6, [sp, #4]
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	4650      	mov	r0, sl
 8005a2e:	47b0      	blx	r6
 8005a30:	f8d8 3000 	ldr.w	r3, [r8]
 8005a34:	6821      	ldr	r1, [r4, #0]
 8005a36:	1d1a      	adds	r2, r3, #4
 8005a38:	f8c8 2000 	str.w	r2, [r8]
 8005a3c:	f011 0f20 	tst.w	r1, #32
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	d00f      	beq.n	8005a64 <_scanf_i+0x1c8>
 8005a44:	6018      	str	r0, [r3, #0]
 8005a46:	68e3      	ldr	r3, [r4, #12]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	60e3      	str	r3, [r4, #12]
 8005a4c:	6923      	ldr	r3, [r4, #16]
 8005a4e:	1bed      	subs	r5, r5, r7
 8005a50:	445d      	add	r5, fp
 8005a52:	442b      	add	r3, r5
 8005a54:	6123      	str	r3, [r4, #16]
 8005a56:	2000      	movs	r0, #0
 8005a58:	b007      	add	sp, #28
 8005a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5e:	f04f 0b00 	mov.w	fp, #0
 8005a62:	e7ca      	b.n	80059fa <_scanf_i+0x15e>
 8005a64:	07ca      	lsls	r2, r1, #31
 8005a66:	bf4c      	ite	mi
 8005a68:	8018      	strhmi	r0, [r3, #0]
 8005a6a:	6018      	strpl	r0, [r3, #0]
 8005a6c:	e7eb      	b.n	8005a46 <_scanf_i+0x1aa>
 8005a6e:	2001      	movs	r0, #1
 8005a70:	e7f2      	b.n	8005a58 <_scanf_i+0x1bc>
 8005a72:	bf00      	nop
 8005a74:	08006638 	.word	0x08006638
 8005a78:	08005f8d 	.word	0x08005f8d
 8005a7c:	0800606d 	.word	0x0800606d
 8005a80:	080066cf 	.word	0x080066cf

08005a84 <__sflush_r>:
 8005a84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8c:	0716      	lsls	r6, r2, #28
 8005a8e:	4605      	mov	r5, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	d454      	bmi.n	8005b3e <__sflush_r+0xba>
 8005a94:	684b      	ldr	r3, [r1, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dc02      	bgt.n	8005aa0 <__sflush_r+0x1c>
 8005a9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	dd48      	ble.n	8005b32 <__sflush_r+0xae>
 8005aa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005aa2:	2e00      	cmp	r6, #0
 8005aa4:	d045      	beq.n	8005b32 <__sflush_r+0xae>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005aac:	682f      	ldr	r7, [r5, #0]
 8005aae:	6a21      	ldr	r1, [r4, #32]
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	d030      	beq.n	8005b16 <__sflush_r+0x92>
 8005ab4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	0759      	lsls	r1, r3, #29
 8005aba:	d505      	bpl.n	8005ac8 <__sflush_r+0x44>
 8005abc:	6863      	ldr	r3, [r4, #4]
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ac2:	b10b      	cbz	r3, 8005ac8 <__sflush_r+0x44>
 8005ac4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	2300      	movs	r3, #0
 8005aca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005acc:	6a21      	ldr	r1, [r4, #32]
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b0      	blx	r6
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	d106      	bne.n	8005ae6 <__sflush_r+0x62>
 8005ad8:	6829      	ldr	r1, [r5, #0]
 8005ada:	291d      	cmp	r1, #29
 8005adc:	d82b      	bhi.n	8005b36 <__sflush_r+0xb2>
 8005ade:	4a2a      	ldr	r2, [pc, #168]	@ (8005b88 <__sflush_r+0x104>)
 8005ae0:	410a      	asrs	r2, r1
 8005ae2:	07d6      	lsls	r6, r2, #31
 8005ae4:	d427      	bmi.n	8005b36 <__sflush_r+0xb2>
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	6062      	str	r2, [r4, #4]
 8005aea:	04d9      	lsls	r1, r3, #19
 8005aec:	6922      	ldr	r2, [r4, #16]
 8005aee:	6022      	str	r2, [r4, #0]
 8005af0:	d504      	bpl.n	8005afc <__sflush_r+0x78>
 8005af2:	1c42      	adds	r2, r0, #1
 8005af4:	d101      	bne.n	8005afa <__sflush_r+0x76>
 8005af6:	682b      	ldr	r3, [r5, #0]
 8005af8:	b903      	cbnz	r3, 8005afc <__sflush_r+0x78>
 8005afa:	6560      	str	r0, [r4, #84]	@ 0x54
 8005afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005afe:	602f      	str	r7, [r5, #0]
 8005b00:	b1b9      	cbz	r1, 8005b32 <__sflush_r+0xae>
 8005b02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b06:	4299      	cmp	r1, r3
 8005b08:	d002      	beq.n	8005b10 <__sflush_r+0x8c>
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f7fe ff80 	bl	8004a10 <_free_r>
 8005b10:	2300      	movs	r3, #0
 8005b12:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b14:	e00d      	b.n	8005b32 <__sflush_r+0xae>
 8005b16:	2301      	movs	r3, #1
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b0      	blx	r6
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	1c50      	adds	r0, r2, #1
 8005b20:	d1c9      	bne.n	8005ab6 <__sflush_r+0x32>
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0c6      	beq.n	8005ab6 <__sflush_r+0x32>
 8005b28:	2b1d      	cmp	r3, #29
 8005b2a:	d001      	beq.n	8005b30 <__sflush_r+0xac>
 8005b2c:	2b16      	cmp	r3, #22
 8005b2e:	d11e      	bne.n	8005b6e <__sflush_r+0xea>
 8005b30:	602f      	str	r7, [r5, #0]
 8005b32:	2000      	movs	r0, #0
 8005b34:	e022      	b.n	8005b7c <__sflush_r+0xf8>
 8005b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b3a:	b21b      	sxth	r3, r3
 8005b3c:	e01b      	b.n	8005b76 <__sflush_r+0xf2>
 8005b3e:	690f      	ldr	r7, [r1, #16]
 8005b40:	2f00      	cmp	r7, #0
 8005b42:	d0f6      	beq.n	8005b32 <__sflush_r+0xae>
 8005b44:	0793      	lsls	r3, r2, #30
 8005b46:	680e      	ldr	r6, [r1, #0]
 8005b48:	bf08      	it	eq
 8005b4a:	694b      	ldreq	r3, [r1, #20]
 8005b4c:	600f      	str	r7, [r1, #0]
 8005b4e:	bf18      	it	ne
 8005b50:	2300      	movne	r3, #0
 8005b52:	eba6 0807 	sub.w	r8, r6, r7
 8005b56:	608b      	str	r3, [r1, #8]
 8005b58:	f1b8 0f00 	cmp.w	r8, #0
 8005b5c:	dde9      	ble.n	8005b32 <__sflush_r+0xae>
 8005b5e:	6a21      	ldr	r1, [r4, #32]
 8005b60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b62:	4643      	mov	r3, r8
 8005b64:	463a      	mov	r2, r7
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b0      	blx	r6
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	dc08      	bgt.n	8005b80 <__sflush_r+0xfc>
 8005b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b76:	81a3      	strh	r3, [r4, #12]
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b80:	4407      	add	r7, r0
 8005b82:	eba8 0800 	sub.w	r8, r8, r0
 8005b86:	e7e7      	b.n	8005b58 <__sflush_r+0xd4>
 8005b88:	dfbffffe 	.word	0xdfbffffe

08005b8c <_fflush_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	690b      	ldr	r3, [r1, #16]
 8005b90:	4605      	mov	r5, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	b913      	cbnz	r3, 8005b9c <_fflush_r+0x10>
 8005b96:	2500      	movs	r5, #0
 8005b98:	4628      	mov	r0, r5
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}
 8005b9c:	b118      	cbz	r0, 8005ba6 <_fflush_r+0x1a>
 8005b9e:	6a03      	ldr	r3, [r0, #32]
 8005ba0:	b90b      	cbnz	r3, 8005ba6 <_fflush_r+0x1a>
 8005ba2:	f7fe fcc5 	bl	8004530 <__sinit>
 8005ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0f3      	beq.n	8005b96 <_fflush_r+0xa>
 8005bae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005bb0:	07d0      	lsls	r0, r2, #31
 8005bb2:	d404      	bmi.n	8005bbe <_fflush_r+0x32>
 8005bb4:	0599      	lsls	r1, r3, #22
 8005bb6:	d402      	bmi.n	8005bbe <_fflush_r+0x32>
 8005bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bba:	f7fe ff26 	bl	8004a0a <__retarget_lock_acquire_recursive>
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	f7ff ff5f 	bl	8005a84 <__sflush_r>
 8005bc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bc8:	07da      	lsls	r2, r3, #31
 8005bca:	4605      	mov	r5, r0
 8005bcc:	d4e4      	bmi.n	8005b98 <_fflush_r+0xc>
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	059b      	lsls	r3, r3, #22
 8005bd2:	d4e1      	bmi.n	8005b98 <_fflush_r+0xc>
 8005bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bd6:	f7fe ff19 	bl	8004a0c <__retarget_lock_release_recursive>
 8005bda:	e7dd      	b.n	8005b98 <_fflush_r+0xc>

08005bdc <__swhatbuf_r>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	460c      	mov	r4, r1
 8005be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be4:	2900      	cmp	r1, #0
 8005be6:	b096      	sub	sp, #88	@ 0x58
 8005be8:	4615      	mov	r5, r2
 8005bea:	461e      	mov	r6, r3
 8005bec:	da0d      	bge.n	8005c0a <__swhatbuf_r+0x2e>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bf4:	f04f 0100 	mov.w	r1, #0
 8005bf8:	bf14      	ite	ne
 8005bfa:	2340      	movne	r3, #64	@ 0x40
 8005bfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c00:	2000      	movs	r0, #0
 8005c02:	6031      	str	r1, [r6, #0]
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	b016      	add	sp, #88	@ 0x58
 8005c08:	bd70      	pop	{r4, r5, r6, pc}
 8005c0a:	466a      	mov	r2, sp
 8005c0c:	f000 f8d6 	bl	8005dbc <_fstat_r>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	dbec      	blt.n	8005bee <__swhatbuf_r+0x12>
 8005c14:	9901      	ldr	r1, [sp, #4]
 8005c16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c1e:	4259      	negs	r1, r3
 8005c20:	4159      	adcs	r1, r3
 8005c22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c26:	e7eb      	b.n	8005c00 <__swhatbuf_r+0x24>

08005c28 <__smakebuf_r>:
 8005c28:	898b      	ldrh	r3, [r1, #12]
 8005c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c2c:	079d      	lsls	r5, r3, #30
 8005c2e:	4606      	mov	r6, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	d507      	bpl.n	8005c44 <__smakebuf_r+0x1c>
 8005c34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	6163      	str	r3, [r4, #20]
 8005c40:	b003      	add	sp, #12
 8005c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c44:	ab01      	add	r3, sp, #4
 8005c46:	466a      	mov	r2, sp
 8005c48:	f7ff ffc8 	bl	8005bdc <__swhatbuf_r>
 8005c4c:	9f00      	ldr	r7, [sp, #0]
 8005c4e:	4605      	mov	r5, r0
 8005c50:	4639      	mov	r1, r7
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7fe ff48 	bl	8004ae8 <_malloc_r>
 8005c58:	b948      	cbnz	r0, 8005c6e <__smakebuf_r+0x46>
 8005c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5e:	059a      	lsls	r2, r3, #22
 8005c60:	d4ee      	bmi.n	8005c40 <__smakebuf_r+0x18>
 8005c62:	f023 0303 	bic.w	r3, r3, #3
 8005c66:	f043 0302 	orr.w	r3, r3, #2
 8005c6a:	81a3      	strh	r3, [r4, #12]
 8005c6c:	e7e2      	b.n	8005c34 <__smakebuf_r+0xc>
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	6020      	str	r0, [r4, #0]
 8005c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c76:	81a3      	strh	r3, [r4, #12]
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c7e:	b15b      	cbz	r3, 8005c98 <__smakebuf_r+0x70>
 8005c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c84:	4630      	mov	r0, r6
 8005c86:	f000 f8ab 	bl	8005de0 <_isatty_r>
 8005c8a:	b128      	cbz	r0, 8005c98 <__smakebuf_r+0x70>
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	81a3      	strh	r3, [r4, #12]
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	431d      	orrs	r5, r3
 8005c9c:	81a5      	strh	r5, [r4, #12]
 8005c9e:	e7cf      	b.n	8005c40 <__smakebuf_r+0x18>

08005ca0 <__sccl>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	780b      	ldrb	r3, [r1, #0]
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	2b5e      	cmp	r3, #94	@ 0x5e
 8005ca8:	bf0b      	itete	eq
 8005caa:	784b      	ldrbeq	r3, [r1, #1]
 8005cac:	1c4a      	addne	r2, r1, #1
 8005cae:	1c8a      	addeq	r2, r1, #2
 8005cb0:	2100      	movne	r1, #0
 8005cb2:	bf08      	it	eq
 8005cb4:	2101      	moveq	r1, #1
 8005cb6:	3801      	subs	r0, #1
 8005cb8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005cbc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005cc0:	42a8      	cmp	r0, r5
 8005cc2:	d1fb      	bne.n	8005cbc <__sccl+0x1c>
 8005cc4:	b90b      	cbnz	r3, 8005cca <__sccl+0x2a>
 8005cc6:	1e50      	subs	r0, r2, #1
 8005cc8:	bd70      	pop	{r4, r5, r6, pc}
 8005cca:	f081 0101 	eor.w	r1, r1, #1
 8005cce:	54e1      	strb	r1, [r4, r3]
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005cd8:	2d2d      	cmp	r5, #45	@ 0x2d
 8005cda:	d005      	beq.n	8005ce8 <__sccl+0x48>
 8005cdc:	2d5d      	cmp	r5, #93	@ 0x5d
 8005cde:	d016      	beq.n	8005d0e <__sccl+0x6e>
 8005ce0:	2d00      	cmp	r5, #0
 8005ce2:	d0f1      	beq.n	8005cc8 <__sccl+0x28>
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	e7f2      	b.n	8005cce <__sccl+0x2e>
 8005ce8:	7846      	ldrb	r6, [r0, #1]
 8005cea:	2e5d      	cmp	r6, #93	@ 0x5d
 8005cec:	d0fa      	beq.n	8005ce4 <__sccl+0x44>
 8005cee:	42b3      	cmp	r3, r6
 8005cf0:	dcf8      	bgt.n	8005ce4 <__sccl+0x44>
 8005cf2:	3002      	adds	r0, #2
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	3201      	adds	r2, #1
 8005cf8:	4296      	cmp	r6, r2
 8005cfa:	54a1      	strb	r1, [r4, r2]
 8005cfc:	dcfb      	bgt.n	8005cf6 <__sccl+0x56>
 8005cfe:	1af2      	subs	r2, r6, r3
 8005d00:	3a01      	subs	r2, #1
 8005d02:	1c5d      	adds	r5, r3, #1
 8005d04:	42b3      	cmp	r3, r6
 8005d06:	bfa8      	it	ge
 8005d08:	2200      	movge	r2, #0
 8005d0a:	18ab      	adds	r3, r5, r2
 8005d0c:	e7e1      	b.n	8005cd2 <__sccl+0x32>
 8005d0e:	4610      	mov	r0, r2
 8005d10:	e7da      	b.n	8005cc8 <__sccl+0x28>

08005d12 <__submore>:
 8005d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d16:	460c      	mov	r4, r1
 8005d18:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005d1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d1e:	4299      	cmp	r1, r3
 8005d20:	d11d      	bne.n	8005d5e <__submore+0x4c>
 8005d22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005d26:	f7fe fedf 	bl	8004ae8 <_malloc_r>
 8005d2a:	b918      	cbnz	r0, 8005d34 <__submore+0x22>
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d38:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005d3a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005d3e:	6360      	str	r0, [r4, #52]	@ 0x34
 8005d40:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005d44:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005d48:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005d4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005d50:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005d54:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005d58:	6020      	str	r0, [r4, #0]
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e7e8      	b.n	8005d30 <__submore+0x1e>
 8005d5e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005d60:	0077      	lsls	r7, r6, #1
 8005d62:	463a      	mov	r2, r7
 8005d64:	f000 f86a 	bl	8005e3c <_realloc_r>
 8005d68:	4605      	mov	r5, r0
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d0de      	beq.n	8005d2c <__submore+0x1a>
 8005d6e:	eb00 0806 	add.w	r8, r0, r6
 8005d72:	4601      	mov	r1, r0
 8005d74:	4632      	mov	r2, r6
 8005d76:	4640      	mov	r0, r8
 8005d78:	f000 f852 	bl	8005e20 <memcpy>
 8005d7c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005d80:	f8c4 8000 	str.w	r8, [r4]
 8005d84:	e7e9      	b.n	8005d5a <__submore+0x48>

08005d86 <memmove>:
 8005d86:	4288      	cmp	r0, r1
 8005d88:	b510      	push	{r4, lr}
 8005d8a:	eb01 0402 	add.w	r4, r1, r2
 8005d8e:	d902      	bls.n	8005d96 <memmove+0x10>
 8005d90:	4284      	cmp	r4, r0
 8005d92:	4623      	mov	r3, r4
 8005d94:	d807      	bhi.n	8005da6 <memmove+0x20>
 8005d96:	1e43      	subs	r3, r0, #1
 8005d98:	42a1      	cmp	r1, r4
 8005d9a:	d008      	beq.n	8005dae <memmove+0x28>
 8005d9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005da0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005da4:	e7f8      	b.n	8005d98 <memmove+0x12>
 8005da6:	4402      	add	r2, r0
 8005da8:	4601      	mov	r1, r0
 8005daa:	428a      	cmp	r2, r1
 8005dac:	d100      	bne.n	8005db0 <memmove+0x2a>
 8005dae:	bd10      	pop	{r4, pc}
 8005db0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005db4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005db8:	e7f7      	b.n	8005daa <memmove+0x24>
	...

08005dbc <_fstat_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d07      	ldr	r5, [pc, #28]	@ (8005ddc <_fstat_r+0x20>)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	602b      	str	r3, [r5, #0]
 8005dca:	f7fb f93c 	bl	8001046 <_fstat>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	d102      	bne.n	8005dd8 <_fstat_r+0x1c>
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	b103      	cbz	r3, 8005dd8 <_fstat_r+0x1c>
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	bd38      	pop	{r3, r4, r5, pc}
 8005dda:	bf00      	nop
 8005ddc:	2000027c 	.word	0x2000027c

08005de0 <_isatty_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d06      	ldr	r5, [pc, #24]	@ (8005dfc <_isatty_r+0x1c>)
 8005de4:	2300      	movs	r3, #0
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	602b      	str	r3, [r5, #0]
 8005dec:	f7fb f93b 	bl	8001066 <_isatty>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_isatty_r+0x1a>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_isatty_r+0x1a>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	2000027c 	.word	0x2000027c

08005e00 <_sbrk_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d06      	ldr	r5, [pc, #24]	@ (8005e1c <_sbrk_r+0x1c>)
 8005e04:	2300      	movs	r3, #0
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	f7fb f944 	bl	8001098 <_sbrk>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_sbrk_r+0x1a>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_sbrk_r+0x1a>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	2000027c 	.word	0x2000027c

08005e20 <memcpy>:
 8005e20:	440a      	add	r2, r1
 8005e22:	4291      	cmp	r1, r2
 8005e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e28:	d100      	bne.n	8005e2c <memcpy+0xc>
 8005e2a:	4770      	bx	lr
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e36:	4291      	cmp	r1, r2
 8005e38:	d1f9      	bne.n	8005e2e <memcpy+0xe>
 8005e3a:	bd10      	pop	{r4, pc}

08005e3c <_realloc_r>:
 8005e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e40:	4680      	mov	r8, r0
 8005e42:	4615      	mov	r5, r2
 8005e44:	460c      	mov	r4, r1
 8005e46:	b921      	cbnz	r1, 8005e52 <_realloc_r+0x16>
 8005e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	f7fe be4b 	b.w	8004ae8 <_malloc_r>
 8005e52:	b92a      	cbnz	r2, 8005e60 <_realloc_r+0x24>
 8005e54:	f7fe fddc 	bl	8004a10 <_free_r>
 8005e58:	2400      	movs	r4, #0
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e60:	f000 f906 	bl	8006070 <_malloc_usable_size_r>
 8005e64:	4285      	cmp	r5, r0
 8005e66:	4606      	mov	r6, r0
 8005e68:	d802      	bhi.n	8005e70 <_realloc_r+0x34>
 8005e6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e6e:	d8f4      	bhi.n	8005e5a <_realloc_r+0x1e>
 8005e70:	4629      	mov	r1, r5
 8005e72:	4640      	mov	r0, r8
 8005e74:	f7fe fe38 	bl	8004ae8 <_malloc_r>
 8005e78:	4607      	mov	r7, r0
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d0ec      	beq.n	8005e58 <_realloc_r+0x1c>
 8005e7e:	42b5      	cmp	r5, r6
 8005e80:	462a      	mov	r2, r5
 8005e82:	4621      	mov	r1, r4
 8005e84:	bf28      	it	cs
 8005e86:	4632      	movcs	r2, r6
 8005e88:	f7ff ffca 	bl	8005e20 <memcpy>
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4640      	mov	r0, r8
 8005e90:	f7fe fdbe 	bl	8004a10 <_free_r>
 8005e94:	463c      	mov	r4, r7
 8005e96:	e7e0      	b.n	8005e5a <_realloc_r+0x1e>

08005e98 <_strtol_l.constprop.0>:
 8005e98:	2b24      	cmp	r3, #36	@ 0x24
 8005e9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9e:	4686      	mov	lr, r0
 8005ea0:	4690      	mov	r8, r2
 8005ea2:	d801      	bhi.n	8005ea8 <_strtol_l.constprop.0+0x10>
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d106      	bne.n	8005eb6 <_strtol_l.constprop.0+0x1e>
 8005ea8:	f7fe fd84 	bl	80049b4 <__errno>
 8005eac:	2316      	movs	r3, #22
 8005eae:	6003      	str	r3, [r0, #0]
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb6:	4834      	ldr	r0, [pc, #208]	@ (8005f88 <_strtol_l.constprop.0+0xf0>)
 8005eb8:	460d      	mov	r5, r1
 8005eba:	462a      	mov	r2, r5
 8005ebc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ec0:	5d06      	ldrb	r6, [r0, r4]
 8005ec2:	f016 0608 	ands.w	r6, r6, #8
 8005ec6:	d1f8      	bne.n	8005eba <_strtol_l.constprop.0+0x22>
 8005ec8:	2c2d      	cmp	r4, #45	@ 0x2d
 8005eca:	d12d      	bne.n	8005f28 <_strtol_l.constprop.0+0x90>
 8005ecc:	782c      	ldrb	r4, [r5, #0]
 8005ece:	2601      	movs	r6, #1
 8005ed0:	1c95      	adds	r5, r2, #2
 8005ed2:	f033 0210 	bics.w	r2, r3, #16
 8005ed6:	d109      	bne.n	8005eec <_strtol_l.constprop.0+0x54>
 8005ed8:	2c30      	cmp	r4, #48	@ 0x30
 8005eda:	d12a      	bne.n	8005f32 <_strtol_l.constprop.0+0x9a>
 8005edc:	782a      	ldrb	r2, [r5, #0]
 8005ede:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005ee2:	2a58      	cmp	r2, #88	@ 0x58
 8005ee4:	d125      	bne.n	8005f32 <_strtol_l.constprop.0+0x9a>
 8005ee6:	786c      	ldrb	r4, [r5, #1]
 8005ee8:	2310      	movs	r3, #16
 8005eea:	3502      	adds	r5, #2
 8005eec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005ef0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	fbbc f9f3 	udiv	r9, ip, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	fb03 ca19 	mls	sl, r3, r9, ip
 8005f00:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005f04:	2f09      	cmp	r7, #9
 8005f06:	d81b      	bhi.n	8005f40 <_strtol_l.constprop.0+0xa8>
 8005f08:	463c      	mov	r4, r7
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	dd27      	ble.n	8005f5e <_strtol_l.constprop.0+0xc6>
 8005f0e:	1c57      	adds	r7, r2, #1
 8005f10:	d007      	beq.n	8005f22 <_strtol_l.constprop.0+0x8a>
 8005f12:	4581      	cmp	r9, r0
 8005f14:	d320      	bcc.n	8005f58 <_strtol_l.constprop.0+0xc0>
 8005f16:	d101      	bne.n	8005f1c <_strtol_l.constprop.0+0x84>
 8005f18:	45a2      	cmp	sl, r4
 8005f1a:	db1d      	blt.n	8005f58 <_strtol_l.constprop.0+0xc0>
 8005f1c:	fb00 4003 	mla	r0, r0, r3, r4
 8005f20:	2201      	movs	r2, #1
 8005f22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f26:	e7eb      	b.n	8005f00 <_strtol_l.constprop.0+0x68>
 8005f28:	2c2b      	cmp	r4, #43	@ 0x2b
 8005f2a:	bf04      	itt	eq
 8005f2c:	782c      	ldrbeq	r4, [r5, #0]
 8005f2e:	1c95      	addeq	r5, r2, #2
 8005f30:	e7cf      	b.n	8005ed2 <_strtol_l.constprop.0+0x3a>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1da      	bne.n	8005eec <_strtol_l.constprop.0+0x54>
 8005f36:	2c30      	cmp	r4, #48	@ 0x30
 8005f38:	bf0c      	ite	eq
 8005f3a:	2308      	moveq	r3, #8
 8005f3c:	230a      	movne	r3, #10
 8005f3e:	e7d5      	b.n	8005eec <_strtol_l.constprop.0+0x54>
 8005f40:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005f44:	2f19      	cmp	r7, #25
 8005f46:	d801      	bhi.n	8005f4c <_strtol_l.constprop.0+0xb4>
 8005f48:	3c37      	subs	r4, #55	@ 0x37
 8005f4a:	e7de      	b.n	8005f0a <_strtol_l.constprop.0+0x72>
 8005f4c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005f50:	2f19      	cmp	r7, #25
 8005f52:	d804      	bhi.n	8005f5e <_strtol_l.constprop.0+0xc6>
 8005f54:	3c57      	subs	r4, #87	@ 0x57
 8005f56:	e7d8      	b.n	8005f0a <_strtol_l.constprop.0+0x72>
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5c:	e7e1      	b.n	8005f22 <_strtol_l.constprop.0+0x8a>
 8005f5e:	1c53      	adds	r3, r2, #1
 8005f60:	d108      	bne.n	8005f74 <_strtol_l.constprop.0+0xdc>
 8005f62:	2322      	movs	r3, #34	@ 0x22
 8005f64:	f8ce 3000 	str.w	r3, [lr]
 8005f68:	4660      	mov	r0, ip
 8005f6a:	f1b8 0f00 	cmp.w	r8, #0
 8005f6e:	d0a0      	beq.n	8005eb2 <_strtol_l.constprop.0+0x1a>
 8005f70:	1e69      	subs	r1, r5, #1
 8005f72:	e006      	b.n	8005f82 <_strtol_l.constprop.0+0xea>
 8005f74:	b106      	cbz	r6, 8005f78 <_strtol_l.constprop.0+0xe0>
 8005f76:	4240      	negs	r0, r0
 8005f78:	f1b8 0f00 	cmp.w	r8, #0
 8005f7c:	d099      	beq.n	8005eb2 <_strtol_l.constprop.0+0x1a>
 8005f7e:	2a00      	cmp	r2, #0
 8005f80:	d1f6      	bne.n	8005f70 <_strtol_l.constprop.0+0xd8>
 8005f82:	f8c8 1000 	str.w	r1, [r8]
 8005f86:	e794      	b.n	8005eb2 <_strtol_l.constprop.0+0x1a>
 8005f88:	080066db 	.word	0x080066db

08005f8c <_strtol_r>:
 8005f8c:	f7ff bf84 	b.w	8005e98 <_strtol_l.constprop.0>

08005f90 <_strtoul_l.constprop.0>:
 8005f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f94:	4e34      	ldr	r6, [pc, #208]	@ (8006068 <_strtoul_l.constprop.0+0xd8>)
 8005f96:	4686      	mov	lr, r0
 8005f98:	460d      	mov	r5, r1
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fa0:	5d37      	ldrb	r7, [r6, r4]
 8005fa2:	f017 0708 	ands.w	r7, r7, #8
 8005fa6:	d1f8      	bne.n	8005f9a <_strtoul_l.constprop.0+0xa>
 8005fa8:	2c2d      	cmp	r4, #45	@ 0x2d
 8005faa:	d12f      	bne.n	800600c <_strtoul_l.constprop.0+0x7c>
 8005fac:	782c      	ldrb	r4, [r5, #0]
 8005fae:	2701      	movs	r7, #1
 8005fb0:	1c85      	adds	r5, r0, #2
 8005fb2:	f033 0010 	bics.w	r0, r3, #16
 8005fb6:	d109      	bne.n	8005fcc <_strtoul_l.constprop.0+0x3c>
 8005fb8:	2c30      	cmp	r4, #48	@ 0x30
 8005fba:	d12c      	bne.n	8006016 <_strtoul_l.constprop.0+0x86>
 8005fbc:	7828      	ldrb	r0, [r5, #0]
 8005fbe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005fc2:	2858      	cmp	r0, #88	@ 0x58
 8005fc4:	d127      	bne.n	8006016 <_strtoul_l.constprop.0+0x86>
 8005fc6:	786c      	ldrb	r4, [r5, #1]
 8005fc8:	2310      	movs	r3, #16
 8005fca:	3502      	adds	r5, #2
 8005fcc:	f04f 38ff 	mov.w	r8, #4294967295
 8005fd0:	2600      	movs	r6, #0
 8005fd2:	fbb8 f8f3 	udiv	r8, r8, r3
 8005fd6:	fb03 f908 	mul.w	r9, r3, r8
 8005fda:	ea6f 0909 	mvn.w	r9, r9
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005fe4:	f1bc 0f09 	cmp.w	ip, #9
 8005fe8:	d81c      	bhi.n	8006024 <_strtoul_l.constprop.0+0x94>
 8005fea:	4664      	mov	r4, ip
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	dd2a      	ble.n	8006046 <_strtoul_l.constprop.0+0xb6>
 8005ff0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005ff4:	d007      	beq.n	8006006 <_strtoul_l.constprop.0+0x76>
 8005ff6:	4580      	cmp	r8, r0
 8005ff8:	d322      	bcc.n	8006040 <_strtoul_l.constprop.0+0xb0>
 8005ffa:	d101      	bne.n	8006000 <_strtoul_l.constprop.0+0x70>
 8005ffc:	45a1      	cmp	r9, r4
 8005ffe:	db1f      	blt.n	8006040 <_strtoul_l.constprop.0+0xb0>
 8006000:	fb00 4003 	mla	r0, r0, r3, r4
 8006004:	2601      	movs	r6, #1
 8006006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800600a:	e7e9      	b.n	8005fe0 <_strtoul_l.constprop.0+0x50>
 800600c:	2c2b      	cmp	r4, #43	@ 0x2b
 800600e:	bf04      	itt	eq
 8006010:	782c      	ldrbeq	r4, [r5, #0]
 8006012:	1c85      	addeq	r5, r0, #2
 8006014:	e7cd      	b.n	8005fb2 <_strtoul_l.constprop.0+0x22>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1d8      	bne.n	8005fcc <_strtoul_l.constprop.0+0x3c>
 800601a:	2c30      	cmp	r4, #48	@ 0x30
 800601c:	bf0c      	ite	eq
 800601e:	2308      	moveq	r3, #8
 8006020:	230a      	movne	r3, #10
 8006022:	e7d3      	b.n	8005fcc <_strtoul_l.constprop.0+0x3c>
 8006024:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006028:	f1bc 0f19 	cmp.w	ip, #25
 800602c:	d801      	bhi.n	8006032 <_strtoul_l.constprop.0+0xa2>
 800602e:	3c37      	subs	r4, #55	@ 0x37
 8006030:	e7dc      	b.n	8005fec <_strtoul_l.constprop.0+0x5c>
 8006032:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006036:	f1bc 0f19 	cmp.w	ip, #25
 800603a:	d804      	bhi.n	8006046 <_strtoul_l.constprop.0+0xb6>
 800603c:	3c57      	subs	r4, #87	@ 0x57
 800603e:	e7d5      	b.n	8005fec <_strtoul_l.constprop.0+0x5c>
 8006040:	f04f 36ff 	mov.w	r6, #4294967295
 8006044:	e7df      	b.n	8006006 <_strtoul_l.constprop.0+0x76>
 8006046:	1c73      	adds	r3, r6, #1
 8006048:	d106      	bne.n	8006058 <_strtoul_l.constprop.0+0xc8>
 800604a:	2322      	movs	r3, #34	@ 0x22
 800604c:	f8ce 3000 	str.w	r3, [lr]
 8006050:	4630      	mov	r0, r6
 8006052:	b932      	cbnz	r2, 8006062 <_strtoul_l.constprop.0+0xd2>
 8006054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006058:	b107      	cbz	r7, 800605c <_strtoul_l.constprop.0+0xcc>
 800605a:	4240      	negs	r0, r0
 800605c:	2a00      	cmp	r2, #0
 800605e:	d0f9      	beq.n	8006054 <_strtoul_l.constprop.0+0xc4>
 8006060:	b106      	cbz	r6, 8006064 <_strtoul_l.constprop.0+0xd4>
 8006062:	1e69      	subs	r1, r5, #1
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	e7f5      	b.n	8006054 <_strtoul_l.constprop.0+0xc4>
 8006068:	080066db 	.word	0x080066db

0800606c <_strtoul_r>:
 800606c:	f7ff bf90 	b.w	8005f90 <_strtoul_l.constprop.0>

08006070 <_malloc_usable_size_r>:
 8006070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006074:	1f18      	subs	r0, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	bfbc      	itt	lt
 800607a:	580b      	ldrlt	r3, [r1, r0]
 800607c:	18c0      	addlt	r0, r0, r3
 800607e:	4770      	bx	lr

08006080 <_init>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr

0800608c <_fini>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr
