
QuectelStm32Bg95Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  08005658  08005658  00006658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce0  08005ce0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ce0  08005ce0  00006ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ce8  08005ce8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ce8  08005ce8  00006ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cec  08005cec  00006cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005cf0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000005c  08005d4c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08005d4c  000072ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee5f  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000249e  00000000  00000000  00015eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00018390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009cc  00000000  00000000  00019050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0e6  00000000  00000000  00019a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f282  00000000  00000000  00033b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a54c0  00000000  00000000  00042d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8244  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c74  00000000  00000000  000e8288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000ebefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005640 	.word	0x08005640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005640 	.word	0x08005640

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fd85 	bl	8001082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f814 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f938 	bl	80007f0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000580:	f000 f872 	bl	8000668 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f904 	bl	8000790 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  InitialConfigBg95();
 8000588:	f000 f980 	bl	800088c <InitialConfigBg95>
	  ConfigPdpContext();
 800058c:	f000 fa3a 	bl	8000a04 <ConfigPdpContext>
	  ActivePdp();
 8000590:	f000 fac4 	bl	8000b1c <ActivePdp>
	  ConfigMqttContext();
 8000594:	f000 fa76 	bl	8000a84 <ConfigMqttContext>
	  MqttConfigBeforeConnection();
 8000598:	f000 fb26 	bl	8000be8 <MqttConfigBeforeConnection>
	  MqttConnectAndSubscribe();
 800059c:	f000 fb04 	bl	8000ba8 <MqttConnectAndSubscribe>
	  InitialConfigBg95();
 80005a0:	bf00      	nop
 80005a2:	e7f1      	b.n	8000588 <main+0x18>

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	@ 0x58
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	@ 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 ff34 	bl	8004420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ca:	f001 f913 	bl	80017f4 <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d4:	f000 fbd2 	bl	8000d7c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d8:	f001 f8ee 	bl	80017b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <SystemClock_Config+0xc0>)
 80005de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005e2:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <SystemClock_Config+0xc0>)
 80005e4:	f023 0318 	bic.w	r3, r3, #24
 80005e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80005ec:	231c      	movs	r3, #28
 80005ee:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000600:	2360      	movs	r3, #96	@ 0x60
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000608:	2301      	movs	r3, #1
 800060a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000610:	2328      	movs	r3, #40	@ 0x28
 8000612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f93d 	bl	80018a0 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800062c:	f000 fba6 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2303      	movs	r3, #3
 8000636:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	2104      	movs	r1, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fd8b 	bl	8002164 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000654:	f000 fb92 	bl	8000d7c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000658:	f002 f92e 	bl	80028b8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800065c:	bf00      	nop
 800065e:	3758      	adds	r7, #88	@ 0x58
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b092      	sub	sp, #72	@ 0x48
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800066e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800067e:	2300      	movs	r3, #0
 8000680:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	222c      	movs	r2, #44	@ 0x2c
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f003 fec9 	bl	8004420 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800068e:	4b3e      	ldr	r3, [pc, #248]	@ (8000788 <MX_RTC_Init+0x120>)
 8000690:	4a3e      	ldr	r2, [pc, #248]	@ (800078c <MX_RTC_Init+0x124>)
 8000692:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000694:	4b3c      	ldr	r3, [pc, #240]	@ (8000788 <MX_RTC_Init+0x120>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800069a:	4b3b      	ldr	r3, [pc, #236]	@ (8000788 <MX_RTC_Init+0x120>)
 800069c:	227f      	movs	r2, #127	@ 0x7f
 800069e:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80006a0:	4b39      	ldr	r3, [pc, #228]	@ (8000788 <MX_RTC_Init+0x120>)
 80006a2:	22ff      	movs	r2, #255	@ 0xff
 80006a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006a6:	4b38      	ldr	r3, [pc, #224]	@ (8000788 <MX_RTC_Init+0x120>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ac:	4b36      	ldr	r3, [pc, #216]	@ (8000788 <MX_RTC_Init+0x120>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006b2:	4b35      	ldr	r3, [pc, #212]	@ (8000788 <MX_RTC_Init+0x120>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006b8:	4b33      	ldr	r3, [pc, #204]	@ (8000788 <MX_RTC_Init+0x120>)
 80006ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006be:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006c0:	4b31      	ldr	r3, [pc, #196]	@ (8000788 <MX_RTC_Init+0x120>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006c6:	4830      	ldr	r0, [pc, #192]	@ (8000788 <MX_RTC_Init+0x120>)
 80006c8:	f002 f906 	bl	80028d8 <HAL_RTC_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 fb53 	bl	8000d7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ec:	2300      	movs	r3, #0
 80006ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006f4:	2201      	movs	r2, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	4823      	ldr	r0, [pc, #140]	@ (8000788 <MX_RTC_Init+0x120>)
 80006fa:	f002 f97d 	bl	80029f8 <HAL_RTC_SetTime>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000704:	f000 fb3a 	bl	8000d7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000708:	2301      	movs	r3, #1
 800070a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800070e:	2301      	movs	r3, #1
 8000710:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x1;
 8000714:	2301      	movs	r3, #1
 8000716:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x0;
 800071a:	2300      	movs	r3, #0
 800071c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000720:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000724:	2201      	movs	r2, #1
 8000726:	4619      	mov	r1, r3
 8000728:	4817      	ldr	r0, [pc, #92]	@ (8000788 <MX_RTC_Init+0x120>)
 800072a:	f002 fa02 	bl	8002b32 <HAL_RTC_SetDate>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8000734:	f000 fb22 	bl	8000d7c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000738:	2300      	movs	r3, #0
 800073a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800073c:	2300      	movs	r3, #0
 800073e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000740:	2300      	movs	r3, #0
 8000742:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800075c:	2301      	movs	r3, #1
 800075e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000762:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2201      	movs	r2, #1
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_RTC_Init+0x120>)
 8000770:	f002 fa66 	bl	8002c40 <HAL_RTC_SetAlarm_IT>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_RTC_Init+0x116>
  {
    Error_Handler();
 800077a:	f000 faff 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3748      	adds	r7, #72	@ 0x48
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000a8 	.word	0x200000a8
 800078c:	40002800 	.word	0x40002800

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <MX_USART2_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007d4:	f002 fc1e 	bl	8003014 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 facd 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000d4 	.word	0x200000d4
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_GPIO_Init+0x44>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000834 <MX_GPIO_Init+0x44>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_GPIO_Init+0x44>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_GPIO_Init+0x44>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <MX_GPIO_Init+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_GPIO_Init+0x44>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <sendATCommand>:

/* USER CODE BEGIN 4 */
void sendATCommand(char* command) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fcc5 	bl	80001d0 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29a      	uxth	r2, r3
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	4803      	ldr	r0, [pc, #12]	@ (8000860 <sendATCommand+0x28>)
 8000852:	f002 fc2d 	bl	80030b0 <HAL_UART_Transmit>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000d4 	.word	0x200000d4

08000864 <receiveResponse>:
void receiveResponse(char* buffer, uint16_t bufferSize) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	807b      	strh	r3, [r7, #2]
    HAL_UART_Receive(&huart2, (uint8_t*)buffer, bufferSize, HAL_MAX_DELAY);
 8000870:	887a      	ldrh	r2, [r7, #2]
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <receiveResponse+0x24>)
 800087a:	f002 fca2 	bl	80031c2 <HAL_UART_Receive>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000d4 	.word	0x200000d4

0800088c <InitialConfigBg95>:

void InitialConfigBg95(){
 800088c:	b580      	push	{r7, lr}
 800088e:	b0b0      	sub	sp, #192	@ 0xc0
 8000890:	af00      	add	r7, sp, #0
    char response[128]; // Buffer temporário para respostas AT

    // Transmitir os comandos AT pela UART2
    sendATCommand("AT+CCID\r\n"); // Obter o ICCID
 8000892:	4848      	ldr	r0, [pc, #288]	@ (80009b4 <InitialConfigBg95+0x128>)
 8000894:	f7ff ffd0 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000898:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800089c:	f000 fc66 	bl	800116c <HAL_Delay>

    sendATCommand("AT+CIMI\r\n"); // Obter o IMSI
 80008a0:	4845      	ldr	r0, [pc, #276]	@ (80009b8 <InitialConfigBg95+0x12c>)
 80008a2:	f7ff ffc9 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80008a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008aa:	f000 fc5f 	bl	800116c <HAL_Delay>

    sendATCommand("AT+CFUN=0\r\n"); // Configurar o módulo para funcionalidade mínima
 80008ae:	4843      	ldr	r0, [pc, #268]	@ (80009bc <InitialConfigBg95+0x130>)
 80008b0:	f7ff ffc2 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b8:	f000 fc58 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QCFG=\"nwscanmode\",0,1\r\n"); // Configurar a pesquisa de todas as RATs
 80008bc:	4840      	ldr	r0, [pc, #256]	@ (80009c0 <InitialConfigBg95+0x134>)
 80008be:	f7ff ffbb 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80008c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008c6:	f000 fc51 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QCFG=\"nwscanseq\",020103,1\r\n"); // Configurar a sequência de pesquisa de RAT
 80008ca:	483e      	ldr	r0, [pc, #248]	@ (80009c4 <InitialConfigBg95+0x138>)
 80008cc:	f7ff ffb4 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80008d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008d4:	f000 fc4a 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QCFG=\"band\",0,100002000000000F0E189F,10004200000000090E189F\r\n"); // Configurar bandas de frequência
 80008d8:	483b      	ldr	r0, [pc, #236]	@ (80009c8 <InitialConfigBg95+0x13c>)
 80008da:	f7ff ffad 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80008de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e2:	f000 fc43 	bl	800116c <HAL_Delay>

    sendATCommand("AT+COPS=0\r\n"); // Seleção automática de operadora
 80008e6:	4839      	ldr	r0, [pc, #228]	@ (80009cc <InitialConfigBg95+0x140>)
 80008e8:	f7ff ffa6 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80008ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008f0:	f000 fc3c 	bl	800116c <HAL_Delay>

    strcpy(apn, "your_apn");  // Armazenar o APN para uso futuro
 80008f4:	4b36      	ldr	r3, [pc, #216]	@ (80009d0 <InitialConfigBg95+0x144>)
 80008f6:	4a37      	ldr	r2, [pc, #220]	@ (80009d4 <InitialConfigBg95+0x148>)
 80008f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80008fa:	c303      	stmia	r3!, {r0, r1}
 80008fc:	701a      	strb	r2, [r3, #0]
    char command[64];
    snprintf(command, sizeof(command), "AT+CGDCONT=1,\"IP\",\"%s\"\r\n", apn);
 80008fe:	4638      	mov	r0, r7
 8000900:	4b33      	ldr	r3, [pc, #204]	@ (80009d0 <InitialConfigBg95+0x144>)
 8000902:	4a35      	ldr	r2, [pc, #212]	@ (80009d8 <InitialConfigBg95+0x14c>)
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	f003 fd0b 	bl	8004320 <sniprintf>
    sendATCommand(command);
 800090a:	463b      	mov	r3, r7
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff93 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000912:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000916:	f000 fc29 	bl	800116c <HAL_Delay>

    sendATCommand("AT+CFUN=1\r\n"); // Habilitar funcionalidade completa
 800091a:	4830      	ldr	r0, [pc, #192]	@ (80009dc <InitialConfigBg95+0x150>)
 800091c:	f7ff ff8c 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000920:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000924:	f000 fc22 	bl	800116c <HAL_Delay>

    sendATCommand("AT+CREG=1;+CGREG=1;+CEREG=1\r\n"); // Habilitar códigos de resultado não solicitados para registro de rede
 8000928:	482d      	ldr	r0, [pc, #180]	@ (80009e0 <InitialConfigBg95+0x154>)
 800092a:	f7ff ff85 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 800092e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000932:	f000 fc1b 	bl	800116c <HAL_Delay>

    sendATCommand("AT+COPS?\r\n"); // Verificar a seleção de operadora
 8000936:	482b      	ldr	r0, [pc, #172]	@ (80009e4 <InitialConfigBg95+0x158>)
 8000938:	f7ff ff7e 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 800093c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000940:	f000 fc14 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QCSQ\r\n"); // Verificar a tecnologia ativa e a força do sinal
 8000944:	4828      	ldr	r0, [pc, #160]	@ (80009e8 <InitialConfigBg95+0x15c>)
 8000946:	f7ff ff77 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 800094a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800094e:	f000 fc0d 	bl	800116c <HAL_Delay>

    sendATCommand("AT+CREG?;+CEREG?;+CGREG?\r\n"); // Verificar o estado de registro na rede
 8000952:	4826      	ldr	r0, [pc, #152]	@ (80009ec <InitialConfigBg95+0x160>)
 8000954:	f7ff ff70 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000958:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800095c:	f000 fc06 	bl	800116c <HAL_Delay>

    sendATCommand("AT+CGATT=1\r\n"); // Abrir um contexto de dados
 8000960:	4823      	ldr	r0, [pc, #140]	@ (80009f0 <InitialConfigBg95+0x164>)
 8000962:	f7ff ff69 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000966:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800096a:	f000 fbff 	bl	800116c <HAL_Delay>

    sendATCommand("AT+CGPADDR\r\n"); // Verificar o endereço IP alocado
 800096e:	4821      	ldr	r0, [pc, #132]	@ (80009f4 <InitialConfigBg95+0x168>)
 8000970:	f7ff ff62 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000974:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000978:	f000 fbf8 	bl	800116c <HAL_Delay>

    // Receber o IP de resposta e armazenar na variável global
    receiveResponse(response, sizeof(response));
 800097c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000980:	2180      	movs	r1, #128	@ 0x80
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff6e 	bl	8000864 <receiveResponse>
    sscanf(response, "+CGPADDR: 1,\"%15[^\"]", ip); // Extrair o IP da resposta e salvar
 8000988:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800098c:	4a1a      	ldr	r2, [pc, #104]	@ (80009f8 <InitialConfigBg95+0x16c>)
 800098e:	491b      	ldr	r1, [pc, #108]	@ (80009fc <InitialConfigBg95+0x170>)
 8000990:	4618      	mov	r0, r3
 8000992:	f003 fd19 	bl	80043c8 <siscanf>
    HAL_Delay(1000);
 8000996:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800099a:	f000 fbe7 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QPING=1,\"192.168.109.2\"\r\n"); // Realizar um teste de ping
 800099e:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <InitialConfigBg95+0x174>)
 80009a0:	f7ff ff4a 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 80009a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a8:	f000 fbe0 	bl	800116c <HAL_Delay>
}
 80009ac:	bf00      	nop
 80009ae:	37c0      	adds	r7, #192	@ 0xc0
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	08005658 	.word	0x08005658
 80009b8:	08005664 	.word	0x08005664
 80009bc:	08005670 	.word	0x08005670
 80009c0:	0800567c 	.word	0x0800567c
 80009c4:	08005698 	.word	0x08005698
 80009c8:	080056b8 	.word	0x080056b8
 80009cc:	080056fc 	.word	0x080056fc
 80009d0:	20000078 	.word	0x20000078
 80009d4:	08005708 	.word	0x08005708
 80009d8:	08005714 	.word	0x08005714
 80009dc:	08005730 	.word	0x08005730
 80009e0:	0800573c 	.word	0x0800573c
 80009e4:	0800575c 	.word	0x0800575c
 80009e8:	08005768 	.word	0x08005768
 80009ec:	08005774 	.word	0x08005774
 80009f0:	08005790 	.word	0x08005790
 80009f4:	080057a0 	.word	0x080057a0
 80009f8:	20000098 	.word	0x20000098
 80009fc:	080057b0 	.word	0x080057b0
 8000a00:	080057c8 	.word	0x080057c8

08000a04 <ConfigPdpContext>:
void ConfigPdpContext(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0b2      	sub	sp, #200	@ 0xc8
 8000a08:	af02      	add	r7, sp, #8
    char command[64];
    char response[128];

    // Enviar o comando para ativar o contexto PDP
    sendATCommand("AT+QIACT=1\r\n");
 8000a0a:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <ConfigPdpContext+0x68>)
 8000a0c:	f7ff ff14 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000a10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a14:	f000 fbaa 	bl	800116c <HAL_Delay>

    // Verificar se a ativação foi bem-sucedida
    sendATCommand("AT+QIACT?\r\n");
 8000a18:	4815      	ldr	r0, [pc, #84]	@ (8000a70 <ConfigPdpContext+0x6c>)
 8000a1a:	f7ff ff0d 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000a1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a22:	f000 fba3 	bl	800116c <HAL_Delay>

    // Receber a resposta e verificar se contém o IP (verificação básica)
    receiveResponse(response, sizeof(response));
 8000a26:	463b      	mov	r3, r7
 8000a28:	2180      	movs	r1, #128	@ 0x80
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff1a 	bl	8000864 <receiveResponse>
    if (strstr(response, ip)) {
 8000a30:	463b      	mov	r3, r7
 8000a32:	4910      	ldr	r1, [pc, #64]	@ (8000a74 <ConfigPdpContext+0x70>)
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 fcfb 	bl	8004430 <strstr>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00e      	beq.n	8000a5e <ConfigPdpContext+0x5a>
        // Ativação bem-sucedida, o IP foi alocado corretamente
        snprintf(command, sizeof(command), "PDP context ativado com sucesso. APN: %s, IP: %s\r\n", apn, ip);
 8000a40:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <ConfigPdpContext+0x70>)
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <ConfigPdpContext+0x74>)
 8000a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a7c <ConfigPdpContext+0x78>)
 8000a4c:	2140      	movs	r1, #64	@ 0x40
 8000a4e:	f003 fc67 	bl	8004320 <sniprintf>
        sendATCommand(command); // Transmitir a mensagem de sucesso pela UART
 8000a52:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff feee 	bl	8000838 <sendATCommand>
    } else {
        // Erro ao ativar o contexto PDP
        sendATCommand("Erro ao ativar o contexto PDP\r\n");
    }
}
 8000a5c:	e002      	b.n	8000a64 <ConfigPdpContext+0x60>
        sendATCommand("Erro ao ativar o contexto PDP\r\n");
 8000a5e:	4808      	ldr	r0, [pc, #32]	@ (8000a80 <ConfigPdpContext+0x7c>)
 8000a60:	f7ff feea 	bl	8000838 <sendATCommand>
}
 8000a64:	bf00      	nop
 8000a66:	37c0      	adds	r7, #192	@ 0xc0
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	080057e8 	.word	0x080057e8
 8000a70:	080057f8 	.word	0x080057f8
 8000a74:	20000098 	.word	0x20000098
 8000a78:	20000078 	.word	0x20000078
 8000a7c:	08005804 	.word	0x08005804
 8000a80:	08005838 	.word	0x08005838

08000a84 <ConfigMqttContext>:
void ConfigMqttContext() {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    // Enviar comandos de configuração inicial do MQTT via UART
    sendATCommand("AT+QMTCFG=\"version\",0,4\r\n"); // Definir a versão do MQTT como 3.1.1 (versão 4)
 8000a88:	481c      	ldr	r0, [pc, #112]	@ (8000afc <ConfigMqttContext+0x78>)
 8000a8a:	f7ff fed5 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000a8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a92:	f000 fb6b 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n"); // Associar o contexto PDP ao cliente MQTT
 8000a96:	481a      	ldr	r0, [pc, #104]	@ (8000b00 <ConfigMqttContext+0x7c>)
 8000a98:	f7ff fece 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000a9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aa0:	f000 fb64 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QMTCFG=\"ssl\",0,1,0\r\n"); // Habilitar SSL para o contexto MQTT
 8000aa4:	4817      	ldr	r0, [pc, #92]	@ (8000b04 <ConfigMqttContext+0x80>)
 8000aa6:	f7ff fec7 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000aaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aae:	f000 fb5d 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QMTCFG=\"keepalive\",0,0\r\n"); // Configurar o intervalo de keepalive para 0 (sem limite)
 8000ab2:	4815      	ldr	r0, [pc, #84]	@ (8000b08 <ConfigMqttContext+0x84>)
 8000ab4:	f7ff fec0 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000ab8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000abc:	f000 fb56 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QMTCFG=\"session\",0,1\r\n"); // Configurar para manter a sessão ativa após desconexão
 8000ac0:	4812      	ldr	r0, [pc, #72]	@ (8000b0c <ConfigMqttContext+0x88>)
 8000ac2:	f7ff feb9 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000ac6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aca:	f000 fb4f 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QMTCFG=\"timeout\",0,90,0,1\r\n"); // Definir o timeout de 90 segundos
 8000ace:	4810      	ldr	r0, [pc, #64]	@ (8000b10 <ConfigMqttContext+0x8c>)
 8000ad0:	f7ff feb2 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000ad4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad8:	f000 fb48 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QMTCFG=\"will\",0,1,0,1,\"/test/will\",\"Client disconnected unexpectedly\"\r\n"); // Configurar a mensagem de "will" (última vontade)
 8000adc:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <ConfigMqttContext+0x90>)
 8000ade:	f7ff feab 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000ae2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ae6:	f000 fb41 	bl	800116c <HAL_Delay>

    sendATCommand("AT+QMTCFG=\"recv/mode\",0,0,1\r\n"); // Configurar o modo de recebimento
 8000aea:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <ConfigMqttContext+0x94>)
 8000aec:	f7ff fea4 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000af0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000af4:	f000 fb3a 	bl	800116c <HAL_Delay>

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	08005858 	.word	0x08005858
 8000b00:	08005874 	.word	0x08005874
 8000b04:	08005890 	.word	0x08005890
 8000b08:	080058a8 	.word	0x080058a8
 8000b0c:	080058c4 	.word	0x080058c4
 8000b10:	080058e0 	.word	0x080058e0
 8000b14:	08005900 	.word	0x08005900
 8000b18:	0800594c 	.word	0x0800594c

08000b1c <ActivePdp>:
void ActivePdp() {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	@ 0x28
 8000b20:	af00      	add	r7, sp, #0
    // Verifica se a APN está configurada corretamente
    sendATCommand("AT+CGDCONT?\r\n");
 8000b22:	481c      	ldr	r0, [pc, #112]	@ (8000b94 <ActivePdp+0x78>)
 8000b24:	f7ff fe88 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000b28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b2c:	f000 fb1e 	bl	800116c <HAL_Delay>

    // Ativa o contexto PDP (com o CID 1)
    sendATCommand("AT+CGACT=1,1\r\n");
 8000b30:	4819      	ldr	r0, [pc, #100]	@ (8000b98 <ActivePdp+0x7c>)
 8000b32:	f7ff fe81 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000b36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b3a:	f000 fb17 	bl	800116c <HAL_Delay>

    // Verifica se um endereço IP foi atribuído
    sendATCommand("AT+CGPADDR=1\r\n");
 8000b3e:	4817      	ldr	r0, [pc, #92]	@ (8000b9c <ActivePdp+0x80>)
 8000b40:	f7ff fe7a 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000b44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b48:	f000 fb10 	bl	800116c <HAL_Delay>

    // Verifica se a APN e a rede estão devidamente configuradas
    sendATCommand("AT+COPS?\r\n");
 8000b4c:	4814      	ldr	r0, [pc, #80]	@ (8000ba0 <ActivePdp+0x84>)
 8000b4e:	f7ff fe73 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000b52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b56:	f000 fb09 	bl	800116c <HAL_Delay>

    // Tenta desconectar um canal MQTT ocupado e tenta se conectar a outro
    for (int channel = 1; channel <= 5; channel++) {
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b5e:	e010      	b.n	8000b82 <ActivePdp+0x66>
        // Desconecta o canal ocupado
        char command[30];
        sprintf(command, "AT+QMTDISC=%d\r\n", channel);
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b64:	490f      	ldr	r1, [pc, #60]	@ (8000ba4 <ActivePdp+0x88>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fc0e 	bl	8004388 <siprintf>
        sendATCommand(command);
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fe62 	bl	8000838 <sendATCommand>
        HAL_Delay(1000);
 8000b74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b78:	f000 faf8 	bl	800116c <HAL_Delay>
    for (int channel = 1; channel <= 5; channel++) {
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7e:	3301      	adds	r3, #1
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	2b05      	cmp	r3, #5
 8000b86:	ddeb      	ble.n	8000b60 <ActivePdp+0x44>
    }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	@ 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	0800596c 	.word	0x0800596c
 8000b98:	0800597c 	.word	0x0800597c
 8000b9c:	0800598c 	.word	0x0800598c
 8000ba0:	0800575c 	.word	0x0800575c
 8000ba4:	0800599c 	.word	0x0800599c

08000ba8 <MqttConnectAndSubscribe>:
void MqttConnectAndSubscribe() {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    // Abrir conexão com o broker MQTT (usando o canal 3)
    sendATCommand("AT+QMTOPEN=3,\"3.228.101.77\",1883\r\n"); // ou usar o IP "172.31.82.252"
 8000bac:	480b      	ldr	r0, [pc, #44]	@ (8000bdc <MqttConnectAndSubscribe+0x34>)
 8000bae:	f7ff fe43 	bl	8000838 <sendATCommand>
    HAL_Delay(2000); // Aguardar resposta do comando
 8000bb2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000bb6:	f000 fad9 	bl	800116c <HAL_Delay>
    // Conectar ao broker MQTT com ID "teste" e credenciais "pixtest"
    sendATCommand("AT+QMTCONN=3,\"teste\",\"pixtest\",\"pixtest\"\r\n");
 8000bba:	4809      	ldr	r0, [pc, #36]	@ (8000be0 <MqttConnectAndSubscribe+0x38>)
 8000bbc:	f7ff fe3c 	bl	8000838 <sendATCommand>
    HAL_Delay(2000); // Aguardar resposta do comando
 8000bc0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000bc4:	f000 fad2 	bl	800116c <HAL_Delay>
    // Assinar o tópico "test" no nível QoS 0 para receber dados
    sendATCommand("AT+QMTSUB=3,1,\"test\",0\r\n");
 8000bc8:	4806      	ldr	r0, [pc, #24]	@ (8000be4 <MqttConnectAndSubscribe+0x3c>)
 8000bca:	f7ff fe35 	bl	8000838 <sendATCommand>
    HAL_Delay(1000); // Aguardar resposta do comando
 8000bce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bd2:	f000 facb 	bl	800116c <HAL_Delay>

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	080059ac 	.word	0x080059ac
 8000be0:	080059d0 	.word	0x080059d0
 8000be4:	080059fc 	.word	0x080059fc

08000be8 <MqttConfigBeforeConnection>:
void MqttConfigBeforeConnection() {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b090      	sub	sp, #64	@ 0x40
 8000bec:	af00      	add	r7, sp, #0
    // Verificar informações do módulo
    sendATCommand("ATI\r\n");
 8000bee:	4851      	ldr	r0, [pc, #324]	@ (8000d34 <MqttConfigBeforeConnection+0x14c>)
 8000bf0:	f7ff fe22 	bl	8000838 <sendATCommand>
    HAL_Delay(1000);
 8000bf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf8:	f000 fab8 	bl	800116c <HAL_Delay>

    // Verificar o estado de operação do dispositivo
    sendATCommand("AT+CFUN?\r\n");
 8000bfc:	484e      	ldr	r0, [pc, #312]	@ (8000d38 <MqttConfigBeforeConnection+0x150>)
 8000bfe:	f7ff fe1b 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c06:	f000 fab1 	bl	800116c <HAL_Delay>

    // Verificar o modo de varredura de rede
    sendATCommand("AT+QCFG=\"nwscanmode\"\r\n");
 8000c0a:	484c      	ldr	r0, [pc, #304]	@ (8000d3c <MqttConfigBeforeConnection+0x154>)
 8000c0c:	f7ff fe14 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c14:	f000 faaa 	bl	800116c <HAL_Delay>

    // Verificar a sequência de varredura de rede
    sendATCommand("AT+QCFG=\"nwscanseq\"\r\n");
 8000c18:	4849      	ldr	r0, [pc, #292]	@ (8000d40 <MqttConfigBeforeConnection+0x158>)
 8000c1a:	f7ff fe0d 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c22:	f000 faa3 	bl	800116c <HAL_Delay>

    // Verificar o modo IoT
    sendATCommand("AT+QCFG=\"iotopmode\"\r\n");
 8000c26:	4847      	ldr	r0, [pc, #284]	@ (8000d44 <MqttConfigBeforeConnection+0x15c>)
 8000c28:	f7ff fe06 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c2c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c30:	f000 fa9c 	bl	800116c <HAL_Delay>

    // Verificar o domínio de serviço
    sendATCommand("AT+QCFG=\"servicedomain\"\r\n");
 8000c34:	4844      	ldr	r0, [pc, #272]	@ (8000d48 <MqttConfigBeforeConnection+0x160>)
 8000c36:	f7ff fdff 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c3e:	f000 fa95 	bl	800116c <HAL_Delay>

    // Configurar a porta para URC (USB Modem)
    sendATCommand("AT+QURCCFG=\"urcport\",\"usbmodem\"\r\n");
 8000c42:	4842      	ldr	r0, [pc, #264]	@ (8000d4c <MqttConfigBeforeConnection+0x164>)
 8000c44:	f7ff fdf8 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c4c:	f000 fa8e 	bl	800116c <HAL_Delay>

    // Verificar o status de registro na rede
    sendATCommand("AT+CREG?\r\n");
 8000c50:	483f      	ldr	r0, [pc, #252]	@ (8000d50 <MqttConfigBeforeConnection+0x168>)
 8000c52:	f7ff fdf1 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c5a:	f000 fa87 	bl	800116c <HAL_Delay>

    // Verificar o status de registro GPRS
    sendATCommand("AT+CGREG?\r\n");
 8000c5e:	483d      	ldr	r0, [pc, #244]	@ (8000d54 <MqttConfigBeforeConnection+0x16c>)
 8000c60:	f7ff fdea 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c68:	f000 fa80 	bl	800116c <HAL_Delay>

    // Verificar a operadora atual
    sendATCommand("AT+COPS?\r\n");
 8000c6c:	483a      	ldr	r0, [pc, #232]	@ (8000d58 <MqttConfigBeforeConnection+0x170>)
 8000c6e:	f7ff fde3 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c76:	f000 fa79 	bl	800116c <HAL_Delay>

    // Verificar a qualidade do sinal
    sendATCommand("AT+CSQ\r\n");
 8000c7a:	4838      	ldr	r0, [pc, #224]	@ (8000d5c <MqttConfigBeforeConnection+0x174>)
 8000c7c:	f7ff fddc 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c84:	f000 fa72 	bl	800116c <HAL_Delay>

    // Verificar a qualidade do sinal detalhada
    sendATCommand("AT+QCSQ\r\n");
 8000c88:	4835      	ldr	r0, [pc, #212]	@ (8000d60 <MqttConfigBeforeConnection+0x178>)
 8000c8a:	f7ff fdd5 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c92:	f000 fa6b 	bl	800116c <HAL_Delay>

    // Obter informações de rede
    sendATCommand("AT+QNWINFO\r\n");
 8000c96:	4833      	ldr	r0, [pc, #204]	@ (8000d64 <MqttConfigBeforeConnection+0x17c>)
 8000c98:	f7ff fdce 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000c9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ca0:	f000 fa64 	bl	800116c <HAL_Delay>

    // Verificar se o dispositivo está anexado à rede
    sendATCommand("AT+CGATT?\r\n");
 8000ca4:	4830      	ldr	r0, [pc, #192]	@ (8000d68 <MqttConfigBeforeConnection+0x180>)
 8000ca6:	f7ff fdc7 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000caa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cae:	f000 fa5d 	bl	800116c <HAL_Delay>

    // Verificar o status de ativação de contexto PDP
    sendATCommand("AT+CGACT?\r\n");
 8000cb2:	482e      	ldr	r0, [pc, #184]	@ (8000d6c <MqttConfigBeforeConnection+0x184>)
 8000cb4:	f7ff fdc0 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000cb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cbc:	f000 fa56 	bl	800116c <HAL_Delay>

    // Verificar a configuração de contexto PDP
    sendATCommand("AT+CGDCONT?\r\n");
 8000cc0:	482b      	ldr	r0, [pc, #172]	@ (8000d70 <MqttConfigBeforeConnection+0x188>)
 8000cc2:	f7ff fdb9 	bl	8000838 <sendATCommand>
    HAL_Delay(500);
 8000cc6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cca:	f000 fa4f 	bl	800116c <HAL_Delay>

    // Configurar o contexto PDP para o canal MQTT (fazer para todos os canais 0-5)
    for (int i = 0; i <= 5; i++) {
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cd2:	e010      	b.n	8000cf6 <MqttConfigBeforeConnection+0x10e>
        char command[50];
        snprintf(command, sizeof(command), "AT+QMTCFG=\"pdpcid\",%d,1\r\n", i);
 8000cd4:	1d38      	adds	r0, r7, #4
 8000cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cd8:	4a26      	ldr	r2, [pc, #152]	@ (8000d74 <MqttConfigBeforeConnection+0x18c>)
 8000cda:	2132      	movs	r1, #50	@ 0x32
 8000cdc:	f003 fb20 	bl	8004320 <sniprintf>
        sendATCommand(command);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fda8 	bl	8000838 <sendATCommand>
        HAL_Delay(500);
 8000ce8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cec:	f000 fa3e 	bl	800116c <HAL_Delay>
    for (int i = 0; i <= 5; i++) {
 8000cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cf8:	2b05      	cmp	r3, #5
 8000cfa:	ddeb      	ble.n	8000cd4 <MqttConfigBeforeConnection+0xec>
    }

    // Configurar o keepalive MQTT para 3600 segundos (fazer para todos os canais 0-5)
    for (int i = 0; i <= 5; i++) {
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d00:	e010      	b.n	8000d24 <MqttConfigBeforeConnection+0x13c>
        char command[50];
        snprintf(command, sizeof(command), "AT+QMTCFG=\"keepalive\",%d,3600\r\n", i);
 8000d02:	1d38      	adds	r0, r7, #4
 8000d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d06:	4a1c      	ldr	r2, [pc, #112]	@ (8000d78 <MqttConfigBeforeConnection+0x190>)
 8000d08:	2132      	movs	r1, #50	@ 0x32
 8000d0a:	f003 fb09 	bl	8004320 <sniprintf>
        sendATCommand(command);
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fd91 	bl	8000838 <sendATCommand>
        HAL_Delay(500);
 8000d16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d1a:	f000 fa27 	bl	800116c <HAL_Delay>
    for (int i = 0; i <= 5; i++) {
 8000d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d20:	3301      	adds	r3, #1
 8000d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d26:	2b05      	cmp	r3, #5
 8000d28:	ddeb      	ble.n	8000d02 <MqttConfigBeforeConnection+0x11a>
    }
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3740      	adds	r7, #64	@ 0x40
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08005a18 	.word	0x08005a18
 8000d38:	08005a20 	.word	0x08005a20
 8000d3c:	08005a2c 	.word	0x08005a2c
 8000d40:	08005a44 	.word	0x08005a44
 8000d44:	08005a5c 	.word	0x08005a5c
 8000d48:	08005a74 	.word	0x08005a74
 8000d4c:	08005a90 	.word	0x08005a90
 8000d50:	08005ab4 	.word	0x08005ab4
 8000d54:	08005ac0 	.word	0x08005ac0
 8000d58:	0800575c 	.word	0x0800575c
 8000d5c:	08005acc 	.word	0x08005acc
 8000d60:	08005768 	.word	0x08005768
 8000d64:	08005ad8 	.word	0x08005ad8
 8000d68:	08005ae8 	.word	0x08005ae8
 8000d6c:	08005af4 	.word	0x08005af4
 8000d70:	0800596c 	.word	0x0800596c
 8000d74:	08005b00 	.word	0x08005b00
 8000d78:	08005b1c 	.word	0x08005b1c

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <Error_Handler+0x8>

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <HAL_MspInit+0x50>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d92:	4a11      	ldr	r2, [pc, #68]	@ (8000dd8 <HAL_MspInit+0x50>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <HAL_MspInit+0x50>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <HAL_MspInit+0x50>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000daa:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd8 <HAL_MspInit+0x50>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <HAL_MspInit+0x50>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2005      	movs	r0, #5
 8000dc4:	f000 fad1 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000dc8:	2005      	movs	r0, #5
 8000dca:	f000 faea 	bl	80013a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b090      	sub	sp, #64	@ 0x40
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	2234      	movs	r2, #52	@ 0x34
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fb17 	bl	8004420 <memset>
  if(hrtc->Instance==RTC)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a13      	ldr	r2, [pc, #76]	@ (8000e44 <HAL_RTC_MspInit+0x68>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d11f      	bne.n	8000e3c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e00:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fbcd 	bl	80025ac <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000e18:	f7ff ffb0 	bl	8000d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <HAL_RTC_MspInit+0x6c>)
 8000e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e22:	4a09      	ldr	r2, [pc, #36]	@ (8000e48 <HAL_RTC_MspInit+0x6c>)
 8000e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2029      	movs	r0, #41	@ 0x29
 8000e32:	f000 fa9a 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e36:	2029      	movs	r0, #41	@ 0x29
 8000e38:	f000 fab3 	bl	80013a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3740      	adds	r7, #64	@ 0x40
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40002800 	.word	0x40002800
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b096      	sub	sp, #88	@ 0x58
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	2234      	movs	r2, #52	@ 0x34
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 fad7 	bl	8004420 <memset>
  if(huart->Instance==USART2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a23      	ldr	r2, [pc, #140]	@ (8000f04 <HAL_UART_MspInit+0xb8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d13e      	bne.n	8000efa <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fb8f 	bl	80025ac <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e94:	f7ff ff72 	bl	8000d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <HAL_UART_MspInit+0xbc>)
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000f08 <HAL_UART_MspInit+0xbc>)
 8000e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <HAL_UART_MspInit+0xbc>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <HAL_UART_MspInit+0xbc>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb4:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <HAL_UART_MspInit+0xbc>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_UART_MspInit+0xbc>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee6:	f000 faf5 	bl	80014d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2026      	movs	r0, #38	@ 0x26
 8000ef0:	f000 fa3b 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ef4:	2026      	movs	r0, #38	@ 0x26
 8000ef6:	f000 fa54 	bl	80013a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000efa:	bf00      	nop
 8000efc:	3758      	adds	r7, #88	@ 0x58
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40004400 	.word	0x40004400
 8000f08:	40021000 	.word	0x40021000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 f8e3 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <USART2_IRQHandler+0x10>)
 8000f7e:	f002 f9e9 	bl	8003354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000d4 	.word	0x200000d4

08000f8c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <RTC_Alarm_IRQHandler+0x10>)
 8000f92:	f001 ff45 	bl	8002e20 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000a8 	.word	0x200000a8

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	@ (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f003 fa44 	bl	800445c <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20008000 	.word	0x20008000
 8001000:	00000400 	.word	0x00000400
 8001004:	2000015c 	.word	0x2000015c
 8001008:	200002b0 	.word	0x200002b0

0800100c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001068 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001034:	f7ff ffea 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	@ (800106c <LoopForever+0x6>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	@ (8001070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <LoopForever+0xe>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	@ (800107c <LoopForever+0x16>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f003 fa03 	bl	8004468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001062:	f7ff fa85 	bl	8000570 <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001068:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001074:	08005cf0 	.word	0x08005cf0
  ldr r2, =_sbss
 8001078:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800107c:	200002ac 	.word	0x200002ac

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>

08001082 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f961 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f80e 	bl	80010b4 <HAL_InitTick>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	e001      	b.n	80010a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a4:	f7ff fe70 	bl	8000d88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <HAL_InitTick+0x6c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_InitTick+0x70>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <HAL_InitTick+0x6c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f96d 	bl	80013be <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d809      	bhi.n	8001104 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 f937 	bl	800136a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <HAL_InitTick+0x74>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e007      	b.n	8001114 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e004      	b.n	8001114 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e001      	b.n	8001114 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	20000000 	.word	0x20000000
 8001128:	20000004 	.word	0x20000004

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008
 8001150:	20000160 	.word	0x20000160

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000160 	.word	0x20000160

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffde 	bl	8001154 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4907      	ldr	r1, [pc, #28]	@ (8001250 <__NVIC_EnableIRQ+0x38>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	@ (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	@ (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	@ 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	@ 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff8e 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff29 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff3e 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff8e 	bl	80012a8 <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff31 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffa2 	bl	8001310 <SysTick_Config>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d008      	beq.n	8001400 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2204      	movs	r2, #4
 80013f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e022      	b.n	8001446 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 020e 	bic.w	r2, r2, #14
 800140e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0201 	bic.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	f003 021c 	and.w	r2, r3, #28
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f202 	lsl.w	r2, r1, r2
 8001432:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d005      	beq.n	8001476 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2204      	movs	r2, #4
 800146e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e029      	b.n	80014ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 020e 	bic.w	r2, r2, #14
 8001484:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f003 021c 	and.w	r2, r3, #28
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	2101      	movs	r1, #1
 80014a4:	fa01 f202 	lsl.w	r2, r1, r2
 80014a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	4798      	blx	r3
    }
  }
  return status;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	e14e      	b.n	8001782 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8140 	beq.w	800177c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d005      	beq.n	8001514 <HAL_GPIO_Init+0x40>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d130      	bne.n	8001576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154a:	2201      	movs	r2, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 0201 	and.w	r2, r3, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b03      	cmp	r3, #3
 8001580:	d017      	beq.n	80015b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d123      	bne.n	8001606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	6939      	ldr	r1, [r7, #16]
 8001602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0203 	and.w	r2, r3, #3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 809a 	beq.w	800177c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001648:	4b55      	ldr	r3, [pc, #340]	@ (80017a0 <HAL_GPIO_Init+0x2cc>)
 800164a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164c:	4a54      	ldr	r2, [pc, #336]	@ (80017a0 <HAL_GPIO_Init+0x2cc>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6613      	str	r3, [r2, #96]	@ 0x60
 8001654:	4b52      	ldr	r3, [pc, #328]	@ (80017a0 <HAL_GPIO_Init+0x2cc>)
 8001656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001660:	4a50      	ldr	r2, [pc, #320]	@ (80017a4 <HAL_GPIO_Init+0x2d0>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800168a:	d013      	beq.n	80016b4 <HAL_GPIO_Init+0x1e0>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a46      	ldr	r2, [pc, #280]	@ (80017a8 <HAL_GPIO_Init+0x2d4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d00d      	beq.n	80016b0 <HAL_GPIO_Init+0x1dc>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a45      	ldr	r2, [pc, #276]	@ (80017ac <HAL_GPIO_Init+0x2d8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d007      	beq.n	80016ac <HAL_GPIO_Init+0x1d8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a44      	ldr	r2, [pc, #272]	@ (80017b0 <HAL_GPIO_Init+0x2dc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_GPIO_Init+0x1d4>
 80016a4:	2303      	movs	r3, #3
 80016a6:	e006      	b.n	80016b6 <HAL_GPIO_Init+0x1e2>
 80016a8:	2307      	movs	r3, #7
 80016aa:	e004      	b.n	80016b6 <HAL_GPIO_Init+0x1e2>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e002      	b.n	80016b6 <HAL_GPIO_Init+0x1e2>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <HAL_GPIO_Init+0x1e2>
 80016b4:	2300      	movs	r3, #0
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	f002 0203 	and.w	r2, r2, #3
 80016bc:	0092      	lsls	r2, r2, #2
 80016be:	4093      	lsls	r3, r2
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016c6:	4937      	ldr	r1, [pc, #220]	@ (80017a4 <HAL_GPIO_Init+0x2d0>)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d4:	4b37      	ldr	r3, [pc, #220]	@ (80017b4 <HAL_GPIO_Init+0x2e0>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016f8:	4a2e      	ldr	r2, [pc, #184]	@ (80017b4 <HAL_GPIO_Init+0x2e0>)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016fe:	4b2d      	ldr	r3, [pc, #180]	@ (80017b4 <HAL_GPIO_Init+0x2e0>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001722:	4a24      	ldr	r2, [pc, #144]	@ (80017b4 <HAL_GPIO_Init+0x2e0>)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <HAL_GPIO_Init+0x2e0>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800174c:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <HAL_GPIO_Init+0x2e0>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001752:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <HAL_GPIO_Init+0x2e0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001776:	4a0f      	ldr	r2, [pc, #60]	@ (80017b4 <HAL_GPIO_Init+0x2e0>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	f47f aea9 	bne.w	80014e4 <HAL_GPIO_Init+0x10>
  }
}
 8001792:	bf00      	nop
 8001794:	bf00      	nop
 8001796:	371c      	adds	r7, #28
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	48000400 	.word	0x48000400
 80017ac:	48000800 	.word	0x48000800
 80017b0:	48000c00 	.word	0x48000c00
 80017b4:	40010400 	.word	0x40010400

080017b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40007000 	.word	0x40007000

080017d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40007000 	.word	0x40007000

080017f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001802:	d130      	bne.n	8001866 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001804:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800180c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001810:	d038      	beq.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001812:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800181a:	4a1e      	ldr	r2, [pc, #120]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001820:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001822:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2232      	movs	r2, #50	@ 0x32
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	4a1b      	ldr	r2, [pc, #108]	@ (800189c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0c9b      	lsrs	r3, r3, #18
 8001834:	3301      	adds	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001838:	e002      	b.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3b01      	subs	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800184c:	d102      	bne.n	8001854 <HAL_PWREx_ControlVoltageScaling+0x60>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f2      	bne.n	800183a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800185c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001860:	d110      	bne.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e00f      	b.n	8001886 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800186e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001872:	d007      	beq.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800187c:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001882:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40007000 	.word	0x40007000
 8001898:	20000000 	.word	0x20000000
 800189c:	431bde83 	.word	0x431bde83

080018a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f000 bc4f 	b.w	8002152 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b4:	4b97      	ldr	r3, [pc, #604]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018be:	4b95      	ldr	r3, [pc, #596]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80e6 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <HAL_RCC_OscConfig+0x4c>
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	f040 808d 	bne.w	80019fe <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	f040 8089 	bne.w	80019fe <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ec:	4b89      	ldr	r3, [pc, #548]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_RCC_OscConfig+0x66>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	f000 bc26 	b.w	8002152 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800190a:	4b82      	ldr	r3, [pc, #520]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_RCC_OscConfig+0x80>
 8001916:	4b7f      	ldr	r3, [pc, #508]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800191e:	e005      	b.n	800192c <HAL_RCC_OscConfig+0x8c>
 8001920:	4b7c      	ldr	r3, [pc, #496]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800192c:	4293      	cmp	r3, r2
 800192e:	d224      	bcs.n	800197a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fdd9 	bl	80024ec <RCC_SetFlashLatencyFromMSIRange>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	f000 bc06 	b.w	8002152 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001946:	4b73      	ldr	r3, [pc, #460]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a72      	ldr	r2, [pc, #456]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b70      	ldr	r3, [pc, #448]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	496d      	ldr	r1, [pc, #436]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001964:	4b6b      	ldr	r3, [pc, #428]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	4968      	ldr	r1, [pc, #416]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	e025      	b.n	80019c6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800197a:	4b66      	ldr	r3, [pc, #408]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a65      	ldr	r2, [pc, #404]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b63      	ldr	r3, [pc, #396]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	4960      	ldr	r1, [pc, #384]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001998:	4b5e      	ldr	r3, [pc, #376]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	495b      	ldr	r1, [pc, #364]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fd98 	bl	80024ec <RCC_SetFlashLatencyFromMSIRange>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e3c5      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019c6:	f000 fccd 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b51      	ldr	r3, [pc, #324]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	4950      	ldr	r1, [pc, #320]	@ (8001b18 <HAL_RCC_OscConfig+0x278>)
 80019d8:	5ccb      	ldrb	r3, [r1, r3]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	4a4e      	ldr	r2, [pc, #312]	@ (8001b1c <HAL_RCC_OscConfig+0x27c>)
 80019e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001b20 <HAL_RCC_OscConfig+0x280>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fb62 	bl	80010b4 <HAL_InitTick>
 80019f0:	4603      	mov	r3, r0
 80019f2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d052      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	e3a9      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d032      	beq.n	8001a6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a06:	4b43      	ldr	r3, [pc, #268]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a42      	ldr	r2, [pc, #264]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fb9f 	bl	8001154 <HAL_GetTick>
 8001a16:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fb9b 	bl	8001154 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e392      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a2c:	4b39      	ldr	r3, [pc, #228]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a38:	4b36      	ldr	r3, [pc, #216]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a35      	ldr	r2, [pc, #212]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b33      	ldr	r3, [pc, #204]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	4930      	ldr	r1, [pc, #192]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a56:	4b2f      	ldr	r3, [pc, #188]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	492b      	ldr	r1, [pc, #172]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
 8001a6a:	e01a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a6c:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a28      	ldr	r2, [pc, #160]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fb6c 	bl	8001154 <HAL_GetTick>
 8001a7c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a80:	f7ff fb68 	bl	8001154 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e35f      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a92:	4b20      	ldr	r3, [pc, #128]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x1e0>
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d073      	beq.n	8001b96 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x220>
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d10b      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d063      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2f4>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d15f      	bne.n	8001b94 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e33c      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae0:	d106      	bne.n	8001af0 <HAL_RCC_OscConfig+0x250>
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e025      	b.n	8001b3c <HAL_RCC_OscConfig+0x29c>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af8:	d114      	bne.n	8001b24 <HAL_RCC_OscConfig+0x284>
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a02      	ldr	r2, [pc, #8]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e013      	b.n	8001b3c <HAL_RCC_OscConfig+0x29c>
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08005b48 	.word	0x08005b48
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004
 8001b24:	4b8f      	ldr	r3, [pc, #572]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a8e      	ldr	r2, [pc, #568]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b8c      	ldr	r3, [pc, #560]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a8b      	ldr	r2, [pc, #556]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff fb06 	bl	8001154 <HAL_GetTick>
 8001b48:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fb02 	bl	8001154 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e2f9      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5e:	4b81      	ldr	r3, [pc, #516]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x2ac>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff faf2 	bl	8001154 <HAL_GetTick>
 8001b70:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff faee 	bl	8001154 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	@ 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e2e5      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b86:	4b77      	ldr	r3, [pc, #476]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x2d4>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d060      	beq.n	8001c64 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x314>
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d119      	bne.n	8001be2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d116      	bne.n	8001be2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb4:	4b6b      	ldr	r3, [pc, #428]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_OscConfig+0x32c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e2c2      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bcc:	4b65      	ldr	r3, [pc, #404]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	061b      	lsls	r3, r3, #24
 8001bda:	4962      	ldr	r1, [pc, #392]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be0:	e040      	b.n	8001c64 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d023      	beq.n	8001c32 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bea:	4b5e      	ldr	r3, [pc, #376]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a5d      	ldr	r2, [pc, #372]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7ff faad 	bl	8001154 <HAL_GetTick>
 8001bfa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7ff faa9 	bl	8001154 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e2a0      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c10:	4b54      	ldr	r3, [pc, #336]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4b51      	ldr	r3, [pc, #324]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	061b      	lsls	r3, r3, #24
 8001c2a:	494e      	ldr	r1, [pc, #312]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
 8001c30:	e018      	b.n	8001c64 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c32:	4b4c      	ldr	r3, [pc, #304]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a4b      	ldr	r2, [pc, #300]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fa89 	bl	8001154 <HAL_GetTick>
 8001c42:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c46:	f7ff fa85 	bl	8001154 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e27c      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c58:	4b42      	ldr	r3, [pc, #264]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8082 	beq.w	8001d76 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d05f      	beq.n	8001d3a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c80:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d037      	beq.n	8001d00 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e254      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01b      	beq.n	8001cea <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cc2:	f7ff fa47 	bl	8001154 <HAL_GetTick>
 8001cc6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff fa43 	bl	8001154 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b11      	cmp	r3, #17
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e23a      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cdc:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1ef      	bne.n	8001cca <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001cea:	4b1e      	ldr	r3, [pc, #120]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf0:	f023 0210 	bic.w	r2, r3, #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	491a      	ldr	r1, [pc, #104]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d00:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d06:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d10:	f7ff fa20 	bl	8001154 <HAL_GetTick>
 8001d14:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff fa1c 	bl	8001154 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b11      	cmp	r3, #17
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e213      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ef      	beq.n	8001d18 <HAL_RCC_OscConfig+0x478>
 8001d38:	e01d      	b.n	8001d76 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d40:	4a08      	ldr	r2, [pc, #32]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fa03 	bl	8001154 <HAL_GetTick>
 8001d4e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d52:	f7ff f9ff 	bl	8001154 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b11      	cmp	r3, #17
 8001d5e:	d903      	bls.n	8001d68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e1f6      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
 8001d64:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d68:	4ba9      	ldr	r3, [pc, #676]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ed      	bne.n	8001d52 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80bd 	beq.w	8001efe <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d8a:	4ba1      	ldr	r3, [pc, #644]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10e      	bne.n	8001db4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	4b9e      	ldr	r3, [pc, #632]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	4a9d      	ldr	r2, [pc, #628]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001da2:	4b9b      	ldr	r3, [pc, #620]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db4:	4b97      	ldr	r3, [pc, #604]	@ (8002014 <HAL_RCC_OscConfig+0x774>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d118      	bne.n	8001df2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc0:	4b94      	ldr	r3, [pc, #592]	@ (8002014 <HAL_RCC_OscConfig+0x774>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a93      	ldr	r2, [pc, #588]	@ (8002014 <HAL_RCC_OscConfig+0x774>)
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f9c2 	bl	8001154 <HAL_GetTick>
 8001dd0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7ff f9be 	bl	8001154 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1b5      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de6:	4b8b      	ldr	r3, [pc, #556]	@ (8002014 <HAL_RCC_OscConfig+0x774>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d02c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001dfe:	4b84      	ldr	r3, [pc, #528]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e04:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e10:	497f      	ldr	r1, [pc, #508]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d010      	beq.n	8001e46 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e24:	4b7a      	ldr	r3, [pc, #488]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e2a:	4a79      	ldr	r2, [pc, #484]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e34:	4b76      	ldr	r3, [pc, #472]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3a:	4a75      	ldr	r2, [pc, #468]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e44:	e018      	b.n	8001e78 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e46:	4b72      	ldr	r3, [pc, #456]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4c:	4a70      	ldr	r2, [pc, #448]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e56:	e00f      	b.n	8001e78 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e58:	4b6d      	ldr	r3, [pc, #436]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e68:	4b69      	ldr	r3, [pc, #420]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6e:	4a68      	ldr	r2, [pc, #416]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d016      	beq.n	8001eae <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e80:	f7ff f968 	bl	8001154 <HAL_GetTick>
 8001e84:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e88:	f7ff f964 	bl	8001154 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e159      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ed      	beq.n	8001e88 <HAL_RCC_OscConfig+0x5e8>
 8001eac:	e01d      	b.n	8001eea <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7ff f951 	bl	8001154 <HAL_GetTick>
 8001eb2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff f94d 	bl	8001154 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e142      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ecc:	4b50      	ldr	r3, [pc, #320]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ed      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001eda:	4b4d      	ldr	r3, [pc, #308]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee0:	4a4b      	ldr	r2, [pc, #300]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001ee2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ee6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d105      	bne.n	8001efe <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	4b47      	ldr	r3, [pc, #284]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	4a46      	ldr	r2, [pc, #280]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d03c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01c      	beq.n	8001f4c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f12:	4b3f      	ldr	r3, [pc, #252]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f18:	4a3d      	ldr	r2, [pc, #244]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f22:	f7ff f917 	bl	8001154 <HAL_GetTick>
 8001f26:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f2a:	f7ff f913 	bl	8001154 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e10a      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f3c:	4b34      	ldr	r3, [pc, #208]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0ef      	beq.n	8001f2a <HAL_RCC_OscConfig+0x68a>
 8001f4a:	e01b      	b.n	8001f84 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f4c:	4b30      	ldr	r3, [pc, #192]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f52:	4a2f      	ldr	r2, [pc, #188]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f8fa 	bl	8001154 <HAL_GetTick>
 8001f60:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f64:	f7ff f8f6 	bl	8001154 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e0ed      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f76:	4b26      	ldr	r3, [pc, #152]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ef      	bne.n	8001f64 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80e1 	beq.w	8002150 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	f040 80b5 	bne.w	8002102 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f003 0203 	and.w	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d124      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d11b      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d113      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	085b      	lsrs	r3, r3, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d05f      	beq.n	80020b6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d05a      	beq.n	80020b2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ffc:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a03      	ldr	r2, [pc, #12]	@ (8002010 <HAL_RCC_OscConfig+0x770>)
 8002002:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002006:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002008:	f7ff f8a4 	bl	8001154 <HAL_GetTick>
 800200c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200e:	e00c      	b.n	800202a <HAL_RCC_OscConfig+0x78a>
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff f89c 	bl	8001154 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e093      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202a:	4b4c      	ldr	r3, [pc, #304]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002036:	4b49      	ldr	r3, [pc, #292]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	4b49      	ldr	r3, [pc, #292]	@ (8002160 <HAL_RCC_OscConfig+0x8c0>)
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002046:	3a01      	subs	r2, #1
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	4311      	orrs	r1, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002050:	0212      	lsls	r2, r2, #8
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002058:	0852      	lsrs	r2, r2, #1
 800205a:	3a01      	subs	r2, #1
 800205c:	0552      	lsls	r2, r2, #21
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002064:	0852      	lsrs	r2, r2, #1
 8002066:	3a01      	subs	r2, #1
 8002068:	0652      	lsls	r2, r2, #25
 800206a:	430a      	orrs	r2, r1
 800206c:	493b      	ldr	r1, [pc, #236]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002072:	4b3a      	ldr	r3, [pc, #232]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a39      	ldr	r2, [pc, #228]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 8002078:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800207c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800207e:	4b37      	ldr	r3, [pc, #220]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	4a36      	ldr	r2, [pc, #216]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 8002084:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002088:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800208a:	f7ff f863 	bl	8001154 <HAL_GetTick>
 800208e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff f85f 	bl	8001154 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e056      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a4:	4b2d      	ldr	r3, [pc, #180]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b0:	e04e      	b.n	8002150 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e04d      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	4b29      	ldr	r3, [pc, #164]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d146      	bne.n	8002150 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020c2:	4b26      	ldr	r3, [pc, #152]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a25      	ldr	r2, [pc, #148]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 80020c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020cc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	4a22      	ldr	r2, [pc, #136]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 80020d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020d8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020da:	f7ff f83b 	bl	8001154 <HAL_GetTick>
 80020de:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e2:	f7ff f837 	bl	8001154 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e02e      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f4:	4b19      	ldr	r3, [pc, #100]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x842>
 8002100:	e026      	b.n	8002150 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d021      	beq.n	800214c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	4b14      	ldr	r3, [pc, #80]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a13      	ldr	r2, [pc, #76]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 800210e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff f81e 	bl	8001154 <HAL_GetTick>
 8002118:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff f81a 	bl	8001154 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e011      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212e:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800213a:	4b08      	ldr	r3, [pc, #32]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	4a07      	ldr	r2, [pc, #28]	@ (800215c <HAL_RCC_OscConfig+0x8bc>)
 8002140:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8002144:	f023 0303 	bic.w	r3, r3, #3
 8002148:	60d3      	str	r3, [r2, #12]
 800214a:	e001      	b.n	8002150 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3728      	adds	r7, #40	@ 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	f99f808c 	.word	0xf99f808c

08002164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0e7      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b75      	ldr	r3, [pc, #468]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d910      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b72      	ldr	r3, [pc, #456]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	4970      	ldr	r1, [pc, #448]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b6e      	ldr	r3, [pc, #440]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0cf      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4b66      	ldr	r3, [pc, #408]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d908      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b63      	ldr	r3, [pc, #396]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4960      	ldr	r1, [pc, #384]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d04c      	beq.n	800227c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d121      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0a6      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002202:	4b54      	ldr	r3, [pc, #336]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d115      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e09a      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800221a:	4b4e      	ldr	r3, [pc, #312]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e08e      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222a:	4b4a      	ldr	r3, [pc, #296]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e086      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b46      	ldr	r3, [pc, #280]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4943      	ldr	r1, [pc, #268]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800224c:	f7fe ff82 	bl	8001154 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7fe ff7e 	bl	8001154 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e06e      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b3a      	ldr	r3, [pc, #232]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	4b31      	ldr	r3, [pc, #196]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002294:	429a      	cmp	r2, r3
 8002296:	d208      	bcs.n	80022aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002298:	4b2e      	ldr	r3, [pc, #184]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	492b      	ldr	r1, [pc, #172]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022aa:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d210      	bcs.n	80022da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b8:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 0207 	bic.w	r2, r3, #7
 80022c0:	4923      	ldr	r1, [pc, #140]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c8:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e036      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	4918      	ldr	r1, [pc, #96]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002304:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4910      	ldr	r1, [pc, #64]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002318:	f000 f824 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	490b      	ldr	r1, [pc, #44]	@ (8002358 <HAL_RCC_ClockConfig+0x1f4>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	4a09      	ldr	r2, [pc, #36]	@ (800235c <HAL_RCC_ClockConfig+0x1f8>)
 8002336:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002338:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_ClockConfig+0x1fc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe feb9 	bl	80010b4 <HAL_InitTick>
 8002342:	4603      	mov	r3, r0
 8002344:	72fb      	strb	r3, [r7, #11]

  return status;
 8002346:	7afb      	ldrb	r3, [r7, #11]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40022000 	.word	0x40022000
 8002354:	40021000 	.word	0x40021000
 8002358:	08005b48 	.word	0x08005b48
 800235c:	20000000 	.word	0x20000000
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002372:	4b3e      	ldr	r3, [pc, #248]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800237c:	4b3b      	ldr	r3, [pc, #236]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x34>
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d121      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d11e      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002398:	4b34      	ldr	r3, [pc, #208]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023a4:	4b31      	ldr	r3, [pc, #196]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e005      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023b4:	4b2d      	ldr	r3, [pc, #180]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10d      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023dc:	4b25      	ldr	r3, [pc, #148]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x110>)
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	e004      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023e8:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d134      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023f2:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d003      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0xa6>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d003      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0xac>
 8002408:	e005      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800240a:	4b1a      	ldr	r3, [pc, #104]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x110>)
 800240c:	617b      	str	r3, [r7, #20]
      break;
 800240e:	e005      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x114>)
 8002412:	617b      	str	r3, [r7, #20]
      break;
 8002414:	e002      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	617b      	str	r3, [r7, #20]
      break;
 800241a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800241c:	4b13      	ldr	r3, [pc, #76]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	3301      	adds	r3, #1
 8002428:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	fb03 f202 	mul.w	r2, r3, r2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	0e5b      	lsrs	r3, r3, #25
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	3301      	adds	r3, #1
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800245c:	69bb      	ldr	r3, [r7, #24]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	@ 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	08005b60 	.word	0x08005b60
 8002474:	00f42400 	.word	0x00f42400
 8002478:	007a1200 	.word	0x007a1200

0800247c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <HAL_RCC_GetHCLKFreq+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000000 	.word	0x20000000

08002494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002498:	f7ff fff0 	bl	800247c <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4904      	ldr	r1, [pc, #16]	@ (80024bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08005b58 	.word	0x08005b58

080024c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024c4:	f7ff ffda 	bl	800247c <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0adb      	lsrs	r3, r3, #11
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4904      	ldr	r1, [pc, #16]	@ (80024e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08005b58 	.word	0x08005b58

080024ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024f8:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002504:	f7ff f968 	bl	80017d8 <HAL_PWREx_GetVoltageRange>
 8002508:	6178      	str	r0, [r7, #20]
 800250a:	e014      	b.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800250c:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	4a24      	ldr	r2, [pc, #144]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002516:	6593      	str	r3, [r2, #88]	@ 0x58
 8002518:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002524:	f7ff f958 	bl	80017d8 <HAL_PWREx_GetVoltageRange>
 8002528:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	4a1d      	ldr	r2, [pc, #116]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002534:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800253c:	d10b      	bne.n	8002556 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b80      	cmp	r3, #128	@ 0x80
 8002542:	d919      	bls.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2ba0      	cmp	r3, #160	@ 0xa0
 8002548:	d902      	bls.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800254a:	2302      	movs	r3, #2
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	e013      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002550:	2301      	movs	r3, #1
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	e010      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b80      	cmp	r3, #128	@ 0x80
 800255a:	d902      	bls.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800255c:	2303      	movs	r3, #3
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e00a      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b80      	cmp	r3, #128	@ 0x80
 8002566:	d102      	bne.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002568:	2302      	movs	r3, #2
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e004      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b70      	cmp	r3, #112	@ 0x70
 8002572:	d101      	bne.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002574:	2301      	movs	r3, #1
 8002576:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 0207 	bic.w	r2, r3, #7
 8002580:	4909      	ldr	r1, [pc, #36]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40022000 	.word	0x40022000

080025ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025b4:	2300      	movs	r3, #0
 80025b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025b8:	2300      	movs	r3, #0
 80025ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 809e 	beq.w	8002706 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025ce:	4b46      	ldr	r3, [pc, #280]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x32>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80025de:	2300      	movs	r3, #0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00d      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e4:	4b40      	ldr	r3, [pc, #256]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e8:	4a3f      	ldr	r2, [pc, #252]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f0:	4b3d      	ldr	r3, [pc, #244]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fc:	2301      	movs	r3, #1
 80025fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002600:	4b3a      	ldr	r3, [pc, #232]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a39      	ldr	r2, [pc, #228]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800260a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800260c:	f7fe fda2 	bl	8001154 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002612:	e009      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002614:	f7fe fd9e 	bl	8001154 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d902      	bls.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	74fb      	strb	r3, [r7, #19]
        break;
 8002626:	e005      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002628:	4b30      	ldr	r3, [pc, #192]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ef      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002634:	7cfb      	ldrb	r3, [r7, #19]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d15a      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800263a:	4b2b      	ldr	r3, [pc, #172]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002640:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002644:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01e      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	429a      	cmp	r2, r3
 8002654:	d019      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002656:	4b24      	ldr	r3, [pc, #144]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002660:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002662:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002668:	4a1f      	ldr	r2, [pc, #124]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800266a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800266e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002672:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002678:	4a1b      	ldr	r2, [pc, #108]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800267a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800267e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002682:	4a19      	ldr	r2, [pc, #100]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d016      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fd5e 	bl	8001154 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269a:	e00b      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe fd5a 	bl	8001154 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d902      	bls.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	74fb      	strb	r3, [r7, #19]
            break;
 80026b2:	e006      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0ec      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	4904      	ldr	r1, [pc, #16]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026de:	e009      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	74bb      	strb	r3, [r7, #18]
 80026e4:	e006      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f4:	7c7b      	ldrb	r3, [r7, #17]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	4b6e      	ldr	r3, [pc, #440]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	4a6d      	ldr	r2, [pc, #436]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002704:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002712:	4b68      	ldr	r3, [pc, #416]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002718:	f023 0203 	bic.w	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4964      	ldr	r1, [pc, #400]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002734:	4b5f      	ldr	r3, [pc, #380]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273a:	f023 020c 	bic.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	495c      	ldr	r1, [pc, #368]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002756:	4b57      	ldr	r3, [pc, #348]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4953      	ldr	r1, [pc, #332]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002778:	4b4e      	ldr	r3, [pc, #312]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	494b      	ldr	r1, [pc, #300]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800279a:	4b46      	ldr	r3, [pc, #280]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4942      	ldr	r1, [pc, #264]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027bc:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	493a      	ldr	r1, [pc, #232]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027de:	4b35      	ldr	r3, [pc, #212]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	4931      	ldr	r1, [pc, #196]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002800:	4b2c      	ldr	r3, [pc, #176]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002806:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	4929      	ldr	r1, [pc, #164]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002822:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002828:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	4920      	ldr	r1, [pc, #128]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d015      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002844:	4b1b      	ldr	r3, [pc, #108]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002852:	4918      	ldr	r1, [pc, #96]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002862:	d105      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002864:	4b13      	ldr	r3, [pc, #76]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800286a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800286e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d015      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800287c:	4b0d      	ldr	r3, [pc, #52]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	490a      	ldr	r1, [pc, #40]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800289a:	d105      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800289c:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000

080028b8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000

080028d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d07f      	beq.n	80029ea <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fa6c 	bl	8000ddc <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800290a:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002914:	4b37      	ldr	r3, [pc, #220]	@ (80029f4 <HAL_RTC_Init+0x11c>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b10      	cmp	r3, #16
 800291e:	d05b      	beq.n	80029d8 <HAL_RTC_Init+0x100>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	22ca      	movs	r2, #202	@ 0xca
 8002926:	625a      	str	r2, [r3, #36]	@ 0x24
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2253      	movs	r2, #83	@ 0x53
 800292e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fad1 	bl	8002ed8 <RTC_EnterInitMode>
 8002936:	4603      	mov	r3, r0
 8002938:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d127      	bne.n	8002990 <HAL_RTC_Init+0xb8>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800294e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002952:	6193      	str	r3, [r2, #24]
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6999      	ldr	r1, [r3, #24]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6912      	ldr	r2, [r2, #16]
 800297a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6919      	ldr	r1, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	041a      	lsls	r2, r3, #16
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fad7 	bl	8002f44 <RTC_ExitInitMode>
 8002996:	4603      	mov	r3, r0
 8002998:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d116      	bne.n	80029ce <HAL_RTC_Init+0xf6>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 80029ae:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6999      	ldr	r1, [r3, #24]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	22ff      	movs	r2, #255	@ 0xff
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80029d6:	e001      	b.n	80029dc <HAL_RTC_Init+0x104>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <HAL_RTC_Init+0x112>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    }
  }

  return status;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40002800 	.word	0x40002800

080029f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_RTC_SetTime+0x1a>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e08b      	b.n	8002b2a <HAL_RTC_SetTime+0x132>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	22ca      	movs	r2, #202	@ 0xca
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2253      	movs	r2, #83	@ 0x53
 8002a30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fa50 	bl	8002ed8 <RTC_EnterInitMode>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d163      	bne.n	8002b0a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d126      	bne.n	8002a96 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 faad 	bl	8002fc0 <RTC_ByteToBcd2>
 8002a66:	4603      	mov	r3, r0
 8002a68:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	785b      	ldrb	r3, [r3, #1]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 faa6 	bl	8002fc0 <RTC_ByteToBcd2>
 8002a74:	4603      	mov	r3, r0
 8002a76:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a78:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	789b      	ldrb	r3, [r3, #2]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fa9e 	bl	8002fc0 <RTC_ByteToBcd2>
 8002a84:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a86:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	78db      	ldrb	r3, [r3, #3]
 8002a8e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e018      	b.n	8002ac8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	785b      	ldrb	r3, [r3, #1]
 8002ab4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ab6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002abc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	78db      	ldrb	r3, [r3, #3]
 8002ac2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002ad2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002ad6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ae6:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6999      	ldr	r1, [r3, #24]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fa1f 	bl	8002f44 <RTC_ExitInitMode>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	22ff      	movs	r2, #255	@ 0xff
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d103      	bne.n	8002b20 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return status;
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd90      	pop	{r4, r7, pc}

08002b32 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b32:	b590      	push	{r4, r7, lr}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_RTC_SetDate+0x1a>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e075      	b.n	8002c38 <HAL_RTC_SetDate+0x106>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10e      	bne.n	8002b80 <HAL_RTC_SetDate+0x4e>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	785b      	ldrb	r3, [r3, #1]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	f023 0310 	bic.w	r3, r3, #16
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	330a      	adds	r3, #10
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11c      	bne.n	8002bc0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	78db      	ldrb	r3, [r3, #3]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fa18 	bl	8002fc0 <RTC_ByteToBcd2>
 8002b90:	4603      	mov	r3, r0
 8002b92:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	785b      	ldrb	r3, [r3, #1]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fa11 	bl	8002fc0 <RTC_ByteToBcd2>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002ba2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	789b      	ldrb	r3, [r3, #2]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fa09 	bl	8002fc0 <RTC_ByteToBcd2>
 8002bae:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002bb0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e00e      	b.n	8002bde <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	78db      	ldrb	r3, [r3, #3]
 8002bc4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	785b      	ldrb	r3, [r3, #1]
 8002bca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002bcc:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002bd2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	22ca      	movs	r2, #202	@ 0xca
 8002be4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2253      	movs	r2, #83	@ 0x53
 8002bec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f972 	bl	8002ed8 <RTC_EnterInitMode>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c08:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002c0c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f998 	bl	8002f44 <RTC_ExitInitMode>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	22ff      	movs	r2, #255	@ 0xff
 8002c1e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return status;
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd90      	pop	{r4, r7, pc}

08002c40 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_RTC_SetAlarm_IT+0x1a>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0db      	b.n	8002e12 <HAL_RTC_SetAlarm_IT+0x1d2>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  if (Format == RTC_FORMAT_BIN)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d137      	bne.n	8002ce0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2200      	movs	r2, #0
 8002c82:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f999 	bl	8002fc0 <RTC_ByteToBcd2>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	785b      	ldrb	r3, [r3, #1]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f992 	bl	8002fc0 <RTC_ByteToBcd2>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ca0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	789b      	ldrb	r3, [r3, #2]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f98a 	bl	8002fc0 <RTC_ByteToBcd2>
 8002cac:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002cae:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	78db      	ldrb	r3, [r3, #3]
 8002cb6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002cb8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f97c 	bl	8002fc0 <RTC_ByteToBcd2>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002ccc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002cd4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e023      	b.n	8002d28 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d00:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002d06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	78db      	ldrb	r3, [r3, #3]
 8002d0c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002d0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d16:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002d18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002d1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	22ca      	movs	r2, #202	@ 0xca
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2253      	movs	r2, #83	@ 0x53
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d4c:	d124      	bne.n	8002d98 <HAL_RTC_SetAlarm_IT+0x158>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d5c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2201      	movs	r2, #1
 8002d64:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d84:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d94:	619a      	str	r2, [r3, #24]
 8002d96:	e023      	b.n	8002de0 <HAL_RTC_SetAlarm_IT+0x1a0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002da6:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2202      	movs	r2, #2
 8002dae:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dce:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dde:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002de0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e1c <HAL_RTC_SetAlarm_IT+0x1dc>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e1c <HAL_RTC_SetAlarm_IT+0x1dc>)
 8002de6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dea:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <HAL_RTC_SetAlarm_IT+0x1dc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e1c <HAL_RTC_SetAlarm_IT+0x1dc>)
 8002df2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	22ff      	movs	r2, #255	@ 0xff
 8002dfe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd90      	pop	{r4, r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40010400 	.word	0x40010400

08002e20 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002e28:	4b13      	ldr	r3, [pc, #76]	@ (8002e78 <HAL_RTC_AlarmIRQHandler+0x58>)
 8002e2a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002e2e:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2201      	movs	r2, #1
 8002e48:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f816 	bl	8002e7c <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d006      	beq.n	8002e68 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f8cc 	bl	8003000 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40010400 	.word	0x40010400

08002e7c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed4 <HAL_RTC_WaitForSynchro+0x44>)
 8002e9e:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 8002ea0:	f7fe f958 	bl	8001154 <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002ea6:	e009      	b.n	8002ebc <HAL_RTC_WaitForSynchro+0x2c>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ea8:	f7fe f954 	bl	8001154 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002eb6:	d901      	bls.n	8002ebc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e007      	b.n	8002ecc <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0ee      	beq.n	8002ea8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	0001005c 	.word	0x0001005c

08002ed8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d123      	bne.n	8002f3a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f00:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002f02:	f7fe f927 	bl	8001154 <HAL_GetTick>
 8002f06:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002f08:	e00d      	b.n	8002f26 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002f0a:	f7fe f923 	bl	8001154 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f18:	d905      	bls.n	8002f26 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2203      	movs	r2, #3
 8002f22:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d102      	bne.n	8002f3a <RTC_EnterInitMode+0x62>
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d1e7      	bne.n	8002f0a <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002f50:	4b1a      	ldr	r3, [pc, #104]	@ (8002fbc <RTC_ExitInitMode+0x78>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a19      	ldr	r2, [pc, #100]	@ (8002fbc <RTC_ExitInitMode+0x78>)
 8002f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f5a:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002f5c:	4b17      	ldr	r3, [pc, #92]	@ (8002fbc <RTC_ExitInitMode+0x78>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10c      	bne.n	8002f82 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff91 	bl	8002e90 <HAL_RTC_WaitForSynchro>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01e      	beq.n	8002fb2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2203      	movs	r2, #3
 8002f78:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      status = HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	e017      	b.n	8002fb2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f82:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <RTC_ExitInitMode+0x78>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	4a0d      	ldr	r2, [pc, #52]	@ (8002fbc <RTC_ExitInitMode+0x78>)
 8002f88:	f023 0320 	bic.w	r3, r3, #32
 8002f8c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ff7e 	bl	8002e90 <HAL_RTC_WaitForSynchro>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      status = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002fa6:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <RTC_ExitInitMode+0x78>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <RTC_ExitInitMode+0x78>)
 8002fac:	f043 0320 	orr.w	r3, r3, #32
 8002fb0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40002800 	.word	0x40002800

08002fc0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002fd2:	e005      	b.n	8002fe0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002fda:	7afb      	ldrb	r3, [r7, #11]
 8002fdc:	3b0a      	subs	r3, #10
 8002fde:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	2b09      	cmp	r3, #9
 8002fe4:	d8f6      	bhi.n	8002fd4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	7afb      	ldrb	r3, [r7, #11]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	b2db      	uxtb	r3, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e040      	b.n	80030a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd ff08 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	@ 0x24
 8003040:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fefa 	bl	8003e54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fc9d 	bl	80039a0 <UART_SetConfig>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e01b      	b.n	80030a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800307e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800308e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 ff79 	bl	8003f98 <UART_CheckIdleState>
 80030a6:	4603      	mov	r3, r0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	@ 0x28
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d177      	bne.n	80031b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_UART_Transmit+0x24>
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e070      	b.n	80031ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2221      	movs	r2, #33	@ 0x21
 80030e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e6:	f7fe f835 	bl	8001154 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003104:	d108      	bne.n	8003118 <HAL_UART_Transmit+0x68>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d104      	bne.n	8003118 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	e003      	b.n	8003120 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003120:	e02f      	b.n	8003182 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2200      	movs	r2, #0
 800312a:	2180      	movs	r1, #128	@ 0x80
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 ffdb 	bl	80040e8 <UART_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d004      	beq.n	8003142 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e03b      	b.n	80031ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003154:	b292      	uxth	r2, r2
 8003156:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	3302      	adds	r3, #2
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e007      	b.n	8003170 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	781a      	ldrb	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1c9      	bne.n	8003122 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2200      	movs	r2, #0
 8003196:	2140      	movs	r1, #64	@ 0x40
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 ffa5 	bl	80040e8 <UART_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e005      	b.n	80031ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e000      	b.n	80031ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
  }
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08a      	sub	sp, #40	@ 0x28
 80031c6:	af02      	add	r7, sp, #8
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031d8:	2b20      	cmp	r3, #32
 80031da:	f040 80b6 	bne.w	800334a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_UART_Receive+0x28>
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0ae      	b.n	800334c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2222      	movs	r2, #34	@ 0x22
 80031fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003204:	f7fd ffa6 	bl	8001154 <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	88fa      	ldrh	r2, [r7, #6]
 800320e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003222:	d10e      	bne.n	8003242 <HAL_UART_Receive+0x80>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_UART_Receive+0x76>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003232:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003236:	e02d      	b.n	8003294 <HAL_UART_Receive+0xd2>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	22ff      	movs	r2, #255	@ 0xff
 800323c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003240:	e028      	b.n	8003294 <HAL_UART_Receive+0xd2>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10d      	bne.n	8003266 <HAL_UART_Receive+0xa4>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <HAL_UART_Receive+0x9a>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	22ff      	movs	r2, #255	@ 0xff
 8003256:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800325a:	e01b      	b.n	8003294 <HAL_UART_Receive+0xd2>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	227f      	movs	r2, #127	@ 0x7f
 8003260:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003264:	e016      	b.n	8003294 <HAL_UART_Receive+0xd2>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800326e:	d10d      	bne.n	800328c <HAL_UART_Receive+0xca>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_UART_Receive+0xc0>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	227f      	movs	r2, #127	@ 0x7f
 800327c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003280:	e008      	b.n	8003294 <HAL_UART_Receive+0xd2>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	223f      	movs	r2, #63	@ 0x3f
 8003286:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800328a:	e003      	b.n	8003294 <HAL_UART_Receive+0xd2>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800329a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a4:	d108      	bne.n	80032b8 <HAL_UART_Receive+0xf6>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	e003      	b.n	80032c0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80032c0:	e037      	b.n	8003332 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2120      	movs	r1, #32
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 ff0b 	bl	80040e8 <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e033      	b.n	800334c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	8a7b      	ldrh	r3, [r7, #18]
 80032f4:	4013      	ands	r3, r2
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	3302      	adds	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e00d      	b.n	8003320 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800330a:	b29b      	uxth	r3, r3
 800330c:	b2da      	uxtb	r2, r3
 800330e:	8a7b      	ldrh	r3, [r7, #18]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4013      	ands	r3, r2
 8003314:	b2da      	uxtb	r2, r3
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3301      	adds	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1c1      	bne.n	80032c2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	e000      	b.n	800334c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800334a:	2302      	movs	r3, #2
  }
}
 800334c:	4618      	mov	r0, r3
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b0ba      	sub	sp, #232	@ 0xe8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800337a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800337e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003382:	4013      	ands	r3, r2
 8003384:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d115      	bne.n	80033bc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00f      	beq.n	80033bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800339c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 82ca 	beq.w	8003946 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
      }
      return;
 80033ba:	e2c4      	b.n	8003946 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80033bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8117 	beq.w	80035f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80033d6:	4b85      	ldr	r3, [pc, #532]	@ (80035ec <HAL_UART_IRQHandler+0x298>)
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 810a 	beq.w	80035f4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d011      	beq.n	8003410 <HAL_UART_IRQHandler+0xbc>
 80033ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2201      	movs	r2, #1
 80033fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d011      	beq.n	8003440 <HAL_UART_IRQHandler+0xec>
 800341c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2202      	movs	r2, #2
 800342e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003436:	f043 0204 	orr.w	r2, r3, #4
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d011      	beq.n	8003470 <HAL_UART_IRQHandler+0x11c>
 800344c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00b      	beq.n	8003470 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2204      	movs	r2, #4
 800345e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003466:	f043 0202 	orr.w	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d017      	beq.n	80034ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800347c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800348c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00b      	beq.n	80034ac <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2208      	movs	r2, #8
 800349a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034a2:	f043 0208 	orr.w	r2, r3, #8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d012      	beq.n	80034de <HAL_UART_IRQHandler+0x18a>
 80034b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00c      	beq.n	80034de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8230 	beq.w	800394a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003518:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003526:	2b40      	cmp	r3, #64	@ 0x40
 8003528:	d005      	beq.n	8003536 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800352a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800352e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003532:	2b00      	cmp	r3, #0
 8003534:	d04f      	beq.n	80035d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fe43 	bl	80041c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003546:	2b40      	cmp	r3, #64	@ 0x40
 8003548:	d141      	bne.n	80035ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3308      	adds	r3, #8
 8003550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003560:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3308      	adds	r3, #8
 8003572:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003576:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800357a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003582:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800358e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1d9      	bne.n	800354a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359a:	2b00      	cmp	r3, #0
 800359c:	d013      	beq.n	80035c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a2:	4a13      	ldr	r2, [pc, #76]	@ (80035f0 <HAL_UART_IRQHandler+0x29c>)
 80035a4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fd ff51 	bl	8001452 <HAL_DMA_Abort_IT>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d017      	beq.n	80035e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80035c0:	4610      	mov	r0, r2
 80035c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	e00f      	b.n	80035e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f9d4 	bl	8003974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	e00b      	b.n	80035e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f9d0 	bl	8003974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	e007      	b.n	80035e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9cc 	bl	8003974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80035e4:	e1b1      	b.n	800394a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e6:	bf00      	nop
    return;
 80035e8:	e1af      	b.n	800394a <HAL_UART_IRQHandler+0x5f6>
 80035ea:	bf00      	nop
 80035ec:	04000120 	.word	0x04000120
 80035f0:	0800428b 	.word	0x0800428b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 816a 	bne.w	80038d2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8163 	beq.w	80038d2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800360c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 815c 	beq.w	80038d2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2210      	movs	r2, #16
 8003620:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362c:	2b40      	cmp	r3, #64	@ 0x40
 800362e:	f040 80d4 	bne.w	80037da <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800363e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80ad 	beq.w	80037a2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800364e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003652:	429a      	cmp	r2, r3
 8003654:	f080 80a5 	bcs.w	80037a2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800365e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	f040 8086 	bne.w	8003780 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003688:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800368c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800369e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1da      	bne.n	8003674 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3308      	adds	r3, #8
 80036c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3308      	adds	r3, #8
 80036de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036ee:	e841 2300 	strex	r3, r2, [r1]
 80036f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80036f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1e1      	bne.n	80036be <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3308      	adds	r3, #8
 8003700:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800370a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800370c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3308      	adds	r3, #8
 800371a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800371e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003720:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003724:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800372c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e3      	bne.n	80036fa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800374e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003750:	f023 0310 	bic.w	r3, r3, #16
 8003754:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003762:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003764:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003768:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e4      	bne.n	8003740 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fe2b 	bl	80013d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003792:	b29b      	uxth	r3, r3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	b29b      	uxth	r3, r3
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8f4 	bl	8003988 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80037a0:	e0d5      	b.n	800394e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80037a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037ac:	429a      	cmp	r2, r3
 80037ae:	f040 80ce 	bne.w	800394e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b20      	cmp	r3, #32
 80037c0:	f040 80c5 	bne.w	800394e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8d8 	bl	8003988 <HAL_UARTEx_RxEventCallback>
      return;
 80037d8:	e0b9      	b.n	800394e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80ab 	beq.w	8003952 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80037fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80a6 	beq.w	8003952 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003816:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800381a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003828:	647b      	str	r3, [r7, #68]	@ 0x44
 800382a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800382e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003830:	e841 2300 	strex	r3, r2, [r1]
 8003834:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e4      	bne.n	8003806 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3308      	adds	r3, #8
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	623b      	str	r3, [r7, #32]
   return(result);
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f023 0301 	bic.w	r3, r3, #1
 8003852:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3308      	adds	r3, #8
 800385c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003860:	633a      	str	r2, [r7, #48]	@ 0x30
 8003862:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e3      	bne.n	800383c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	60fb      	str	r3, [r7, #12]
   return(result);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f023 0310 	bic.w	r3, r3, #16
 800389c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	69b9      	ldr	r1, [r7, #24]
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	617b      	str	r3, [r7, #20]
   return(result);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e4      	bne.n	8003888 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038c8:	4619      	mov	r1, r3
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f85c 	bl	8003988 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038d0:	e03f      	b.n	8003952 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00e      	beq.n	80038fc <HAL_UART_IRQHandler+0x5a8>
 80038de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80038f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fd08 	bl	800430a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038fa:	e02d      	b.n	8003958 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00e      	beq.n	8003926 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800390c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01c      	beq.n	8003956 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
    }
    return;
 8003924:	e017      	b.n	8003956 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d012      	beq.n	8003958 <HAL_UART_IRQHandler+0x604>
 8003932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fcb9 	bl	80042b6 <UART_EndTransmit_IT>
    return;
 8003944:	e008      	b.n	8003958 <HAL_UART_IRQHandler+0x604>
      return;
 8003946:	bf00      	nop
 8003948:	e006      	b.n	8003958 <HAL_UART_IRQHandler+0x604>
    return;
 800394a:	bf00      	nop
 800394c:	e004      	b.n	8003958 <HAL_UART_IRQHandler+0x604>
      return;
 800394e:	bf00      	nop
 8003950:	e002      	b.n	8003958 <HAL_UART_IRQHandler+0x604>
      return;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <HAL_UART_IRQHandler+0x604>
    return;
 8003956:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003958:	37e8      	adds	r7, #232	@ 0xe8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop

08003960 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b08a      	sub	sp, #40	@ 0x28
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	431a      	orrs	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b9e      	ldr	r3, [pc, #632]	@ (8003c48 <UART_SetConfig+0x2a8>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039d8:	430b      	orrs	r3, r1
 80039da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a93      	ldr	r2, [pc, #588]	@ (8003c4c <UART_SetConfig+0x2ac>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d004      	beq.n	8003a0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a8a      	ldr	r2, [pc, #552]	@ (8003c50 <UART_SetConfig+0x2b0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d126      	bne.n	8003a78 <UART_SetConfig+0xd8>
 8003a2a:	4b8a      	ldr	r3, [pc, #552]	@ (8003c54 <UART_SetConfig+0x2b4>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d81b      	bhi.n	8003a70 <UART_SetConfig+0xd0>
 8003a38:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <UART_SetConfig+0xa0>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a61 	.word	0x08003a61
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a69 	.word	0x08003a69
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a56:	e0ab      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a5e:	e0a7      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003a60:	2304      	movs	r3, #4
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a66:	e0a3      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003a68:	2308      	movs	r3, #8
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a6e:	e09f      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003a70:	2310      	movs	r3, #16
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a76:	e09b      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a76      	ldr	r2, [pc, #472]	@ (8003c58 <UART_SetConfig+0x2b8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d138      	bne.n	8003af4 <UART_SetConfig+0x154>
 8003a82:	4b74      	ldr	r3, [pc, #464]	@ (8003c54 <UART_SetConfig+0x2b4>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	d82d      	bhi.n	8003aec <UART_SetConfig+0x14c>
 8003a90:	a201      	add	r2, pc, #4	@ (adr r2, 8003a98 <UART_SetConfig+0xf8>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003acd 	.word	0x08003acd
 8003a9c:	08003aed 	.word	0x08003aed
 8003aa0:	08003aed 	.word	0x08003aed
 8003aa4:	08003aed 	.word	0x08003aed
 8003aa8:	08003add 	.word	0x08003add
 8003aac:	08003aed 	.word	0x08003aed
 8003ab0:	08003aed 	.word	0x08003aed
 8003ab4:	08003aed 	.word	0x08003aed
 8003ab8:	08003ad5 	.word	0x08003ad5
 8003abc:	08003aed 	.word	0x08003aed
 8003ac0:	08003aed 	.word	0x08003aed
 8003ac4:	08003aed 	.word	0x08003aed
 8003ac8:	08003ae5 	.word	0x08003ae5
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad2:	e06d      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ada:	e069      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003adc:	2304      	movs	r3, #4
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae2:	e065      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aea:	e061      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003aec:	2310      	movs	r3, #16
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af2:	e05d      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a58      	ldr	r2, [pc, #352]	@ (8003c5c <UART_SetConfig+0x2bc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d125      	bne.n	8003b4a <UART_SetConfig+0x1aa>
 8003afe:	4b55      	ldr	r3, [pc, #340]	@ (8003c54 <UART_SetConfig+0x2b4>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b08:	2b30      	cmp	r3, #48	@ 0x30
 8003b0a:	d016      	beq.n	8003b3a <UART_SetConfig+0x19a>
 8003b0c:	2b30      	cmp	r3, #48	@ 0x30
 8003b0e:	d818      	bhi.n	8003b42 <UART_SetConfig+0x1a2>
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d00a      	beq.n	8003b2a <UART_SetConfig+0x18a>
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d814      	bhi.n	8003b42 <UART_SetConfig+0x1a2>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <UART_SetConfig+0x182>
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d008      	beq.n	8003b32 <UART_SetConfig+0x192>
 8003b20:	e00f      	b.n	8003b42 <UART_SetConfig+0x1a2>
 8003b22:	2300      	movs	r3, #0
 8003b24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b28:	e042      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b30:	e03e      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003b32:	2304      	movs	r3, #4
 8003b34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b38:	e03a      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b40:	e036      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003b42:	2310      	movs	r3, #16
 8003b44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b48:	e032      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a3f      	ldr	r2, [pc, #252]	@ (8003c4c <UART_SetConfig+0x2ac>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d12a      	bne.n	8003baa <UART_SetConfig+0x20a>
 8003b54:	4b3f      	ldr	r3, [pc, #252]	@ (8003c54 <UART_SetConfig+0x2b4>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b62:	d01a      	beq.n	8003b9a <UART_SetConfig+0x1fa>
 8003b64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b68:	d81b      	bhi.n	8003ba2 <UART_SetConfig+0x202>
 8003b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b6e:	d00c      	beq.n	8003b8a <UART_SetConfig+0x1ea>
 8003b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b74:	d815      	bhi.n	8003ba2 <UART_SetConfig+0x202>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <UART_SetConfig+0x1e2>
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7e:	d008      	beq.n	8003b92 <UART_SetConfig+0x1f2>
 8003b80:	e00f      	b.n	8003ba2 <UART_SetConfig+0x202>
 8003b82:	2300      	movs	r3, #0
 8003b84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b88:	e012      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b90:	e00e      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003b92:	2304      	movs	r3, #4
 8003b94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b98:	e00a      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba0:	e006      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba8:	e002      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003baa:	2310      	movs	r3, #16
 8003bac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	@ (8003c4c <UART_SetConfig+0x2ac>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	f040 808a 	bne.w	8003cd0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d824      	bhi.n	8003c0e <UART_SetConfig+0x26e>
 8003bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bcc <UART_SetConfig+0x22c>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003bf1 	.word	0x08003bf1
 8003bd0:	08003c0f 	.word	0x08003c0f
 8003bd4:	08003bf9 	.word	0x08003bf9
 8003bd8:	08003c0f 	.word	0x08003c0f
 8003bdc:	08003bff 	.word	0x08003bff
 8003be0:	08003c0f 	.word	0x08003c0f
 8003be4:	08003c0f 	.word	0x08003c0f
 8003be8:	08003c0f 	.word	0x08003c0f
 8003bec:	08003c07 	.word	0x08003c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf0:	f7fe fc50 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003bf4:	61f8      	str	r0, [r7, #28]
        break;
 8003bf6:	e010      	b.n	8003c1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf8:	4b19      	ldr	r3, [pc, #100]	@ (8003c60 <UART_SetConfig+0x2c0>)
 8003bfa:	61fb      	str	r3, [r7, #28]
        break;
 8003bfc:	e00d      	b.n	8003c1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfe:	f7fe fbb1 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003c02:	61f8      	str	r0, [r7, #28]
        break;
 8003c04:	e009      	b.n	8003c1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c0a:	61fb      	str	r3, [r7, #28]
        break;
 8003c0c:	e005      	b.n	8003c1a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8109 	beq.w	8003e34 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d305      	bcc.n	8003c3e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d912      	bls.n	8003c64 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c44:	e0f6      	b.n	8003e34 <UART_SetConfig+0x494>
 8003c46:	bf00      	nop
 8003c48:	efff69f3 	.word	0xefff69f3
 8003c4c:	40008000 	.word	0x40008000
 8003c50:	40013800 	.word	0x40013800
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40004400 	.word	0x40004400
 8003c5c:	40004800 	.word	0x40004800
 8003c60:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2200      	movs	r2, #0
 8003c68:	461c      	mov	r4, r3
 8003c6a:	4615      	mov	r5, r2
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	022b      	lsls	r3, r5, #8
 8003c76:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c7a:	0222      	lsls	r2, r4, #8
 8003c7c:	68f9      	ldr	r1, [r7, #12]
 8003c7e:	6849      	ldr	r1, [r1, #4]
 8003c80:	0849      	lsrs	r1, r1, #1
 8003c82:	2000      	movs	r0, #0
 8003c84:	4688      	mov	r8, r1
 8003c86:	4681      	mov	r9, r0
 8003c88:	eb12 0a08 	adds.w	sl, r2, r8
 8003c8c:	eb43 0b09 	adc.w	fp, r3, r9
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c9e:	4650      	mov	r0, sl
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	f7fc faed 	bl	8000280 <__aeabi_uldivmod>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4613      	mov	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cb4:	d308      	bcc.n	8003cc8 <UART_SetConfig+0x328>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cbc:	d204      	bcs.n	8003cc8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	e0b5      	b.n	8003e34 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cce:	e0b1      	b.n	8003e34 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd8:	d15d      	bne.n	8003d96 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003cda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d827      	bhi.n	8003d32 <UART_SetConfig+0x392>
 8003ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce8 <UART_SetConfig+0x348>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d15 	.word	0x08003d15
 8003cf0:	08003d1d 	.word	0x08003d1d
 8003cf4:	08003d33 	.word	0x08003d33
 8003cf8:	08003d23 	.word	0x08003d23
 8003cfc:	08003d33 	.word	0x08003d33
 8003d00:	08003d33 	.word	0x08003d33
 8003d04:	08003d33 	.word	0x08003d33
 8003d08:	08003d2b 	.word	0x08003d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d0c:	f7fe fbc2 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003d10:	61f8      	str	r0, [r7, #28]
        break;
 8003d12:	e014      	b.n	8003d3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d14:	f7fe fbd4 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8003d18:	61f8      	str	r0, [r7, #28]
        break;
 8003d1a:	e010      	b.n	8003d3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8003e50 <UART_SetConfig+0x4b0>)
 8003d1e:	61fb      	str	r3, [r7, #28]
        break;
 8003d20:	e00d      	b.n	8003d3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d22:	f7fe fb1f 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003d26:	61f8      	str	r0, [r7, #28]
        break;
 8003d28:	e009      	b.n	8003d3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d2e:	61fb      	str	r3, [r7, #28]
        break;
 8003d30:	e005      	b.n	8003d3e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d077      	beq.n	8003e34 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	005a      	lsls	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	441a      	add	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b0f      	cmp	r3, #15
 8003d5e:	d916      	bls.n	8003d8e <UART_SetConfig+0x3ee>
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d66:	d212      	bcs.n	8003d8e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f023 030f 	bic.w	r3, r3, #15
 8003d70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	8afb      	ldrh	r3, [r7, #22]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	8afa      	ldrh	r2, [r7, #22]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	e052      	b.n	8003e34 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d94:	e04e      	b.n	8003e34 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d827      	bhi.n	8003dee <UART_SetConfig+0x44e>
 8003d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003da4 <UART_SetConfig+0x404>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003dc9 	.word	0x08003dc9
 8003da8:	08003dd1 	.word	0x08003dd1
 8003dac:	08003dd9 	.word	0x08003dd9
 8003db0:	08003def 	.word	0x08003def
 8003db4:	08003ddf 	.word	0x08003ddf
 8003db8:	08003def 	.word	0x08003def
 8003dbc:	08003def 	.word	0x08003def
 8003dc0:	08003def 	.word	0x08003def
 8003dc4:	08003de7 	.word	0x08003de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f7fe fb64 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003dcc:	61f8      	str	r0, [r7, #28]
        break;
 8003dce:	e014      	b.n	8003dfa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd0:	f7fe fb76 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8003dd4:	61f8      	str	r0, [r7, #28]
        break;
 8003dd6:	e010      	b.n	8003dfa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <UART_SetConfig+0x4b0>)
 8003dda:	61fb      	str	r3, [r7, #28]
        break;
 8003ddc:	e00d      	b.n	8003dfa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dde:	f7fe fac1 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003de2:	61f8      	str	r0, [r7, #28]
        break;
 8003de4:	e009      	b.n	8003dfa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dea:	61fb      	str	r3, [r7, #28]
        break;
 8003dec:	e005      	b.n	8003dfa <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003df8:	bf00      	nop
    }

    if (pclk != 0U)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d019      	beq.n	8003e34 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	085a      	lsrs	r2, r3, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	441a      	add	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b0f      	cmp	r3, #15
 8003e18:	d909      	bls.n	8003e2e <UART_SetConfig+0x48e>
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e20:	d205      	bcs.n	8003e2e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60da      	str	r2, [r3, #12]
 8003e2c:	e002      	b.n	8003e34 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3728      	adds	r7, #40	@ 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4e:	bf00      	nop
 8003e50:	00f42400 	.word	0x00f42400

08003e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01a      	beq.n	8003f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f52:	d10a      	bne.n	8003f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b098      	sub	sp, #96	@ 0x60
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fa8:	f7fd f8d4 	bl	8001154 <HAL_GetTick>
 8003fac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d12e      	bne.n	800401a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f88c 	bl	80040e8 <UART_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d021      	beq.n	800401a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e6      	bne.n	8003fd6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e062      	b.n	80040e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b04      	cmp	r3, #4
 8004026:	d149      	bne.n	80040bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004028:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004030:	2200      	movs	r2, #0
 8004032:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f856 	bl	80040e8 <UART_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d03c      	beq.n	80040bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	623b      	str	r3, [r7, #32]
   return(result);
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004060:	633b      	str	r3, [r7, #48]	@ 0x30
 8004062:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e6      	bne.n	8004042 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3308      	adds	r3, #8
 800407a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	60fb      	str	r3, [r7, #12]
   return(result);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3308      	adds	r3, #8
 8004092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004094:	61fa      	str	r2, [r7, #28]
 8004096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	617b      	str	r3, [r7, #20]
   return(result);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e5      	bne.n	8004074 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e011      	b.n	80040e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3758      	adds	r7, #88	@ 0x58
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f8:	e04f      	b.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d04b      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004102:	f7fd f827 	bl	8001154 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	429a      	cmp	r2, r3
 8004110:	d302      	bcc.n	8004118 <UART_WaitOnFlagUntilTimeout+0x30>
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e04e      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d037      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b80      	cmp	r3, #128	@ 0x80
 800412e:	d034      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b40      	cmp	r3, #64	@ 0x40
 8004134:	d031      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b08      	cmp	r3, #8
 8004142:	d110      	bne.n	8004166 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2208      	movs	r2, #8
 800414a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f838 	bl	80041c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2208      	movs	r2, #8
 8004156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e029      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004174:	d111      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800417e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f81e 	bl	80041c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e00f      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d0a0      	beq.n	80040fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b095      	sub	sp, #84	@ 0x54
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e6      	bne.n	80041ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3308      	adds	r3, #8
 8004202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	61fb      	str	r3, [r7, #28]
   return(result);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3308      	adds	r3, #8
 800421a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800421c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e5      	bne.n	80041fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004234:	2b01      	cmp	r3, #1
 8004236:	d118      	bne.n	800426a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	60bb      	str	r3, [r7, #8]
   return(result);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f023 0310 	bic.w	r3, r3, #16
 800424c:	647b      	str	r3, [r7, #68]	@ 0x44
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6979      	ldr	r1, [r7, #20]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	613b      	str	r3, [r7, #16]
   return(result);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e6      	bne.n	8004238 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800427e:	bf00      	nop
 8004280:	3754      	adds	r7, #84	@ 0x54
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004296:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff fb63 	bl	8003974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b088      	sub	sp, #32
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e6      	bne.n	80042be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff fb2f 	bl	8003960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004302:	bf00      	nop
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <sniprintf>:
 8004320:	b40c      	push	{r2, r3}
 8004322:	b530      	push	{r4, r5, lr}
 8004324:	4b17      	ldr	r3, [pc, #92]	@ (8004384 <sniprintf+0x64>)
 8004326:	1e0c      	subs	r4, r1, #0
 8004328:	681d      	ldr	r5, [r3, #0]
 800432a:	b09d      	sub	sp, #116	@ 0x74
 800432c:	da08      	bge.n	8004340 <sniprintf+0x20>
 800432e:	238b      	movs	r3, #139	@ 0x8b
 8004330:	602b      	str	r3, [r5, #0]
 8004332:	f04f 30ff 	mov.w	r0, #4294967295
 8004336:	b01d      	add	sp, #116	@ 0x74
 8004338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800433c:	b002      	add	sp, #8
 800433e:	4770      	bx	lr
 8004340:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004344:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004348:	bf14      	ite	ne
 800434a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800434e:	4623      	moveq	r3, r4
 8004350:	9304      	str	r3, [sp, #16]
 8004352:	9307      	str	r3, [sp, #28]
 8004354:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004358:	9002      	str	r0, [sp, #8]
 800435a:	9006      	str	r0, [sp, #24]
 800435c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004360:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004362:	ab21      	add	r3, sp, #132	@ 0x84
 8004364:	a902      	add	r1, sp, #8
 8004366:	4628      	mov	r0, r5
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	f000 f9f7 	bl	800475c <_svfiprintf_r>
 800436e:	1c43      	adds	r3, r0, #1
 8004370:	bfbc      	itt	lt
 8004372:	238b      	movlt	r3, #139	@ 0x8b
 8004374:	602b      	strlt	r3, [r5, #0]
 8004376:	2c00      	cmp	r4, #0
 8004378:	d0dd      	beq.n	8004336 <sniprintf+0x16>
 800437a:	9b02      	ldr	r3, [sp, #8]
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e7d9      	b.n	8004336 <sniprintf+0x16>
 8004382:	bf00      	nop
 8004384:	2000000c 	.word	0x2000000c

08004388 <siprintf>:
 8004388:	b40e      	push	{r1, r2, r3}
 800438a:	b500      	push	{lr}
 800438c:	b09c      	sub	sp, #112	@ 0x70
 800438e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004390:	9002      	str	r0, [sp, #8]
 8004392:	9006      	str	r0, [sp, #24]
 8004394:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004398:	4809      	ldr	r0, [pc, #36]	@ (80043c0 <siprintf+0x38>)
 800439a:	9107      	str	r1, [sp, #28]
 800439c:	9104      	str	r1, [sp, #16]
 800439e:	4909      	ldr	r1, [pc, #36]	@ (80043c4 <siprintf+0x3c>)
 80043a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80043a4:	9105      	str	r1, [sp, #20]
 80043a6:	6800      	ldr	r0, [r0, #0]
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	a902      	add	r1, sp, #8
 80043ac:	f000 f9d6 	bl	800475c <_svfiprintf_r>
 80043b0:	9b02      	ldr	r3, [sp, #8]
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	b01c      	add	sp, #112	@ 0x70
 80043b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043bc:	b003      	add	sp, #12
 80043be:	4770      	bx	lr
 80043c0:	2000000c 	.word	0x2000000c
 80043c4:	ffff0208 	.word	0xffff0208

080043c8 <siscanf>:
 80043c8:	b40e      	push	{r1, r2, r3}
 80043ca:	b530      	push	{r4, r5, lr}
 80043cc:	b09c      	sub	sp, #112	@ 0x70
 80043ce:	ac1f      	add	r4, sp, #124	@ 0x7c
 80043d0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80043d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80043d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80043dc:	9002      	str	r0, [sp, #8]
 80043de:	9006      	str	r0, [sp, #24]
 80043e0:	f7fb fef6 	bl	80001d0 <strlen>
 80043e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <siscanf+0x4c>)
 80043e6:	9003      	str	r0, [sp, #12]
 80043e8:	9007      	str	r0, [sp, #28]
 80043ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043ec:	480a      	ldr	r0, [pc, #40]	@ (8004418 <siscanf+0x50>)
 80043ee:	9401      	str	r4, [sp, #4]
 80043f0:	2300      	movs	r3, #0
 80043f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80043f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80043f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80043fe:	462a      	mov	r2, r5
 8004400:	4623      	mov	r3, r4
 8004402:	a902      	add	r1, sp, #8
 8004404:	6800      	ldr	r0, [r0, #0]
 8004406:	f000 fafd 	bl	8004a04 <__ssvfiscanf_r>
 800440a:	b01c      	add	sp, #112	@ 0x70
 800440c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004410:	b003      	add	sp, #12
 8004412:	4770      	bx	lr
 8004414:	0800441d 	.word	0x0800441d
 8004418:	2000000c 	.word	0x2000000c

0800441c <__seofread>:
 800441c:	2000      	movs	r0, #0
 800441e:	4770      	bx	lr

08004420 <memset>:
 8004420:	4402      	add	r2, r0
 8004422:	4603      	mov	r3, r0
 8004424:	4293      	cmp	r3, r2
 8004426:	d100      	bne.n	800442a <memset+0xa>
 8004428:	4770      	bx	lr
 800442a:	f803 1b01 	strb.w	r1, [r3], #1
 800442e:	e7f9      	b.n	8004424 <memset+0x4>

08004430 <strstr>:
 8004430:	780a      	ldrb	r2, [r1, #0]
 8004432:	b570      	push	{r4, r5, r6, lr}
 8004434:	b96a      	cbnz	r2, 8004452 <strstr+0x22>
 8004436:	bd70      	pop	{r4, r5, r6, pc}
 8004438:	429a      	cmp	r2, r3
 800443a:	d109      	bne.n	8004450 <strstr+0x20>
 800443c:	460c      	mov	r4, r1
 800443e:	4605      	mov	r5, r0
 8004440:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f6      	beq.n	8004436 <strstr+0x6>
 8004448:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800444c:	429e      	cmp	r6, r3
 800444e:	d0f7      	beq.n	8004440 <strstr+0x10>
 8004450:	3001      	adds	r0, #1
 8004452:	7803      	ldrb	r3, [r0, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ef      	bne.n	8004438 <strstr+0x8>
 8004458:	4618      	mov	r0, r3
 800445a:	e7ec      	b.n	8004436 <strstr+0x6>

0800445c <__errno>:
 800445c:	4b01      	ldr	r3, [pc, #4]	@ (8004464 <__errno+0x8>)
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2000000c 	.word	0x2000000c

08004468 <__libc_init_array>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	4d0d      	ldr	r5, [pc, #52]	@ (80044a0 <__libc_init_array+0x38>)
 800446c:	4c0d      	ldr	r4, [pc, #52]	@ (80044a4 <__libc_init_array+0x3c>)
 800446e:	1b64      	subs	r4, r4, r5
 8004470:	10a4      	asrs	r4, r4, #2
 8004472:	2600      	movs	r6, #0
 8004474:	42a6      	cmp	r6, r4
 8004476:	d109      	bne.n	800448c <__libc_init_array+0x24>
 8004478:	4d0b      	ldr	r5, [pc, #44]	@ (80044a8 <__libc_init_array+0x40>)
 800447a:	4c0c      	ldr	r4, [pc, #48]	@ (80044ac <__libc_init_array+0x44>)
 800447c:	f001 f8e0 	bl	8005640 <_init>
 8004480:	1b64      	subs	r4, r4, r5
 8004482:	10a4      	asrs	r4, r4, #2
 8004484:	2600      	movs	r6, #0
 8004486:	42a6      	cmp	r6, r4
 8004488:	d105      	bne.n	8004496 <__libc_init_array+0x2e>
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004490:	4798      	blx	r3
 8004492:	3601      	adds	r6, #1
 8004494:	e7ee      	b.n	8004474 <__libc_init_array+0xc>
 8004496:	f855 3b04 	ldr.w	r3, [r5], #4
 800449a:	4798      	blx	r3
 800449c:	3601      	adds	r6, #1
 800449e:	e7f2      	b.n	8004486 <__libc_init_array+0x1e>
 80044a0:	08005ce8 	.word	0x08005ce8
 80044a4:	08005ce8 	.word	0x08005ce8
 80044a8:	08005ce8 	.word	0x08005ce8
 80044ac:	08005cec 	.word	0x08005cec

080044b0 <__retarget_lock_acquire_recursive>:
 80044b0:	4770      	bx	lr

080044b2 <__retarget_lock_release_recursive>:
 80044b2:	4770      	bx	lr

080044b4 <_free_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4605      	mov	r5, r0
 80044b8:	2900      	cmp	r1, #0
 80044ba:	d041      	beq.n	8004540 <_free_r+0x8c>
 80044bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c0:	1f0c      	subs	r4, r1, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfb8      	it	lt
 80044c6:	18e4      	addlt	r4, r4, r3
 80044c8:	f000 f8e0 	bl	800468c <__malloc_lock>
 80044cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004544 <_free_r+0x90>)
 80044ce:	6813      	ldr	r3, [r2, #0]
 80044d0:	b933      	cbnz	r3, 80044e0 <_free_r+0x2c>
 80044d2:	6063      	str	r3, [r4, #4]
 80044d4:	6014      	str	r4, [r2, #0]
 80044d6:	4628      	mov	r0, r5
 80044d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044dc:	f000 b8dc 	b.w	8004698 <__malloc_unlock>
 80044e0:	42a3      	cmp	r3, r4
 80044e2:	d908      	bls.n	80044f6 <_free_r+0x42>
 80044e4:	6820      	ldr	r0, [r4, #0]
 80044e6:	1821      	adds	r1, r4, r0
 80044e8:	428b      	cmp	r3, r1
 80044ea:	bf01      	itttt	eq
 80044ec:	6819      	ldreq	r1, [r3, #0]
 80044ee:	685b      	ldreq	r3, [r3, #4]
 80044f0:	1809      	addeq	r1, r1, r0
 80044f2:	6021      	streq	r1, [r4, #0]
 80044f4:	e7ed      	b.n	80044d2 <_free_r+0x1e>
 80044f6:	461a      	mov	r2, r3
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	b10b      	cbz	r3, 8004500 <_free_r+0x4c>
 80044fc:	42a3      	cmp	r3, r4
 80044fe:	d9fa      	bls.n	80044f6 <_free_r+0x42>
 8004500:	6811      	ldr	r1, [r2, #0]
 8004502:	1850      	adds	r0, r2, r1
 8004504:	42a0      	cmp	r0, r4
 8004506:	d10b      	bne.n	8004520 <_free_r+0x6c>
 8004508:	6820      	ldr	r0, [r4, #0]
 800450a:	4401      	add	r1, r0
 800450c:	1850      	adds	r0, r2, r1
 800450e:	4283      	cmp	r3, r0
 8004510:	6011      	str	r1, [r2, #0]
 8004512:	d1e0      	bne.n	80044d6 <_free_r+0x22>
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	6053      	str	r3, [r2, #4]
 800451a:	4408      	add	r0, r1
 800451c:	6010      	str	r0, [r2, #0]
 800451e:	e7da      	b.n	80044d6 <_free_r+0x22>
 8004520:	d902      	bls.n	8004528 <_free_r+0x74>
 8004522:	230c      	movs	r3, #12
 8004524:	602b      	str	r3, [r5, #0]
 8004526:	e7d6      	b.n	80044d6 <_free_r+0x22>
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	1821      	adds	r1, r4, r0
 800452c:	428b      	cmp	r3, r1
 800452e:	bf04      	itt	eq
 8004530:	6819      	ldreq	r1, [r3, #0]
 8004532:	685b      	ldreq	r3, [r3, #4]
 8004534:	6063      	str	r3, [r4, #4]
 8004536:	bf04      	itt	eq
 8004538:	1809      	addeq	r1, r1, r0
 800453a:	6021      	streq	r1, [r4, #0]
 800453c:	6054      	str	r4, [r2, #4]
 800453e:	e7ca      	b.n	80044d6 <_free_r+0x22>
 8004540:	bd38      	pop	{r3, r4, r5, pc}
 8004542:	bf00      	nop
 8004544:	200002a8 	.word	0x200002a8

08004548 <sbrk_aligned>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	4e0f      	ldr	r6, [pc, #60]	@ (8004588 <sbrk_aligned+0x40>)
 800454c:	460c      	mov	r4, r1
 800454e:	6831      	ldr	r1, [r6, #0]
 8004550:	4605      	mov	r5, r0
 8004552:	b911      	cbnz	r1, 800455a <sbrk_aligned+0x12>
 8004554:	f000 ff34 	bl	80053c0 <_sbrk_r>
 8004558:	6030      	str	r0, [r6, #0]
 800455a:	4621      	mov	r1, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 ff2f 	bl	80053c0 <_sbrk_r>
 8004562:	1c43      	adds	r3, r0, #1
 8004564:	d103      	bne.n	800456e <sbrk_aligned+0x26>
 8004566:	f04f 34ff 	mov.w	r4, #4294967295
 800456a:	4620      	mov	r0, r4
 800456c:	bd70      	pop	{r4, r5, r6, pc}
 800456e:	1cc4      	adds	r4, r0, #3
 8004570:	f024 0403 	bic.w	r4, r4, #3
 8004574:	42a0      	cmp	r0, r4
 8004576:	d0f8      	beq.n	800456a <sbrk_aligned+0x22>
 8004578:	1a21      	subs	r1, r4, r0
 800457a:	4628      	mov	r0, r5
 800457c:	f000 ff20 	bl	80053c0 <_sbrk_r>
 8004580:	3001      	adds	r0, #1
 8004582:	d1f2      	bne.n	800456a <sbrk_aligned+0x22>
 8004584:	e7ef      	b.n	8004566 <sbrk_aligned+0x1e>
 8004586:	bf00      	nop
 8004588:	200002a4 	.word	0x200002a4

0800458c <_malloc_r>:
 800458c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004590:	1ccd      	adds	r5, r1, #3
 8004592:	f025 0503 	bic.w	r5, r5, #3
 8004596:	3508      	adds	r5, #8
 8004598:	2d0c      	cmp	r5, #12
 800459a:	bf38      	it	cc
 800459c:	250c      	movcc	r5, #12
 800459e:	2d00      	cmp	r5, #0
 80045a0:	4606      	mov	r6, r0
 80045a2:	db01      	blt.n	80045a8 <_malloc_r+0x1c>
 80045a4:	42a9      	cmp	r1, r5
 80045a6:	d904      	bls.n	80045b2 <_malloc_r+0x26>
 80045a8:	230c      	movs	r3, #12
 80045aa:	6033      	str	r3, [r6, #0]
 80045ac:	2000      	movs	r0, #0
 80045ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004688 <_malloc_r+0xfc>
 80045b6:	f000 f869 	bl	800468c <__malloc_lock>
 80045ba:	f8d8 3000 	ldr.w	r3, [r8]
 80045be:	461c      	mov	r4, r3
 80045c0:	bb44      	cbnz	r4, 8004614 <_malloc_r+0x88>
 80045c2:	4629      	mov	r1, r5
 80045c4:	4630      	mov	r0, r6
 80045c6:	f7ff ffbf 	bl	8004548 <sbrk_aligned>
 80045ca:	1c43      	adds	r3, r0, #1
 80045cc:	4604      	mov	r4, r0
 80045ce:	d158      	bne.n	8004682 <_malloc_r+0xf6>
 80045d0:	f8d8 4000 	ldr.w	r4, [r8]
 80045d4:	4627      	mov	r7, r4
 80045d6:	2f00      	cmp	r7, #0
 80045d8:	d143      	bne.n	8004662 <_malloc_r+0xd6>
 80045da:	2c00      	cmp	r4, #0
 80045dc:	d04b      	beq.n	8004676 <_malloc_r+0xea>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	4639      	mov	r1, r7
 80045e2:	4630      	mov	r0, r6
 80045e4:	eb04 0903 	add.w	r9, r4, r3
 80045e8:	f000 feea 	bl	80053c0 <_sbrk_r>
 80045ec:	4581      	cmp	r9, r0
 80045ee:	d142      	bne.n	8004676 <_malloc_r+0xea>
 80045f0:	6821      	ldr	r1, [r4, #0]
 80045f2:	1a6d      	subs	r5, r5, r1
 80045f4:	4629      	mov	r1, r5
 80045f6:	4630      	mov	r0, r6
 80045f8:	f7ff ffa6 	bl	8004548 <sbrk_aligned>
 80045fc:	3001      	adds	r0, #1
 80045fe:	d03a      	beq.n	8004676 <_malloc_r+0xea>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	442b      	add	r3, r5
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	f8d8 3000 	ldr.w	r3, [r8]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	bb62      	cbnz	r2, 8004668 <_malloc_r+0xdc>
 800460e:	f8c8 7000 	str.w	r7, [r8]
 8004612:	e00f      	b.n	8004634 <_malloc_r+0xa8>
 8004614:	6822      	ldr	r2, [r4, #0]
 8004616:	1b52      	subs	r2, r2, r5
 8004618:	d420      	bmi.n	800465c <_malloc_r+0xd0>
 800461a:	2a0b      	cmp	r2, #11
 800461c:	d917      	bls.n	800464e <_malloc_r+0xc2>
 800461e:	1961      	adds	r1, r4, r5
 8004620:	42a3      	cmp	r3, r4
 8004622:	6025      	str	r5, [r4, #0]
 8004624:	bf18      	it	ne
 8004626:	6059      	strne	r1, [r3, #4]
 8004628:	6863      	ldr	r3, [r4, #4]
 800462a:	bf08      	it	eq
 800462c:	f8c8 1000 	streq.w	r1, [r8]
 8004630:	5162      	str	r2, [r4, r5]
 8004632:	604b      	str	r3, [r1, #4]
 8004634:	4630      	mov	r0, r6
 8004636:	f000 f82f 	bl	8004698 <__malloc_unlock>
 800463a:	f104 000b 	add.w	r0, r4, #11
 800463e:	1d23      	adds	r3, r4, #4
 8004640:	f020 0007 	bic.w	r0, r0, #7
 8004644:	1ac2      	subs	r2, r0, r3
 8004646:	bf1c      	itt	ne
 8004648:	1a1b      	subne	r3, r3, r0
 800464a:	50a3      	strne	r3, [r4, r2]
 800464c:	e7af      	b.n	80045ae <_malloc_r+0x22>
 800464e:	6862      	ldr	r2, [r4, #4]
 8004650:	42a3      	cmp	r3, r4
 8004652:	bf0c      	ite	eq
 8004654:	f8c8 2000 	streq.w	r2, [r8]
 8004658:	605a      	strne	r2, [r3, #4]
 800465a:	e7eb      	b.n	8004634 <_malloc_r+0xa8>
 800465c:	4623      	mov	r3, r4
 800465e:	6864      	ldr	r4, [r4, #4]
 8004660:	e7ae      	b.n	80045c0 <_malloc_r+0x34>
 8004662:	463c      	mov	r4, r7
 8004664:	687f      	ldr	r7, [r7, #4]
 8004666:	e7b6      	b.n	80045d6 <_malloc_r+0x4a>
 8004668:	461a      	mov	r2, r3
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	42a3      	cmp	r3, r4
 800466e:	d1fb      	bne.n	8004668 <_malloc_r+0xdc>
 8004670:	2300      	movs	r3, #0
 8004672:	6053      	str	r3, [r2, #4]
 8004674:	e7de      	b.n	8004634 <_malloc_r+0xa8>
 8004676:	230c      	movs	r3, #12
 8004678:	6033      	str	r3, [r6, #0]
 800467a:	4630      	mov	r0, r6
 800467c:	f000 f80c 	bl	8004698 <__malloc_unlock>
 8004680:	e794      	b.n	80045ac <_malloc_r+0x20>
 8004682:	6005      	str	r5, [r0, #0]
 8004684:	e7d6      	b.n	8004634 <_malloc_r+0xa8>
 8004686:	bf00      	nop
 8004688:	200002a8 	.word	0x200002a8

0800468c <__malloc_lock>:
 800468c:	4801      	ldr	r0, [pc, #4]	@ (8004694 <__malloc_lock+0x8>)
 800468e:	f7ff bf0f 	b.w	80044b0 <__retarget_lock_acquire_recursive>
 8004692:	bf00      	nop
 8004694:	200002a0 	.word	0x200002a0

08004698 <__malloc_unlock>:
 8004698:	4801      	ldr	r0, [pc, #4]	@ (80046a0 <__malloc_unlock+0x8>)
 800469a:	f7ff bf0a 	b.w	80044b2 <__retarget_lock_release_recursive>
 800469e:	bf00      	nop
 80046a0:	200002a0 	.word	0x200002a0

080046a4 <__ssputs_r>:
 80046a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a8:	688e      	ldr	r6, [r1, #8]
 80046aa:	461f      	mov	r7, r3
 80046ac:	42be      	cmp	r6, r7
 80046ae:	680b      	ldr	r3, [r1, #0]
 80046b0:	4682      	mov	sl, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	4690      	mov	r8, r2
 80046b6:	d82d      	bhi.n	8004714 <__ssputs_r+0x70>
 80046b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046c0:	d026      	beq.n	8004710 <__ssputs_r+0x6c>
 80046c2:	6965      	ldr	r5, [r4, #20]
 80046c4:	6909      	ldr	r1, [r1, #16]
 80046c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046ca:	eba3 0901 	sub.w	r9, r3, r1
 80046ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046d2:	1c7b      	adds	r3, r7, #1
 80046d4:	444b      	add	r3, r9
 80046d6:	106d      	asrs	r5, r5, #1
 80046d8:	429d      	cmp	r5, r3
 80046da:	bf38      	it	cc
 80046dc:	461d      	movcc	r5, r3
 80046de:	0553      	lsls	r3, r2, #21
 80046e0:	d527      	bpl.n	8004732 <__ssputs_r+0x8e>
 80046e2:	4629      	mov	r1, r5
 80046e4:	f7ff ff52 	bl	800458c <_malloc_r>
 80046e8:	4606      	mov	r6, r0
 80046ea:	b360      	cbz	r0, 8004746 <__ssputs_r+0xa2>
 80046ec:	6921      	ldr	r1, [r4, #16]
 80046ee:	464a      	mov	r2, r9
 80046f0:	f000 fe76 	bl	80053e0 <memcpy>
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046fe:	81a3      	strh	r3, [r4, #12]
 8004700:	6126      	str	r6, [r4, #16]
 8004702:	6165      	str	r5, [r4, #20]
 8004704:	444e      	add	r6, r9
 8004706:	eba5 0509 	sub.w	r5, r5, r9
 800470a:	6026      	str	r6, [r4, #0]
 800470c:	60a5      	str	r5, [r4, #8]
 800470e:	463e      	mov	r6, r7
 8004710:	42be      	cmp	r6, r7
 8004712:	d900      	bls.n	8004716 <__ssputs_r+0x72>
 8004714:	463e      	mov	r6, r7
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	4632      	mov	r2, r6
 800471a:	4641      	mov	r1, r8
 800471c:	f000 fe35 	bl	800538a <memmove>
 8004720:	68a3      	ldr	r3, [r4, #8]
 8004722:	1b9b      	subs	r3, r3, r6
 8004724:	60a3      	str	r3, [r4, #8]
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	4433      	add	r3, r6
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	2000      	movs	r0, #0
 800472e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004732:	462a      	mov	r2, r5
 8004734:	f000 fe62 	bl	80053fc <_realloc_r>
 8004738:	4606      	mov	r6, r0
 800473a:	2800      	cmp	r0, #0
 800473c:	d1e0      	bne.n	8004700 <__ssputs_r+0x5c>
 800473e:	6921      	ldr	r1, [r4, #16]
 8004740:	4650      	mov	r0, sl
 8004742:	f7ff feb7 	bl	80044b4 <_free_r>
 8004746:	230c      	movs	r3, #12
 8004748:	f8ca 3000 	str.w	r3, [sl]
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	e7e9      	b.n	800472e <__ssputs_r+0x8a>
	...

0800475c <_svfiprintf_r>:
 800475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004760:	4698      	mov	r8, r3
 8004762:	898b      	ldrh	r3, [r1, #12]
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	b09d      	sub	sp, #116	@ 0x74
 8004768:	4607      	mov	r7, r0
 800476a:	460d      	mov	r5, r1
 800476c:	4614      	mov	r4, r2
 800476e:	d510      	bpl.n	8004792 <_svfiprintf_r+0x36>
 8004770:	690b      	ldr	r3, [r1, #16]
 8004772:	b973      	cbnz	r3, 8004792 <_svfiprintf_r+0x36>
 8004774:	2140      	movs	r1, #64	@ 0x40
 8004776:	f7ff ff09 	bl	800458c <_malloc_r>
 800477a:	6028      	str	r0, [r5, #0]
 800477c:	6128      	str	r0, [r5, #16]
 800477e:	b930      	cbnz	r0, 800478e <_svfiprintf_r+0x32>
 8004780:	230c      	movs	r3, #12
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	b01d      	add	sp, #116	@ 0x74
 800478a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478e:	2340      	movs	r3, #64	@ 0x40
 8004790:	616b      	str	r3, [r5, #20]
 8004792:	2300      	movs	r3, #0
 8004794:	9309      	str	r3, [sp, #36]	@ 0x24
 8004796:	2320      	movs	r3, #32
 8004798:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800479c:	f8cd 800c 	str.w	r8, [sp, #12]
 80047a0:	2330      	movs	r3, #48	@ 0x30
 80047a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004940 <_svfiprintf_r+0x1e4>
 80047a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047aa:	f04f 0901 	mov.w	r9, #1
 80047ae:	4623      	mov	r3, r4
 80047b0:	469a      	mov	sl, r3
 80047b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047b6:	b10a      	cbz	r2, 80047bc <_svfiprintf_r+0x60>
 80047b8:	2a25      	cmp	r2, #37	@ 0x25
 80047ba:	d1f9      	bne.n	80047b0 <_svfiprintf_r+0x54>
 80047bc:	ebba 0b04 	subs.w	fp, sl, r4
 80047c0:	d00b      	beq.n	80047da <_svfiprintf_r+0x7e>
 80047c2:	465b      	mov	r3, fp
 80047c4:	4622      	mov	r2, r4
 80047c6:	4629      	mov	r1, r5
 80047c8:	4638      	mov	r0, r7
 80047ca:	f7ff ff6b 	bl	80046a4 <__ssputs_r>
 80047ce:	3001      	adds	r0, #1
 80047d0:	f000 80a7 	beq.w	8004922 <_svfiprintf_r+0x1c6>
 80047d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047d6:	445a      	add	r2, fp
 80047d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80047da:	f89a 3000 	ldrb.w	r3, [sl]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 809f 	beq.w	8004922 <_svfiprintf_r+0x1c6>
 80047e4:	2300      	movs	r3, #0
 80047e6:	f04f 32ff 	mov.w	r2, #4294967295
 80047ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ee:	f10a 0a01 	add.w	sl, sl, #1
 80047f2:	9304      	str	r3, [sp, #16]
 80047f4:	9307      	str	r3, [sp, #28]
 80047f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80047fc:	4654      	mov	r4, sl
 80047fe:	2205      	movs	r2, #5
 8004800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004804:	484e      	ldr	r0, [pc, #312]	@ (8004940 <_svfiprintf_r+0x1e4>)
 8004806:	f7fb fceb 	bl	80001e0 <memchr>
 800480a:	9a04      	ldr	r2, [sp, #16]
 800480c:	b9d8      	cbnz	r0, 8004846 <_svfiprintf_r+0xea>
 800480e:	06d0      	lsls	r0, r2, #27
 8004810:	bf44      	itt	mi
 8004812:	2320      	movmi	r3, #32
 8004814:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004818:	0711      	lsls	r1, r2, #28
 800481a:	bf44      	itt	mi
 800481c:	232b      	movmi	r3, #43	@ 0x2b
 800481e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004822:	f89a 3000 	ldrb.w	r3, [sl]
 8004826:	2b2a      	cmp	r3, #42	@ 0x2a
 8004828:	d015      	beq.n	8004856 <_svfiprintf_r+0xfa>
 800482a:	9a07      	ldr	r2, [sp, #28]
 800482c:	4654      	mov	r4, sl
 800482e:	2000      	movs	r0, #0
 8004830:	f04f 0c0a 	mov.w	ip, #10
 8004834:	4621      	mov	r1, r4
 8004836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800483a:	3b30      	subs	r3, #48	@ 0x30
 800483c:	2b09      	cmp	r3, #9
 800483e:	d94b      	bls.n	80048d8 <_svfiprintf_r+0x17c>
 8004840:	b1b0      	cbz	r0, 8004870 <_svfiprintf_r+0x114>
 8004842:	9207      	str	r2, [sp, #28]
 8004844:	e014      	b.n	8004870 <_svfiprintf_r+0x114>
 8004846:	eba0 0308 	sub.w	r3, r0, r8
 800484a:	fa09 f303 	lsl.w	r3, r9, r3
 800484e:	4313      	orrs	r3, r2
 8004850:	9304      	str	r3, [sp, #16]
 8004852:	46a2      	mov	sl, r4
 8004854:	e7d2      	b.n	80047fc <_svfiprintf_r+0xa0>
 8004856:	9b03      	ldr	r3, [sp, #12]
 8004858:	1d19      	adds	r1, r3, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	9103      	str	r1, [sp, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfbb      	ittet	lt
 8004862:	425b      	neglt	r3, r3
 8004864:	f042 0202 	orrlt.w	r2, r2, #2
 8004868:	9307      	strge	r3, [sp, #28]
 800486a:	9307      	strlt	r3, [sp, #28]
 800486c:	bfb8      	it	lt
 800486e:	9204      	strlt	r2, [sp, #16]
 8004870:	7823      	ldrb	r3, [r4, #0]
 8004872:	2b2e      	cmp	r3, #46	@ 0x2e
 8004874:	d10a      	bne.n	800488c <_svfiprintf_r+0x130>
 8004876:	7863      	ldrb	r3, [r4, #1]
 8004878:	2b2a      	cmp	r3, #42	@ 0x2a
 800487a:	d132      	bne.n	80048e2 <_svfiprintf_r+0x186>
 800487c:	9b03      	ldr	r3, [sp, #12]
 800487e:	1d1a      	adds	r2, r3, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	9203      	str	r2, [sp, #12]
 8004884:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004888:	3402      	adds	r4, #2
 800488a:	9305      	str	r3, [sp, #20]
 800488c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004950 <_svfiprintf_r+0x1f4>
 8004890:	7821      	ldrb	r1, [r4, #0]
 8004892:	2203      	movs	r2, #3
 8004894:	4650      	mov	r0, sl
 8004896:	f7fb fca3 	bl	80001e0 <memchr>
 800489a:	b138      	cbz	r0, 80048ac <_svfiprintf_r+0x150>
 800489c:	9b04      	ldr	r3, [sp, #16]
 800489e:	eba0 000a 	sub.w	r0, r0, sl
 80048a2:	2240      	movs	r2, #64	@ 0x40
 80048a4:	4082      	lsls	r2, r0
 80048a6:	4313      	orrs	r3, r2
 80048a8:	3401      	adds	r4, #1
 80048aa:	9304      	str	r3, [sp, #16]
 80048ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b0:	4824      	ldr	r0, [pc, #144]	@ (8004944 <_svfiprintf_r+0x1e8>)
 80048b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048b6:	2206      	movs	r2, #6
 80048b8:	f7fb fc92 	bl	80001e0 <memchr>
 80048bc:	2800      	cmp	r0, #0
 80048be:	d036      	beq.n	800492e <_svfiprintf_r+0x1d2>
 80048c0:	4b21      	ldr	r3, [pc, #132]	@ (8004948 <_svfiprintf_r+0x1ec>)
 80048c2:	bb1b      	cbnz	r3, 800490c <_svfiprintf_r+0x1b0>
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	3307      	adds	r3, #7
 80048c8:	f023 0307 	bic.w	r3, r3, #7
 80048cc:	3308      	adds	r3, #8
 80048ce:	9303      	str	r3, [sp, #12]
 80048d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048d2:	4433      	add	r3, r6
 80048d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048d6:	e76a      	b.n	80047ae <_svfiprintf_r+0x52>
 80048d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048dc:	460c      	mov	r4, r1
 80048de:	2001      	movs	r0, #1
 80048e0:	e7a8      	b.n	8004834 <_svfiprintf_r+0xd8>
 80048e2:	2300      	movs	r3, #0
 80048e4:	3401      	adds	r4, #1
 80048e6:	9305      	str	r3, [sp, #20]
 80048e8:	4619      	mov	r1, r3
 80048ea:	f04f 0c0a 	mov.w	ip, #10
 80048ee:	4620      	mov	r0, r4
 80048f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f4:	3a30      	subs	r2, #48	@ 0x30
 80048f6:	2a09      	cmp	r2, #9
 80048f8:	d903      	bls.n	8004902 <_svfiprintf_r+0x1a6>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0c6      	beq.n	800488c <_svfiprintf_r+0x130>
 80048fe:	9105      	str	r1, [sp, #20]
 8004900:	e7c4      	b.n	800488c <_svfiprintf_r+0x130>
 8004902:	fb0c 2101 	mla	r1, ip, r1, r2
 8004906:	4604      	mov	r4, r0
 8004908:	2301      	movs	r3, #1
 800490a:	e7f0      	b.n	80048ee <_svfiprintf_r+0x192>
 800490c:	ab03      	add	r3, sp, #12
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	462a      	mov	r2, r5
 8004912:	4b0e      	ldr	r3, [pc, #56]	@ (800494c <_svfiprintf_r+0x1f0>)
 8004914:	a904      	add	r1, sp, #16
 8004916:	4638      	mov	r0, r7
 8004918:	f3af 8000 	nop.w
 800491c:	1c42      	adds	r2, r0, #1
 800491e:	4606      	mov	r6, r0
 8004920:	d1d6      	bne.n	80048d0 <_svfiprintf_r+0x174>
 8004922:	89ab      	ldrh	r3, [r5, #12]
 8004924:	065b      	lsls	r3, r3, #25
 8004926:	f53f af2d 	bmi.w	8004784 <_svfiprintf_r+0x28>
 800492a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800492c:	e72c      	b.n	8004788 <_svfiprintf_r+0x2c>
 800492e:	ab03      	add	r3, sp, #12
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	462a      	mov	r2, r5
 8004934:	4b05      	ldr	r3, [pc, #20]	@ (800494c <_svfiprintf_r+0x1f0>)
 8004936:	a904      	add	r1, sp, #16
 8004938:	4638      	mov	r0, r7
 800493a:	f000 fa45 	bl	8004dc8 <_printf_i>
 800493e:	e7ed      	b.n	800491c <_svfiprintf_r+0x1c0>
 8004940:	08005b90 	.word	0x08005b90
 8004944:	08005b9a 	.word	0x08005b9a
 8004948:	00000000 	.word	0x00000000
 800494c:	080046a5 	.word	0x080046a5
 8004950:	08005b96 	.word	0x08005b96

08004954 <_sungetc_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	1c4b      	adds	r3, r1, #1
 8004958:	4614      	mov	r4, r2
 800495a:	d103      	bne.n	8004964 <_sungetc_r+0x10>
 800495c:	f04f 35ff 	mov.w	r5, #4294967295
 8004960:	4628      	mov	r0, r5
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	8993      	ldrh	r3, [r2, #12]
 8004966:	f023 0320 	bic.w	r3, r3, #32
 800496a:	8193      	strh	r3, [r2, #12]
 800496c:	6853      	ldr	r3, [r2, #4]
 800496e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004970:	b2cd      	uxtb	r5, r1
 8004972:	b18a      	cbz	r2, 8004998 <_sungetc_r+0x44>
 8004974:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004976:	429a      	cmp	r2, r3
 8004978:	dd08      	ble.n	800498c <_sungetc_r+0x38>
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	1e5a      	subs	r2, r3, #1
 800497e:	6022      	str	r2, [r4, #0]
 8004980:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004984:	6863      	ldr	r3, [r4, #4]
 8004986:	3301      	adds	r3, #1
 8004988:	6063      	str	r3, [r4, #4]
 800498a:	e7e9      	b.n	8004960 <_sungetc_r+0xc>
 800498c:	4621      	mov	r1, r4
 800498e:	f000 fcc2 	bl	8005316 <__submore>
 8004992:	2800      	cmp	r0, #0
 8004994:	d0f1      	beq.n	800497a <_sungetc_r+0x26>
 8004996:	e7e1      	b.n	800495c <_sungetc_r+0x8>
 8004998:	6921      	ldr	r1, [r4, #16]
 800499a:	6822      	ldr	r2, [r4, #0]
 800499c:	b141      	cbz	r1, 80049b0 <_sungetc_r+0x5c>
 800499e:	4291      	cmp	r1, r2
 80049a0:	d206      	bcs.n	80049b0 <_sungetc_r+0x5c>
 80049a2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80049a6:	42a9      	cmp	r1, r5
 80049a8:	d102      	bne.n	80049b0 <_sungetc_r+0x5c>
 80049aa:	3a01      	subs	r2, #1
 80049ac:	6022      	str	r2, [r4, #0]
 80049ae:	e7ea      	b.n	8004986 <_sungetc_r+0x32>
 80049b0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80049b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80049ba:	2303      	movs	r3, #3
 80049bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80049be:	4623      	mov	r3, r4
 80049c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	2301      	movs	r3, #1
 80049c8:	e7de      	b.n	8004988 <_sungetc_r+0x34>

080049ca <__ssrefill_r>:
 80049ca:	b510      	push	{r4, lr}
 80049cc:	460c      	mov	r4, r1
 80049ce:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80049d0:	b169      	cbz	r1, 80049ee <__ssrefill_r+0x24>
 80049d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049d6:	4299      	cmp	r1, r3
 80049d8:	d001      	beq.n	80049de <__ssrefill_r+0x14>
 80049da:	f7ff fd6b 	bl	80044b4 <_free_r>
 80049de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049e0:	6063      	str	r3, [r4, #4]
 80049e2:	2000      	movs	r0, #0
 80049e4:	6360      	str	r0, [r4, #52]	@ 0x34
 80049e6:	b113      	cbz	r3, 80049ee <__ssrefill_r+0x24>
 80049e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80049ea:	6023      	str	r3, [r4, #0]
 80049ec:	bd10      	pop	{r4, pc}
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	2300      	movs	r3, #0
 80049f4:	6063      	str	r3, [r4, #4]
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	f043 0320 	orr.w	r3, r3, #32
 80049fc:	81a3      	strh	r3, [r4, #12]
 80049fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004a02:	e7f3      	b.n	80049ec <__ssrefill_r+0x22>

08004a04 <__ssvfiscanf_r>:
 8004a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	460c      	mov	r4, r1
 8004a0a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004a0e:	2100      	movs	r1, #0
 8004a10:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004a14:	49a5      	ldr	r1, [pc, #660]	@ (8004cac <__ssvfiscanf_r+0x2a8>)
 8004a16:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004a18:	f10d 0804 	add.w	r8, sp, #4
 8004a1c:	49a4      	ldr	r1, [pc, #656]	@ (8004cb0 <__ssvfiscanf_r+0x2ac>)
 8004a1e:	4fa5      	ldr	r7, [pc, #660]	@ (8004cb4 <__ssvfiscanf_r+0x2b0>)
 8004a20:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004a24:	4606      	mov	r6, r0
 8004a26:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	7813      	ldrb	r3, [r2, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8158 	beq.w	8004ce2 <__ssvfiscanf_r+0x2de>
 8004a32:	5cf9      	ldrb	r1, [r7, r3]
 8004a34:	f011 0108 	ands.w	r1, r1, #8
 8004a38:	f102 0501 	add.w	r5, r2, #1
 8004a3c:	d019      	beq.n	8004a72 <__ssvfiscanf_r+0x6e>
 8004a3e:	6863      	ldr	r3, [r4, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	dd0f      	ble.n	8004a64 <__ssvfiscanf_r+0x60>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	781a      	ldrb	r2, [r3, #0]
 8004a48:	5cba      	ldrb	r2, [r7, r2]
 8004a4a:	0712      	lsls	r2, r2, #28
 8004a4c:	d401      	bmi.n	8004a52 <__ssvfiscanf_r+0x4e>
 8004a4e:	462a      	mov	r2, r5
 8004a50:	e7eb      	b.n	8004a2a <__ssvfiscanf_r+0x26>
 8004a52:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004a54:	3201      	adds	r2, #1
 8004a56:	9245      	str	r2, [sp, #276]	@ 0x114
 8004a58:	6862      	ldr	r2, [r4, #4]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	3a01      	subs	r2, #1
 8004a5e:	6062      	str	r2, [r4, #4]
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	e7ec      	b.n	8004a3e <__ssvfiscanf_r+0x3a>
 8004a64:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004a66:	4621      	mov	r1, r4
 8004a68:	4630      	mov	r0, r6
 8004a6a:	4798      	blx	r3
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d0e9      	beq.n	8004a44 <__ssvfiscanf_r+0x40>
 8004a70:	e7ed      	b.n	8004a4e <__ssvfiscanf_r+0x4a>
 8004a72:	2b25      	cmp	r3, #37	@ 0x25
 8004a74:	d012      	beq.n	8004a9c <__ssvfiscanf_r+0x98>
 8004a76:	4699      	mov	r9, r3
 8004a78:	6863      	ldr	r3, [r4, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f340 8093 	ble.w	8004ba6 <__ssvfiscanf_r+0x1a2>
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	7813      	ldrb	r3, [r2, #0]
 8004a84:	454b      	cmp	r3, r9
 8004a86:	f040 812c 	bne.w	8004ce2 <__ssvfiscanf_r+0x2de>
 8004a8a:	6863      	ldr	r3, [r4, #4]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	6063      	str	r3, [r4, #4]
 8004a90:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004a92:	3201      	adds	r2, #1
 8004a94:	3301      	adds	r3, #1
 8004a96:	6022      	str	r2, [r4, #0]
 8004a98:	9345      	str	r3, [sp, #276]	@ 0x114
 8004a9a:	e7d8      	b.n	8004a4e <__ssvfiscanf_r+0x4a>
 8004a9c:	9141      	str	r1, [sp, #260]	@ 0x104
 8004a9e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004aa0:	7853      	ldrb	r3, [r2, #1]
 8004aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aa4:	bf02      	ittt	eq
 8004aa6:	2310      	moveq	r3, #16
 8004aa8:	1c95      	addeq	r5, r2, #2
 8004aaa:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004aac:	220a      	movs	r2, #10
 8004aae:	46a9      	mov	r9, r5
 8004ab0:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004ab4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d91e      	bls.n	8004afa <__ssvfiscanf_r+0xf6>
 8004abc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8004cb8 <__ssvfiscanf_r+0x2b4>
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	f7fb fb8c 	bl	80001e0 <memchr>
 8004ac8:	b138      	cbz	r0, 8004ada <__ssvfiscanf_r+0xd6>
 8004aca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004acc:	eba0 000a 	sub.w	r0, r0, sl
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	4083      	lsls	r3, r0
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	9341      	str	r3, [sp, #260]	@ 0x104
 8004ad8:	464d      	mov	r5, r9
 8004ada:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ade:	2b78      	cmp	r3, #120	@ 0x78
 8004ae0:	d806      	bhi.n	8004af0 <__ssvfiscanf_r+0xec>
 8004ae2:	2b57      	cmp	r3, #87	@ 0x57
 8004ae4:	d810      	bhi.n	8004b08 <__ssvfiscanf_r+0x104>
 8004ae6:	2b25      	cmp	r3, #37	@ 0x25
 8004ae8:	d0c5      	beq.n	8004a76 <__ssvfiscanf_r+0x72>
 8004aea:	d857      	bhi.n	8004b9c <__ssvfiscanf_r+0x198>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d065      	beq.n	8004bbc <__ssvfiscanf_r+0x1b8>
 8004af0:	2303      	movs	r3, #3
 8004af2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004af4:	230a      	movs	r3, #10
 8004af6:	9342      	str	r3, [sp, #264]	@ 0x108
 8004af8:	e078      	b.n	8004bec <__ssvfiscanf_r+0x1e8>
 8004afa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004afc:	fb02 1103 	mla	r1, r2, r3, r1
 8004b00:	3930      	subs	r1, #48	@ 0x30
 8004b02:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004b04:	464d      	mov	r5, r9
 8004b06:	e7d2      	b.n	8004aae <__ssvfiscanf_r+0xaa>
 8004b08:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004b0c:	2a20      	cmp	r2, #32
 8004b0e:	d8ef      	bhi.n	8004af0 <__ssvfiscanf_r+0xec>
 8004b10:	a101      	add	r1, pc, #4	@ (adr r1, 8004b18 <__ssvfiscanf_r+0x114>)
 8004b12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004bcb 	.word	0x08004bcb
 8004b1c:	08004af1 	.word	0x08004af1
 8004b20:	08004af1 	.word	0x08004af1
 8004b24:	08004c25 	.word	0x08004c25
 8004b28:	08004af1 	.word	0x08004af1
 8004b2c:	08004af1 	.word	0x08004af1
 8004b30:	08004af1 	.word	0x08004af1
 8004b34:	08004af1 	.word	0x08004af1
 8004b38:	08004af1 	.word	0x08004af1
 8004b3c:	08004af1 	.word	0x08004af1
 8004b40:	08004af1 	.word	0x08004af1
 8004b44:	08004c3b 	.word	0x08004c3b
 8004b48:	08004c21 	.word	0x08004c21
 8004b4c:	08004ba3 	.word	0x08004ba3
 8004b50:	08004ba3 	.word	0x08004ba3
 8004b54:	08004ba3 	.word	0x08004ba3
 8004b58:	08004af1 	.word	0x08004af1
 8004b5c:	08004bdd 	.word	0x08004bdd
 8004b60:	08004af1 	.word	0x08004af1
 8004b64:	08004af1 	.word	0x08004af1
 8004b68:	08004af1 	.word	0x08004af1
 8004b6c:	08004af1 	.word	0x08004af1
 8004b70:	08004c4b 	.word	0x08004c4b
 8004b74:	08004be5 	.word	0x08004be5
 8004b78:	08004bc3 	.word	0x08004bc3
 8004b7c:	08004af1 	.word	0x08004af1
 8004b80:	08004af1 	.word	0x08004af1
 8004b84:	08004c47 	.word	0x08004c47
 8004b88:	08004af1 	.word	0x08004af1
 8004b8c:	08004c21 	.word	0x08004c21
 8004b90:	08004af1 	.word	0x08004af1
 8004b94:	08004af1 	.word	0x08004af1
 8004b98:	08004bcb 	.word	0x08004bcb
 8004b9c:	3b45      	subs	r3, #69	@ 0x45
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d8a6      	bhi.n	8004af0 <__ssvfiscanf_r+0xec>
 8004ba2:	2305      	movs	r3, #5
 8004ba4:	e021      	b.n	8004bea <__ssvfiscanf_r+0x1e6>
 8004ba6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4630      	mov	r0, r6
 8004bac:	4798      	blx	r3
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	f43f af66 	beq.w	8004a80 <__ssvfiscanf_r+0x7c>
 8004bb4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	f040 808b 	bne.w	8004cd2 <__ssvfiscanf_r+0x2ce>
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	e08b      	b.n	8004cda <__ssvfiscanf_r+0x2d6>
 8004bc2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004bc4:	f042 0220 	orr.w	r2, r2, #32
 8004bc8:	9241      	str	r2, [sp, #260]	@ 0x104
 8004bca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004bcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bd0:	9241      	str	r2, [sp, #260]	@ 0x104
 8004bd2:	2210      	movs	r2, #16
 8004bd4:	2b6e      	cmp	r3, #110	@ 0x6e
 8004bd6:	9242      	str	r2, [sp, #264]	@ 0x108
 8004bd8:	d902      	bls.n	8004be0 <__ssvfiscanf_r+0x1dc>
 8004bda:	e005      	b.n	8004be8 <__ssvfiscanf_r+0x1e4>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9342      	str	r3, [sp, #264]	@ 0x108
 8004be0:	2303      	movs	r3, #3
 8004be2:	e002      	b.n	8004bea <__ssvfiscanf_r+0x1e6>
 8004be4:	2308      	movs	r3, #8
 8004be6:	9342      	str	r3, [sp, #264]	@ 0x108
 8004be8:	2304      	movs	r3, #4
 8004bea:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004bec:	6863      	ldr	r3, [r4, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	dd39      	ble.n	8004c66 <__ssvfiscanf_r+0x262>
 8004bf2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004bf4:	0659      	lsls	r1, r3, #25
 8004bf6:	d404      	bmi.n	8004c02 <__ssvfiscanf_r+0x1fe>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	5cba      	ldrb	r2, [r7, r2]
 8004bfe:	0712      	lsls	r2, r2, #28
 8004c00:	d438      	bmi.n	8004c74 <__ssvfiscanf_r+0x270>
 8004c02:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	dc47      	bgt.n	8004c98 <__ssvfiscanf_r+0x294>
 8004c08:	466b      	mov	r3, sp
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	a941      	add	r1, sp, #260	@ 0x104
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f000 f9fa 	bl	8005008 <_scanf_chars>
 8004c14:	2801      	cmp	r0, #1
 8004c16:	d064      	beq.n	8004ce2 <__ssvfiscanf_r+0x2de>
 8004c18:	2802      	cmp	r0, #2
 8004c1a:	f47f af18 	bne.w	8004a4e <__ssvfiscanf_r+0x4a>
 8004c1e:	e7c9      	b.n	8004bb4 <__ssvfiscanf_r+0x1b0>
 8004c20:	220a      	movs	r2, #10
 8004c22:	e7d7      	b.n	8004bd4 <__ssvfiscanf_r+0x1d0>
 8004c24:	4629      	mov	r1, r5
 8004c26:	4640      	mov	r0, r8
 8004c28:	f000 fb3c 	bl	80052a4 <__sccl>
 8004c2c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c32:	9341      	str	r3, [sp, #260]	@ 0x104
 8004c34:	4605      	mov	r5, r0
 8004c36:	2301      	movs	r3, #1
 8004c38:	e7d7      	b.n	8004bea <__ssvfiscanf_r+0x1e6>
 8004c3a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c40:	9341      	str	r3, [sp, #260]	@ 0x104
 8004c42:	2300      	movs	r3, #0
 8004c44:	e7d1      	b.n	8004bea <__ssvfiscanf_r+0x1e6>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e7cf      	b.n	8004bea <__ssvfiscanf_r+0x1e6>
 8004c4a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004c4c:	06c3      	lsls	r3, r0, #27
 8004c4e:	f53f aefe 	bmi.w	8004a4e <__ssvfiscanf_r+0x4a>
 8004c52:	9b00      	ldr	r3, [sp, #0]
 8004c54:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004c56:	1d19      	adds	r1, r3, #4
 8004c58:	9100      	str	r1, [sp, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	07c0      	lsls	r0, r0, #31
 8004c5e:	bf4c      	ite	mi
 8004c60:	801a      	strhmi	r2, [r3, #0]
 8004c62:	601a      	strpl	r2, [r3, #0]
 8004c64:	e6f3      	b.n	8004a4e <__ssvfiscanf_r+0x4a>
 8004c66:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004c68:	4621      	mov	r1, r4
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	4798      	blx	r3
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d0bf      	beq.n	8004bf2 <__ssvfiscanf_r+0x1ee>
 8004c72:	e79f      	b.n	8004bb4 <__ssvfiscanf_r+0x1b0>
 8004c74:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004c76:	3201      	adds	r2, #1
 8004c78:	9245      	str	r2, [sp, #276]	@ 0x114
 8004c7a:	6862      	ldr	r2, [r4, #4]
 8004c7c:	3a01      	subs	r2, #1
 8004c7e:	2a00      	cmp	r2, #0
 8004c80:	6062      	str	r2, [r4, #4]
 8004c82:	dd02      	ble.n	8004c8a <__ssvfiscanf_r+0x286>
 8004c84:	3301      	adds	r3, #1
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	e7b6      	b.n	8004bf8 <__ssvfiscanf_r+0x1f4>
 8004c8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	4630      	mov	r0, r6
 8004c90:	4798      	blx	r3
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d0b0      	beq.n	8004bf8 <__ssvfiscanf_r+0x1f4>
 8004c96:	e78d      	b.n	8004bb4 <__ssvfiscanf_r+0x1b0>
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	dc0f      	bgt.n	8004cbc <__ssvfiscanf_r+0x2b8>
 8004c9c:	466b      	mov	r3, sp
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	a941      	add	r1, sp, #260	@ 0x104
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f000 fa0a 	bl	80050bc <_scanf_i>
 8004ca8:	e7b4      	b.n	8004c14 <__ssvfiscanf_r+0x210>
 8004caa:	bf00      	nop
 8004cac:	08004955 	.word	0x08004955
 8004cb0:	080049cb 	.word	0x080049cb
 8004cb4:	08005bdf 	.word	0x08005bdf
 8004cb8:	08005b96 	.word	0x08005b96
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <__ssvfiscanf_r+0x2e4>)
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f43f aec5 	beq.w	8004a4e <__ssvfiscanf_r+0x4a>
 8004cc4:	466b      	mov	r3, sp
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	a941      	add	r1, sp, #260	@ 0x104
 8004cca:	4630      	mov	r0, r6
 8004ccc:	f3af 8000 	nop.w
 8004cd0:	e7a0      	b.n	8004c14 <__ssvfiscanf_r+0x210>
 8004cd2:	89a3      	ldrh	r3, [r4, #12]
 8004cd4:	065b      	lsls	r3, r3, #25
 8004cd6:	f53f af71 	bmi.w	8004bbc <__ssvfiscanf_r+0x1b8>
 8004cda:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004ce4:	e7f9      	b.n	8004cda <__ssvfiscanf_r+0x2d6>
 8004ce6:	bf00      	nop
 8004ce8:	00000000 	.word	0x00000000

08004cec <_printf_common>:
 8004cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf0:	4616      	mov	r6, r2
 8004cf2:	4698      	mov	r8, r3
 8004cf4:	688a      	ldr	r2, [r1, #8]
 8004cf6:	690b      	ldr	r3, [r1, #16]
 8004cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	bfb8      	it	lt
 8004d00:	4613      	movlt	r3, r2
 8004d02:	6033      	str	r3, [r6, #0]
 8004d04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d08:	4607      	mov	r7, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	b10a      	cbz	r2, 8004d12 <_printf_common+0x26>
 8004d0e:	3301      	adds	r3, #1
 8004d10:	6033      	str	r3, [r6, #0]
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	0699      	lsls	r1, r3, #26
 8004d16:	bf42      	ittt	mi
 8004d18:	6833      	ldrmi	r3, [r6, #0]
 8004d1a:	3302      	addmi	r3, #2
 8004d1c:	6033      	strmi	r3, [r6, #0]
 8004d1e:	6825      	ldr	r5, [r4, #0]
 8004d20:	f015 0506 	ands.w	r5, r5, #6
 8004d24:	d106      	bne.n	8004d34 <_printf_common+0x48>
 8004d26:	f104 0a19 	add.w	sl, r4, #25
 8004d2a:	68e3      	ldr	r3, [r4, #12]
 8004d2c:	6832      	ldr	r2, [r6, #0]
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	42ab      	cmp	r3, r5
 8004d32:	dc26      	bgt.n	8004d82 <_printf_common+0x96>
 8004d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d38:	6822      	ldr	r2, [r4, #0]
 8004d3a:	3b00      	subs	r3, #0
 8004d3c:	bf18      	it	ne
 8004d3e:	2301      	movne	r3, #1
 8004d40:	0692      	lsls	r2, r2, #26
 8004d42:	d42b      	bmi.n	8004d9c <_printf_common+0xb0>
 8004d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d48:	4641      	mov	r1, r8
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	47c8      	blx	r9
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d01e      	beq.n	8004d90 <_printf_common+0xa4>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	6922      	ldr	r2, [r4, #16]
 8004d56:	f003 0306 	and.w	r3, r3, #6
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	bf02      	ittt	eq
 8004d5e:	68e5      	ldreq	r5, [r4, #12]
 8004d60:	6833      	ldreq	r3, [r6, #0]
 8004d62:	1aed      	subeq	r5, r5, r3
 8004d64:	68a3      	ldr	r3, [r4, #8]
 8004d66:	bf0c      	ite	eq
 8004d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d6c:	2500      	movne	r5, #0
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	bfc4      	itt	gt
 8004d72:	1a9b      	subgt	r3, r3, r2
 8004d74:	18ed      	addgt	r5, r5, r3
 8004d76:	2600      	movs	r6, #0
 8004d78:	341a      	adds	r4, #26
 8004d7a:	42b5      	cmp	r5, r6
 8004d7c:	d11a      	bne.n	8004db4 <_printf_common+0xc8>
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e008      	b.n	8004d94 <_printf_common+0xa8>
 8004d82:	2301      	movs	r3, #1
 8004d84:	4652      	mov	r2, sl
 8004d86:	4641      	mov	r1, r8
 8004d88:	4638      	mov	r0, r7
 8004d8a:	47c8      	blx	r9
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d103      	bne.n	8004d98 <_printf_common+0xac>
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295
 8004d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d98:	3501      	adds	r5, #1
 8004d9a:	e7c6      	b.n	8004d2a <_printf_common+0x3e>
 8004d9c:	18e1      	adds	r1, r4, r3
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	2030      	movs	r0, #48	@ 0x30
 8004da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004da6:	4422      	add	r2, r4
 8004da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004db0:	3302      	adds	r3, #2
 8004db2:	e7c7      	b.n	8004d44 <_printf_common+0x58>
 8004db4:	2301      	movs	r3, #1
 8004db6:	4622      	mov	r2, r4
 8004db8:	4641      	mov	r1, r8
 8004dba:	4638      	mov	r0, r7
 8004dbc:	47c8      	blx	r9
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d0e6      	beq.n	8004d90 <_printf_common+0xa4>
 8004dc2:	3601      	adds	r6, #1
 8004dc4:	e7d9      	b.n	8004d7a <_printf_common+0x8e>
	...

08004dc8 <_printf_i>:
 8004dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dcc:	7e0f      	ldrb	r7, [r1, #24]
 8004dce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dd0:	2f78      	cmp	r7, #120	@ 0x78
 8004dd2:	4691      	mov	r9, r2
 8004dd4:	4680      	mov	r8, r0
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	469a      	mov	sl, r3
 8004dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dde:	d807      	bhi.n	8004df0 <_printf_i+0x28>
 8004de0:	2f62      	cmp	r7, #98	@ 0x62
 8004de2:	d80a      	bhi.n	8004dfa <_printf_i+0x32>
 8004de4:	2f00      	cmp	r7, #0
 8004de6:	f000 80d2 	beq.w	8004f8e <_printf_i+0x1c6>
 8004dea:	2f58      	cmp	r7, #88	@ 0x58
 8004dec:	f000 80b9 	beq.w	8004f62 <_printf_i+0x19a>
 8004df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004df8:	e03a      	b.n	8004e70 <_printf_i+0xa8>
 8004dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dfe:	2b15      	cmp	r3, #21
 8004e00:	d8f6      	bhi.n	8004df0 <_printf_i+0x28>
 8004e02:	a101      	add	r1, pc, #4	@ (adr r1, 8004e08 <_printf_i+0x40>)
 8004e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e08:	08004e61 	.word	0x08004e61
 8004e0c:	08004e75 	.word	0x08004e75
 8004e10:	08004df1 	.word	0x08004df1
 8004e14:	08004df1 	.word	0x08004df1
 8004e18:	08004df1 	.word	0x08004df1
 8004e1c:	08004df1 	.word	0x08004df1
 8004e20:	08004e75 	.word	0x08004e75
 8004e24:	08004df1 	.word	0x08004df1
 8004e28:	08004df1 	.word	0x08004df1
 8004e2c:	08004df1 	.word	0x08004df1
 8004e30:	08004df1 	.word	0x08004df1
 8004e34:	08004f75 	.word	0x08004f75
 8004e38:	08004e9f 	.word	0x08004e9f
 8004e3c:	08004f2f 	.word	0x08004f2f
 8004e40:	08004df1 	.word	0x08004df1
 8004e44:	08004df1 	.word	0x08004df1
 8004e48:	08004f97 	.word	0x08004f97
 8004e4c:	08004df1 	.word	0x08004df1
 8004e50:	08004e9f 	.word	0x08004e9f
 8004e54:	08004df1 	.word	0x08004df1
 8004e58:	08004df1 	.word	0x08004df1
 8004e5c:	08004f37 	.word	0x08004f37
 8004e60:	6833      	ldr	r3, [r6, #0]
 8004e62:	1d1a      	adds	r2, r3, #4
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6032      	str	r2, [r6, #0]
 8004e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e70:	2301      	movs	r3, #1
 8004e72:	e09d      	b.n	8004fb0 <_printf_i+0x1e8>
 8004e74:	6833      	ldr	r3, [r6, #0]
 8004e76:	6820      	ldr	r0, [r4, #0]
 8004e78:	1d19      	adds	r1, r3, #4
 8004e7a:	6031      	str	r1, [r6, #0]
 8004e7c:	0606      	lsls	r6, r0, #24
 8004e7e:	d501      	bpl.n	8004e84 <_printf_i+0xbc>
 8004e80:	681d      	ldr	r5, [r3, #0]
 8004e82:	e003      	b.n	8004e8c <_printf_i+0xc4>
 8004e84:	0645      	lsls	r5, r0, #25
 8004e86:	d5fb      	bpl.n	8004e80 <_printf_i+0xb8>
 8004e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e8c:	2d00      	cmp	r5, #0
 8004e8e:	da03      	bge.n	8004e98 <_printf_i+0xd0>
 8004e90:	232d      	movs	r3, #45	@ 0x2d
 8004e92:	426d      	negs	r5, r5
 8004e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e98:	4859      	ldr	r0, [pc, #356]	@ (8005000 <_printf_i+0x238>)
 8004e9a:	230a      	movs	r3, #10
 8004e9c:	e011      	b.n	8004ec2 <_printf_i+0xfa>
 8004e9e:	6821      	ldr	r1, [r4, #0]
 8004ea0:	6833      	ldr	r3, [r6, #0]
 8004ea2:	0608      	lsls	r0, r1, #24
 8004ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ea8:	d402      	bmi.n	8004eb0 <_printf_i+0xe8>
 8004eaa:	0649      	lsls	r1, r1, #25
 8004eac:	bf48      	it	mi
 8004eae:	b2ad      	uxthmi	r5, r5
 8004eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eb2:	4853      	ldr	r0, [pc, #332]	@ (8005000 <_printf_i+0x238>)
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	bf14      	ite	ne
 8004eb8:	230a      	movne	r3, #10
 8004eba:	2308      	moveq	r3, #8
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ec2:	6866      	ldr	r6, [r4, #4]
 8004ec4:	60a6      	str	r6, [r4, #8]
 8004ec6:	2e00      	cmp	r6, #0
 8004ec8:	bfa2      	ittt	ge
 8004eca:	6821      	ldrge	r1, [r4, #0]
 8004ecc:	f021 0104 	bicge.w	r1, r1, #4
 8004ed0:	6021      	strge	r1, [r4, #0]
 8004ed2:	b90d      	cbnz	r5, 8004ed8 <_printf_i+0x110>
 8004ed4:	2e00      	cmp	r6, #0
 8004ed6:	d04b      	beq.n	8004f70 <_printf_i+0x1a8>
 8004ed8:	4616      	mov	r6, r2
 8004eda:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ede:	fb03 5711 	mls	r7, r3, r1, r5
 8004ee2:	5dc7      	ldrb	r7, [r0, r7]
 8004ee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ee8:	462f      	mov	r7, r5
 8004eea:	42bb      	cmp	r3, r7
 8004eec:	460d      	mov	r5, r1
 8004eee:	d9f4      	bls.n	8004eda <_printf_i+0x112>
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d10b      	bne.n	8004f0c <_printf_i+0x144>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	07df      	lsls	r7, r3, #31
 8004ef8:	d508      	bpl.n	8004f0c <_printf_i+0x144>
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	6861      	ldr	r1, [r4, #4]
 8004efe:	4299      	cmp	r1, r3
 8004f00:	bfde      	ittt	le
 8004f02:	2330      	movle	r3, #48	@ 0x30
 8004f04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f0c:	1b92      	subs	r2, r2, r6
 8004f0e:	6122      	str	r2, [r4, #16]
 8004f10:	f8cd a000 	str.w	sl, [sp]
 8004f14:	464b      	mov	r3, r9
 8004f16:	aa03      	add	r2, sp, #12
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	f7ff fee6 	bl	8004cec <_printf_common>
 8004f20:	3001      	adds	r0, #1
 8004f22:	d14a      	bne.n	8004fba <_printf_i+0x1f2>
 8004f24:	f04f 30ff 	mov.w	r0, #4294967295
 8004f28:	b004      	add	sp, #16
 8004f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	f043 0320 	orr.w	r3, r3, #32
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	4833      	ldr	r0, [pc, #204]	@ (8005004 <_printf_i+0x23c>)
 8004f38:	2778      	movs	r7, #120	@ 0x78
 8004f3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	6831      	ldr	r1, [r6, #0]
 8004f42:	061f      	lsls	r7, r3, #24
 8004f44:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f48:	d402      	bmi.n	8004f50 <_printf_i+0x188>
 8004f4a:	065f      	lsls	r7, r3, #25
 8004f4c:	bf48      	it	mi
 8004f4e:	b2ad      	uxthmi	r5, r5
 8004f50:	6031      	str	r1, [r6, #0]
 8004f52:	07d9      	lsls	r1, r3, #31
 8004f54:	bf44      	itt	mi
 8004f56:	f043 0320 	orrmi.w	r3, r3, #32
 8004f5a:	6023      	strmi	r3, [r4, #0]
 8004f5c:	b11d      	cbz	r5, 8004f66 <_printf_i+0x19e>
 8004f5e:	2310      	movs	r3, #16
 8004f60:	e7ac      	b.n	8004ebc <_printf_i+0xf4>
 8004f62:	4827      	ldr	r0, [pc, #156]	@ (8005000 <_printf_i+0x238>)
 8004f64:	e7e9      	b.n	8004f3a <_printf_i+0x172>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	f023 0320 	bic.w	r3, r3, #32
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	e7f6      	b.n	8004f5e <_printf_i+0x196>
 8004f70:	4616      	mov	r6, r2
 8004f72:	e7bd      	b.n	8004ef0 <_printf_i+0x128>
 8004f74:	6833      	ldr	r3, [r6, #0]
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	6961      	ldr	r1, [r4, #20]
 8004f7a:	1d18      	adds	r0, r3, #4
 8004f7c:	6030      	str	r0, [r6, #0]
 8004f7e:	062e      	lsls	r6, r5, #24
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	d501      	bpl.n	8004f88 <_printf_i+0x1c0>
 8004f84:	6019      	str	r1, [r3, #0]
 8004f86:	e002      	b.n	8004f8e <_printf_i+0x1c6>
 8004f88:	0668      	lsls	r0, r5, #25
 8004f8a:	d5fb      	bpl.n	8004f84 <_printf_i+0x1bc>
 8004f8c:	8019      	strh	r1, [r3, #0]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	6123      	str	r3, [r4, #16]
 8004f92:	4616      	mov	r6, r2
 8004f94:	e7bc      	b.n	8004f10 <_printf_i+0x148>
 8004f96:	6833      	ldr	r3, [r6, #0]
 8004f98:	1d1a      	adds	r2, r3, #4
 8004f9a:	6032      	str	r2, [r6, #0]
 8004f9c:	681e      	ldr	r6, [r3, #0]
 8004f9e:	6862      	ldr	r2, [r4, #4]
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f7fb f91c 	bl	80001e0 <memchr>
 8004fa8:	b108      	cbz	r0, 8004fae <_printf_i+0x1e6>
 8004faa:	1b80      	subs	r0, r0, r6
 8004fac:	6060      	str	r0, [r4, #4]
 8004fae:	6863      	ldr	r3, [r4, #4]
 8004fb0:	6123      	str	r3, [r4, #16]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb8:	e7aa      	b.n	8004f10 <_printf_i+0x148>
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	47d0      	blx	sl
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d0ad      	beq.n	8004f24 <_printf_i+0x15c>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	079b      	lsls	r3, r3, #30
 8004fcc:	d413      	bmi.n	8004ff6 <_printf_i+0x22e>
 8004fce:	68e0      	ldr	r0, [r4, #12]
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	4298      	cmp	r0, r3
 8004fd4:	bfb8      	it	lt
 8004fd6:	4618      	movlt	r0, r3
 8004fd8:	e7a6      	b.n	8004f28 <_printf_i+0x160>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4632      	mov	r2, r6
 8004fde:	4649      	mov	r1, r9
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	47d0      	blx	sl
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d09d      	beq.n	8004f24 <_printf_i+0x15c>
 8004fe8:	3501      	adds	r5, #1
 8004fea:	68e3      	ldr	r3, [r4, #12]
 8004fec:	9903      	ldr	r1, [sp, #12]
 8004fee:	1a5b      	subs	r3, r3, r1
 8004ff0:	42ab      	cmp	r3, r5
 8004ff2:	dcf2      	bgt.n	8004fda <_printf_i+0x212>
 8004ff4:	e7eb      	b.n	8004fce <_printf_i+0x206>
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	f104 0619 	add.w	r6, r4, #25
 8004ffc:	e7f5      	b.n	8004fea <_printf_i+0x222>
 8004ffe:	bf00      	nop
 8005000:	08005ba1 	.word	0x08005ba1
 8005004:	08005bb2 	.word	0x08005bb2

08005008 <_scanf_chars>:
 8005008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800500c:	4615      	mov	r5, r2
 800500e:	688a      	ldr	r2, [r1, #8]
 8005010:	4680      	mov	r8, r0
 8005012:	460c      	mov	r4, r1
 8005014:	b932      	cbnz	r2, 8005024 <_scanf_chars+0x1c>
 8005016:	698a      	ldr	r2, [r1, #24]
 8005018:	2a00      	cmp	r2, #0
 800501a:	bf14      	ite	ne
 800501c:	f04f 32ff 	movne.w	r2, #4294967295
 8005020:	2201      	moveq	r2, #1
 8005022:	608a      	str	r2, [r1, #8]
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80050b8 <_scanf_chars+0xb0>
 800502a:	06d1      	lsls	r1, r2, #27
 800502c:	bf5f      	itttt	pl
 800502e:	681a      	ldrpl	r2, [r3, #0]
 8005030:	1d11      	addpl	r1, r2, #4
 8005032:	6019      	strpl	r1, [r3, #0]
 8005034:	6816      	ldrpl	r6, [r2, #0]
 8005036:	2700      	movs	r7, #0
 8005038:	69a0      	ldr	r0, [r4, #24]
 800503a:	b188      	cbz	r0, 8005060 <_scanf_chars+0x58>
 800503c:	2801      	cmp	r0, #1
 800503e:	d107      	bne.n	8005050 <_scanf_chars+0x48>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	781a      	ldrb	r2, [r3, #0]
 8005044:	6963      	ldr	r3, [r4, #20]
 8005046:	5c9b      	ldrb	r3, [r3, r2]
 8005048:	b953      	cbnz	r3, 8005060 <_scanf_chars+0x58>
 800504a:	2f00      	cmp	r7, #0
 800504c:	d031      	beq.n	80050b2 <_scanf_chars+0xaa>
 800504e:	e022      	b.n	8005096 <_scanf_chars+0x8e>
 8005050:	2802      	cmp	r0, #2
 8005052:	d120      	bne.n	8005096 <_scanf_chars+0x8e>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	f819 3003 	ldrb.w	r3, [r9, r3]
 800505c:	071b      	lsls	r3, r3, #28
 800505e:	d41a      	bmi.n	8005096 <_scanf_chars+0x8e>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	06da      	lsls	r2, r3, #27
 8005064:	bf5e      	ittt	pl
 8005066:	682b      	ldrpl	r3, [r5, #0]
 8005068:	781b      	ldrbpl	r3, [r3, #0]
 800506a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800506e:	682a      	ldr	r2, [r5, #0]
 8005070:	686b      	ldr	r3, [r5, #4]
 8005072:	3201      	adds	r2, #1
 8005074:	602a      	str	r2, [r5, #0]
 8005076:	68a2      	ldr	r2, [r4, #8]
 8005078:	3b01      	subs	r3, #1
 800507a:	3a01      	subs	r2, #1
 800507c:	606b      	str	r3, [r5, #4]
 800507e:	3701      	adds	r7, #1
 8005080:	60a2      	str	r2, [r4, #8]
 8005082:	b142      	cbz	r2, 8005096 <_scanf_chars+0x8e>
 8005084:	2b00      	cmp	r3, #0
 8005086:	dcd7      	bgt.n	8005038 <_scanf_chars+0x30>
 8005088:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800508c:	4629      	mov	r1, r5
 800508e:	4640      	mov	r0, r8
 8005090:	4798      	blx	r3
 8005092:	2800      	cmp	r0, #0
 8005094:	d0d0      	beq.n	8005038 <_scanf_chars+0x30>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	f013 0310 	ands.w	r3, r3, #16
 800509c:	d105      	bne.n	80050aa <_scanf_chars+0xa2>
 800509e:	68e2      	ldr	r2, [r4, #12]
 80050a0:	3201      	adds	r2, #1
 80050a2:	60e2      	str	r2, [r4, #12]
 80050a4:	69a2      	ldr	r2, [r4, #24]
 80050a6:	b102      	cbz	r2, 80050aa <_scanf_chars+0xa2>
 80050a8:	7033      	strb	r3, [r6, #0]
 80050aa:	6923      	ldr	r3, [r4, #16]
 80050ac:	443b      	add	r3, r7
 80050ae:	6123      	str	r3, [r4, #16]
 80050b0:	2000      	movs	r0, #0
 80050b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b6:	bf00      	nop
 80050b8:	08005bdf 	.word	0x08005bdf

080050bc <_scanf_i>:
 80050bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c0:	4698      	mov	r8, r3
 80050c2:	4b74      	ldr	r3, [pc, #464]	@ (8005294 <_scanf_i+0x1d8>)
 80050c4:	460c      	mov	r4, r1
 80050c6:	4682      	mov	sl, r0
 80050c8:	4616      	mov	r6, r2
 80050ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050ce:	b087      	sub	sp, #28
 80050d0:	ab03      	add	r3, sp, #12
 80050d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80050d6:	4b70      	ldr	r3, [pc, #448]	@ (8005298 <_scanf_i+0x1dc>)
 80050d8:	69a1      	ldr	r1, [r4, #24]
 80050da:	4a70      	ldr	r2, [pc, #448]	@ (800529c <_scanf_i+0x1e0>)
 80050dc:	2903      	cmp	r1, #3
 80050de:	bf08      	it	eq
 80050e0:	461a      	moveq	r2, r3
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	9201      	str	r2, [sp, #4]
 80050e6:	1e5a      	subs	r2, r3, #1
 80050e8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80050ec:	bf88      	it	hi
 80050ee:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80050f2:	4627      	mov	r7, r4
 80050f4:	bf82      	ittt	hi
 80050f6:	eb03 0905 	addhi.w	r9, r3, r5
 80050fa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80050fe:	60a3      	strhi	r3, [r4, #8]
 8005100:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005104:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005108:	bf98      	it	ls
 800510a:	f04f 0900 	movls.w	r9, #0
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	463d      	mov	r5, r7
 8005112:	f04f 0b00 	mov.w	fp, #0
 8005116:	6831      	ldr	r1, [r6, #0]
 8005118:	ab03      	add	r3, sp, #12
 800511a:	7809      	ldrb	r1, [r1, #0]
 800511c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005120:	2202      	movs	r2, #2
 8005122:	f7fb f85d 	bl	80001e0 <memchr>
 8005126:	b328      	cbz	r0, 8005174 <_scanf_i+0xb8>
 8005128:	f1bb 0f01 	cmp.w	fp, #1
 800512c:	d159      	bne.n	80051e2 <_scanf_i+0x126>
 800512e:	6862      	ldr	r2, [r4, #4]
 8005130:	b92a      	cbnz	r2, 800513e <_scanf_i+0x82>
 8005132:	6822      	ldr	r2, [r4, #0]
 8005134:	2108      	movs	r1, #8
 8005136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800513a:	6061      	str	r1, [r4, #4]
 800513c:	6022      	str	r2, [r4, #0]
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005144:	6022      	str	r2, [r4, #0]
 8005146:	68a2      	ldr	r2, [r4, #8]
 8005148:	1e51      	subs	r1, r2, #1
 800514a:	60a1      	str	r1, [r4, #8]
 800514c:	b192      	cbz	r2, 8005174 <_scanf_i+0xb8>
 800514e:	6832      	ldr	r2, [r6, #0]
 8005150:	1c51      	adds	r1, r2, #1
 8005152:	6031      	str	r1, [r6, #0]
 8005154:	7812      	ldrb	r2, [r2, #0]
 8005156:	f805 2b01 	strb.w	r2, [r5], #1
 800515a:	6872      	ldr	r2, [r6, #4]
 800515c:	3a01      	subs	r2, #1
 800515e:	2a00      	cmp	r2, #0
 8005160:	6072      	str	r2, [r6, #4]
 8005162:	dc07      	bgt.n	8005174 <_scanf_i+0xb8>
 8005164:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005168:	4631      	mov	r1, r6
 800516a:	4650      	mov	r0, sl
 800516c:	4790      	blx	r2
 800516e:	2800      	cmp	r0, #0
 8005170:	f040 8085 	bne.w	800527e <_scanf_i+0x1c2>
 8005174:	f10b 0b01 	add.w	fp, fp, #1
 8005178:	f1bb 0f03 	cmp.w	fp, #3
 800517c:	d1cb      	bne.n	8005116 <_scanf_i+0x5a>
 800517e:	6863      	ldr	r3, [r4, #4]
 8005180:	b90b      	cbnz	r3, 8005186 <_scanf_i+0xca>
 8005182:	230a      	movs	r3, #10
 8005184:	6063      	str	r3, [r4, #4]
 8005186:	6863      	ldr	r3, [r4, #4]
 8005188:	4945      	ldr	r1, [pc, #276]	@ (80052a0 <_scanf_i+0x1e4>)
 800518a:	6960      	ldr	r0, [r4, #20]
 800518c:	1ac9      	subs	r1, r1, r3
 800518e:	f000 f889 	bl	80052a4 <__sccl>
 8005192:	f04f 0b00 	mov.w	fp, #0
 8005196:	68a3      	ldr	r3, [r4, #8]
 8005198:	6822      	ldr	r2, [r4, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d03d      	beq.n	800521a <_scanf_i+0x15e>
 800519e:	6831      	ldr	r1, [r6, #0]
 80051a0:	6960      	ldr	r0, [r4, #20]
 80051a2:	f891 c000 	ldrb.w	ip, [r1]
 80051a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d035      	beq.n	800521a <_scanf_i+0x15e>
 80051ae:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80051b2:	d124      	bne.n	80051fe <_scanf_i+0x142>
 80051b4:	0510      	lsls	r0, r2, #20
 80051b6:	d522      	bpl.n	80051fe <_scanf_i+0x142>
 80051b8:	f10b 0b01 	add.w	fp, fp, #1
 80051bc:	f1b9 0f00 	cmp.w	r9, #0
 80051c0:	d003      	beq.n	80051ca <_scanf_i+0x10e>
 80051c2:	3301      	adds	r3, #1
 80051c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80051c8:	60a3      	str	r3, [r4, #8]
 80051ca:	6873      	ldr	r3, [r6, #4]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	6073      	str	r3, [r6, #4]
 80051d2:	dd1b      	ble.n	800520c <_scanf_i+0x150>
 80051d4:	6833      	ldr	r3, [r6, #0]
 80051d6:	3301      	adds	r3, #1
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	68a3      	ldr	r3, [r4, #8]
 80051dc:	3b01      	subs	r3, #1
 80051de:	60a3      	str	r3, [r4, #8]
 80051e0:	e7d9      	b.n	8005196 <_scanf_i+0xda>
 80051e2:	f1bb 0f02 	cmp.w	fp, #2
 80051e6:	d1ae      	bne.n	8005146 <_scanf_i+0x8a>
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80051ee:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80051f2:	d1bf      	bne.n	8005174 <_scanf_i+0xb8>
 80051f4:	2110      	movs	r1, #16
 80051f6:	6061      	str	r1, [r4, #4]
 80051f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051fc:	e7a2      	b.n	8005144 <_scanf_i+0x88>
 80051fe:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005202:	6022      	str	r2, [r4, #0]
 8005204:	780b      	ldrb	r3, [r1, #0]
 8005206:	f805 3b01 	strb.w	r3, [r5], #1
 800520a:	e7de      	b.n	80051ca <_scanf_i+0x10e>
 800520c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005210:	4631      	mov	r1, r6
 8005212:	4650      	mov	r0, sl
 8005214:	4798      	blx	r3
 8005216:	2800      	cmp	r0, #0
 8005218:	d0df      	beq.n	80051da <_scanf_i+0x11e>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	05d9      	lsls	r1, r3, #23
 800521e:	d50d      	bpl.n	800523c <_scanf_i+0x180>
 8005220:	42bd      	cmp	r5, r7
 8005222:	d909      	bls.n	8005238 <_scanf_i+0x17c>
 8005224:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005228:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800522c:	4632      	mov	r2, r6
 800522e:	4650      	mov	r0, sl
 8005230:	4798      	blx	r3
 8005232:	f105 39ff 	add.w	r9, r5, #4294967295
 8005236:	464d      	mov	r5, r9
 8005238:	42bd      	cmp	r5, r7
 800523a:	d028      	beq.n	800528e <_scanf_i+0x1d2>
 800523c:	6822      	ldr	r2, [r4, #0]
 800523e:	f012 0210 	ands.w	r2, r2, #16
 8005242:	d113      	bne.n	800526c <_scanf_i+0x1b0>
 8005244:	702a      	strb	r2, [r5, #0]
 8005246:	6863      	ldr	r3, [r4, #4]
 8005248:	9e01      	ldr	r6, [sp, #4]
 800524a:	4639      	mov	r1, r7
 800524c:	4650      	mov	r0, sl
 800524e:	47b0      	blx	r6
 8005250:	f8d8 3000 	ldr.w	r3, [r8]
 8005254:	6821      	ldr	r1, [r4, #0]
 8005256:	1d1a      	adds	r2, r3, #4
 8005258:	f8c8 2000 	str.w	r2, [r8]
 800525c:	f011 0f20 	tst.w	r1, #32
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	d00f      	beq.n	8005284 <_scanf_i+0x1c8>
 8005264:	6018      	str	r0, [r3, #0]
 8005266:	68e3      	ldr	r3, [r4, #12]
 8005268:	3301      	adds	r3, #1
 800526a:	60e3      	str	r3, [r4, #12]
 800526c:	6923      	ldr	r3, [r4, #16]
 800526e:	1bed      	subs	r5, r5, r7
 8005270:	445d      	add	r5, fp
 8005272:	442b      	add	r3, r5
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	2000      	movs	r0, #0
 8005278:	b007      	add	sp, #28
 800527a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527e:	f04f 0b00 	mov.w	fp, #0
 8005282:	e7ca      	b.n	800521a <_scanf_i+0x15e>
 8005284:	07ca      	lsls	r2, r1, #31
 8005286:	bf4c      	ite	mi
 8005288:	8018      	strhmi	r0, [r3, #0]
 800528a:	6018      	strpl	r0, [r3, #0]
 800528c:	e7eb      	b.n	8005266 <_scanf_i+0x1aa>
 800528e:	2001      	movs	r0, #1
 8005290:	e7f2      	b.n	8005278 <_scanf_i+0x1bc>
 8005292:	bf00      	nop
 8005294:	08005b3c 	.word	0x08005b3c
 8005298:	0800554d 	.word	0x0800554d
 800529c:	0800562d 	.word	0x0800562d
 80052a0:	08005bd3 	.word	0x08005bd3

080052a4 <__sccl>:
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	780b      	ldrb	r3, [r1, #0]
 80052a8:	4604      	mov	r4, r0
 80052aa:	2b5e      	cmp	r3, #94	@ 0x5e
 80052ac:	bf0b      	itete	eq
 80052ae:	784b      	ldrbeq	r3, [r1, #1]
 80052b0:	1c4a      	addne	r2, r1, #1
 80052b2:	1c8a      	addeq	r2, r1, #2
 80052b4:	2100      	movne	r1, #0
 80052b6:	bf08      	it	eq
 80052b8:	2101      	moveq	r1, #1
 80052ba:	3801      	subs	r0, #1
 80052bc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80052c0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80052c4:	42a8      	cmp	r0, r5
 80052c6:	d1fb      	bne.n	80052c0 <__sccl+0x1c>
 80052c8:	b90b      	cbnz	r3, 80052ce <__sccl+0x2a>
 80052ca:	1e50      	subs	r0, r2, #1
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
 80052ce:	f081 0101 	eor.w	r1, r1, #1
 80052d2:	54e1      	strb	r1, [r4, r3]
 80052d4:	4610      	mov	r0, r2
 80052d6:	4602      	mov	r2, r0
 80052d8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80052dc:	2d2d      	cmp	r5, #45	@ 0x2d
 80052de:	d005      	beq.n	80052ec <__sccl+0x48>
 80052e0:	2d5d      	cmp	r5, #93	@ 0x5d
 80052e2:	d016      	beq.n	8005312 <__sccl+0x6e>
 80052e4:	2d00      	cmp	r5, #0
 80052e6:	d0f1      	beq.n	80052cc <__sccl+0x28>
 80052e8:	462b      	mov	r3, r5
 80052ea:	e7f2      	b.n	80052d2 <__sccl+0x2e>
 80052ec:	7846      	ldrb	r6, [r0, #1]
 80052ee:	2e5d      	cmp	r6, #93	@ 0x5d
 80052f0:	d0fa      	beq.n	80052e8 <__sccl+0x44>
 80052f2:	42b3      	cmp	r3, r6
 80052f4:	dcf8      	bgt.n	80052e8 <__sccl+0x44>
 80052f6:	3002      	adds	r0, #2
 80052f8:	461a      	mov	r2, r3
 80052fa:	3201      	adds	r2, #1
 80052fc:	4296      	cmp	r6, r2
 80052fe:	54a1      	strb	r1, [r4, r2]
 8005300:	dcfb      	bgt.n	80052fa <__sccl+0x56>
 8005302:	1af2      	subs	r2, r6, r3
 8005304:	3a01      	subs	r2, #1
 8005306:	1c5d      	adds	r5, r3, #1
 8005308:	42b3      	cmp	r3, r6
 800530a:	bfa8      	it	ge
 800530c:	2200      	movge	r2, #0
 800530e:	18ab      	adds	r3, r5, r2
 8005310:	e7e1      	b.n	80052d6 <__sccl+0x32>
 8005312:	4610      	mov	r0, r2
 8005314:	e7da      	b.n	80052cc <__sccl+0x28>

08005316 <__submore>:
 8005316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800531a:	460c      	mov	r4, r1
 800531c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800531e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005322:	4299      	cmp	r1, r3
 8005324:	d11d      	bne.n	8005362 <__submore+0x4c>
 8005326:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800532a:	f7ff f92f 	bl	800458c <_malloc_r>
 800532e:	b918      	cbnz	r0, 8005338 <__submore+0x22>
 8005330:	f04f 30ff 	mov.w	r0, #4294967295
 8005334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800533c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800533e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005342:	6360      	str	r0, [r4, #52]	@ 0x34
 8005344:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005348:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800534c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005350:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005354:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005358:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800535c:	6020      	str	r0, [r4, #0]
 800535e:	2000      	movs	r0, #0
 8005360:	e7e8      	b.n	8005334 <__submore+0x1e>
 8005362:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005364:	0077      	lsls	r7, r6, #1
 8005366:	463a      	mov	r2, r7
 8005368:	f000 f848 	bl	80053fc <_realloc_r>
 800536c:	4605      	mov	r5, r0
 800536e:	2800      	cmp	r0, #0
 8005370:	d0de      	beq.n	8005330 <__submore+0x1a>
 8005372:	eb00 0806 	add.w	r8, r0, r6
 8005376:	4601      	mov	r1, r0
 8005378:	4632      	mov	r2, r6
 800537a:	4640      	mov	r0, r8
 800537c:	f000 f830 	bl	80053e0 <memcpy>
 8005380:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005384:	f8c4 8000 	str.w	r8, [r4]
 8005388:	e7e9      	b.n	800535e <__submore+0x48>

0800538a <memmove>:
 800538a:	4288      	cmp	r0, r1
 800538c:	b510      	push	{r4, lr}
 800538e:	eb01 0402 	add.w	r4, r1, r2
 8005392:	d902      	bls.n	800539a <memmove+0x10>
 8005394:	4284      	cmp	r4, r0
 8005396:	4623      	mov	r3, r4
 8005398:	d807      	bhi.n	80053aa <memmove+0x20>
 800539a:	1e43      	subs	r3, r0, #1
 800539c:	42a1      	cmp	r1, r4
 800539e:	d008      	beq.n	80053b2 <memmove+0x28>
 80053a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053a8:	e7f8      	b.n	800539c <memmove+0x12>
 80053aa:	4402      	add	r2, r0
 80053ac:	4601      	mov	r1, r0
 80053ae:	428a      	cmp	r2, r1
 80053b0:	d100      	bne.n	80053b4 <memmove+0x2a>
 80053b2:	bd10      	pop	{r4, pc}
 80053b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053bc:	e7f7      	b.n	80053ae <memmove+0x24>
	...

080053c0 <_sbrk_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d06      	ldr	r5, [pc, #24]	@ (80053dc <_sbrk_r+0x1c>)
 80053c4:	2300      	movs	r3, #0
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	602b      	str	r3, [r5, #0]
 80053cc:	f7fb fde8 	bl	8000fa0 <_sbrk>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_sbrk_r+0x1a>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b103      	cbz	r3, 80053da <_sbrk_r+0x1a>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	2000029c 	.word	0x2000029c

080053e0 <memcpy>:
 80053e0:	440a      	add	r2, r1
 80053e2:	4291      	cmp	r1, r2
 80053e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053e8:	d100      	bne.n	80053ec <memcpy+0xc>
 80053ea:	4770      	bx	lr
 80053ec:	b510      	push	{r4, lr}
 80053ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f6:	4291      	cmp	r1, r2
 80053f8:	d1f9      	bne.n	80053ee <memcpy+0xe>
 80053fa:	bd10      	pop	{r4, pc}

080053fc <_realloc_r>:
 80053fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005400:	4680      	mov	r8, r0
 8005402:	4615      	mov	r5, r2
 8005404:	460c      	mov	r4, r1
 8005406:	b921      	cbnz	r1, 8005412 <_realloc_r+0x16>
 8005408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800540c:	4611      	mov	r1, r2
 800540e:	f7ff b8bd 	b.w	800458c <_malloc_r>
 8005412:	b92a      	cbnz	r2, 8005420 <_realloc_r+0x24>
 8005414:	f7ff f84e 	bl	80044b4 <_free_r>
 8005418:	2400      	movs	r4, #0
 800541a:	4620      	mov	r0, r4
 800541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005420:	f000 f906 	bl	8005630 <_malloc_usable_size_r>
 8005424:	4285      	cmp	r5, r0
 8005426:	4606      	mov	r6, r0
 8005428:	d802      	bhi.n	8005430 <_realloc_r+0x34>
 800542a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800542e:	d8f4      	bhi.n	800541a <_realloc_r+0x1e>
 8005430:	4629      	mov	r1, r5
 8005432:	4640      	mov	r0, r8
 8005434:	f7ff f8aa 	bl	800458c <_malloc_r>
 8005438:	4607      	mov	r7, r0
 800543a:	2800      	cmp	r0, #0
 800543c:	d0ec      	beq.n	8005418 <_realloc_r+0x1c>
 800543e:	42b5      	cmp	r5, r6
 8005440:	462a      	mov	r2, r5
 8005442:	4621      	mov	r1, r4
 8005444:	bf28      	it	cs
 8005446:	4632      	movcs	r2, r6
 8005448:	f7ff ffca 	bl	80053e0 <memcpy>
 800544c:	4621      	mov	r1, r4
 800544e:	4640      	mov	r0, r8
 8005450:	f7ff f830 	bl	80044b4 <_free_r>
 8005454:	463c      	mov	r4, r7
 8005456:	e7e0      	b.n	800541a <_realloc_r+0x1e>

08005458 <_strtol_l.constprop.0>:
 8005458:	2b24      	cmp	r3, #36	@ 0x24
 800545a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800545e:	4686      	mov	lr, r0
 8005460:	4690      	mov	r8, r2
 8005462:	d801      	bhi.n	8005468 <_strtol_l.constprop.0+0x10>
 8005464:	2b01      	cmp	r3, #1
 8005466:	d106      	bne.n	8005476 <_strtol_l.constprop.0+0x1e>
 8005468:	f7fe fff8 	bl	800445c <__errno>
 800546c:	2316      	movs	r3, #22
 800546e:	6003      	str	r3, [r0, #0]
 8005470:	2000      	movs	r0, #0
 8005472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005476:	4834      	ldr	r0, [pc, #208]	@ (8005548 <_strtol_l.constprop.0+0xf0>)
 8005478:	460d      	mov	r5, r1
 800547a:	462a      	mov	r2, r5
 800547c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005480:	5d06      	ldrb	r6, [r0, r4]
 8005482:	f016 0608 	ands.w	r6, r6, #8
 8005486:	d1f8      	bne.n	800547a <_strtol_l.constprop.0+0x22>
 8005488:	2c2d      	cmp	r4, #45	@ 0x2d
 800548a:	d12d      	bne.n	80054e8 <_strtol_l.constprop.0+0x90>
 800548c:	782c      	ldrb	r4, [r5, #0]
 800548e:	2601      	movs	r6, #1
 8005490:	1c95      	adds	r5, r2, #2
 8005492:	f033 0210 	bics.w	r2, r3, #16
 8005496:	d109      	bne.n	80054ac <_strtol_l.constprop.0+0x54>
 8005498:	2c30      	cmp	r4, #48	@ 0x30
 800549a:	d12a      	bne.n	80054f2 <_strtol_l.constprop.0+0x9a>
 800549c:	782a      	ldrb	r2, [r5, #0]
 800549e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80054a2:	2a58      	cmp	r2, #88	@ 0x58
 80054a4:	d125      	bne.n	80054f2 <_strtol_l.constprop.0+0x9a>
 80054a6:	786c      	ldrb	r4, [r5, #1]
 80054a8:	2310      	movs	r3, #16
 80054aa:	3502      	adds	r5, #2
 80054ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80054b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80054b4:	2200      	movs	r2, #0
 80054b6:	fbbc f9f3 	udiv	r9, ip, r3
 80054ba:	4610      	mov	r0, r2
 80054bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80054c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80054c4:	2f09      	cmp	r7, #9
 80054c6:	d81b      	bhi.n	8005500 <_strtol_l.constprop.0+0xa8>
 80054c8:	463c      	mov	r4, r7
 80054ca:	42a3      	cmp	r3, r4
 80054cc:	dd27      	ble.n	800551e <_strtol_l.constprop.0+0xc6>
 80054ce:	1c57      	adds	r7, r2, #1
 80054d0:	d007      	beq.n	80054e2 <_strtol_l.constprop.0+0x8a>
 80054d2:	4581      	cmp	r9, r0
 80054d4:	d320      	bcc.n	8005518 <_strtol_l.constprop.0+0xc0>
 80054d6:	d101      	bne.n	80054dc <_strtol_l.constprop.0+0x84>
 80054d8:	45a2      	cmp	sl, r4
 80054da:	db1d      	blt.n	8005518 <_strtol_l.constprop.0+0xc0>
 80054dc:	fb00 4003 	mla	r0, r0, r3, r4
 80054e0:	2201      	movs	r2, #1
 80054e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054e6:	e7eb      	b.n	80054c0 <_strtol_l.constprop.0+0x68>
 80054e8:	2c2b      	cmp	r4, #43	@ 0x2b
 80054ea:	bf04      	itt	eq
 80054ec:	782c      	ldrbeq	r4, [r5, #0]
 80054ee:	1c95      	addeq	r5, r2, #2
 80054f0:	e7cf      	b.n	8005492 <_strtol_l.constprop.0+0x3a>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1da      	bne.n	80054ac <_strtol_l.constprop.0+0x54>
 80054f6:	2c30      	cmp	r4, #48	@ 0x30
 80054f8:	bf0c      	ite	eq
 80054fa:	2308      	moveq	r3, #8
 80054fc:	230a      	movne	r3, #10
 80054fe:	e7d5      	b.n	80054ac <_strtol_l.constprop.0+0x54>
 8005500:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005504:	2f19      	cmp	r7, #25
 8005506:	d801      	bhi.n	800550c <_strtol_l.constprop.0+0xb4>
 8005508:	3c37      	subs	r4, #55	@ 0x37
 800550a:	e7de      	b.n	80054ca <_strtol_l.constprop.0+0x72>
 800550c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005510:	2f19      	cmp	r7, #25
 8005512:	d804      	bhi.n	800551e <_strtol_l.constprop.0+0xc6>
 8005514:	3c57      	subs	r4, #87	@ 0x57
 8005516:	e7d8      	b.n	80054ca <_strtol_l.constprop.0+0x72>
 8005518:	f04f 32ff 	mov.w	r2, #4294967295
 800551c:	e7e1      	b.n	80054e2 <_strtol_l.constprop.0+0x8a>
 800551e:	1c53      	adds	r3, r2, #1
 8005520:	d108      	bne.n	8005534 <_strtol_l.constprop.0+0xdc>
 8005522:	2322      	movs	r3, #34	@ 0x22
 8005524:	f8ce 3000 	str.w	r3, [lr]
 8005528:	4660      	mov	r0, ip
 800552a:	f1b8 0f00 	cmp.w	r8, #0
 800552e:	d0a0      	beq.n	8005472 <_strtol_l.constprop.0+0x1a>
 8005530:	1e69      	subs	r1, r5, #1
 8005532:	e006      	b.n	8005542 <_strtol_l.constprop.0+0xea>
 8005534:	b106      	cbz	r6, 8005538 <_strtol_l.constprop.0+0xe0>
 8005536:	4240      	negs	r0, r0
 8005538:	f1b8 0f00 	cmp.w	r8, #0
 800553c:	d099      	beq.n	8005472 <_strtol_l.constprop.0+0x1a>
 800553e:	2a00      	cmp	r2, #0
 8005540:	d1f6      	bne.n	8005530 <_strtol_l.constprop.0+0xd8>
 8005542:	f8c8 1000 	str.w	r1, [r8]
 8005546:	e794      	b.n	8005472 <_strtol_l.constprop.0+0x1a>
 8005548:	08005bdf 	.word	0x08005bdf

0800554c <_strtol_r>:
 800554c:	f7ff bf84 	b.w	8005458 <_strtol_l.constprop.0>

08005550 <_strtoul_l.constprop.0>:
 8005550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005554:	4e34      	ldr	r6, [pc, #208]	@ (8005628 <_strtoul_l.constprop.0+0xd8>)
 8005556:	4686      	mov	lr, r0
 8005558:	460d      	mov	r5, r1
 800555a:	4628      	mov	r0, r5
 800555c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005560:	5d37      	ldrb	r7, [r6, r4]
 8005562:	f017 0708 	ands.w	r7, r7, #8
 8005566:	d1f8      	bne.n	800555a <_strtoul_l.constprop.0+0xa>
 8005568:	2c2d      	cmp	r4, #45	@ 0x2d
 800556a:	d12f      	bne.n	80055cc <_strtoul_l.constprop.0+0x7c>
 800556c:	782c      	ldrb	r4, [r5, #0]
 800556e:	2701      	movs	r7, #1
 8005570:	1c85      	adds	r5, r0, #2
 8005572:	f033 0010 	bics.w	r0, r3, #16
 8005576:	d109      	bne.n	800558c <_strtoul_l.constprop.0+0x3c>
 8005578:	2c30      	cmp	r4, #48	@ 0x30
 800557a:	d12c      	bne.n	80055d6 <_strtoul_l.constprop.0+0x86>
 800557c:	7828      	ldrb	r0, [r5, #0]
 800557e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005582:	2858      	cmp	r0, #88	@ 0x58
 8005584:	d127      	bne.n	80055d6 <_strtoul_l.constprop.0+0x86>
 8005586:	786c      	ldrb	r4, [r5, #1]
 8005588:	2310      	movs	r3, #16
 800558a:	3502      	adds	r5, #2
 800558c:	f04f 38ff 	mov.w	r8, #4294967295
 8005590:	2600      	movs	r6, #0
 8005592:	fbb8 f8f3 	udiv	r8, r8, r3
 8005596:	fb03 f908 	mul.w	r9, r3, r8
 800559a:	ea6f 0909 	mvn.w	r9, r9
 800559e:	4630      	mov	r0, r6
 80055a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80055a4:	f1bc 0f09 	cmp.w	ip, #9
 80055a8:	d81c      	bhi.n	80055e4 <_strtoul_l.constprop.0+0x94>
 80055aa:	4664      	mov	r4, ip
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	dd2a      	ble.n	8005606 <_strtoul_l.constprop.0+0xb6>
 80055b0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80055b4:	d007      	beq.n	80055c6 <_strtoul_l.constprop.0+0x76>
 80055b6:	4580      	cmp	r8, r0
 80055b8:	d322      	bcc.n	8005600 <_strtoul_l.constprop.0+0xb0>
 80055ba:	d101      	bne.n	80055c0 <_strtoul_l.constprop.0+0x70>
 80055bc:	45a1      	cmp	r9, r4
 80055be:	db1f      	blt.n	8005600 <_strtoul_l.constprop.0+0xb0>
 80055c0:	fb00 4003 	mla	r0, r0, r3, r4
 80055c4:	2601      	movs	r6, #1
 80055c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055ca:	e7e9      	b.n	80055a0 <_strtoul_l.constprop.0+0x50>
 80055cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80055ce:	bf04      	itt	eq
 80055d0:	782c      	ldrbeq	r4, [r5, #0]
 80055d2:	1c85      	addeq	r5, r0, #2
 80055d4:	e7cd      	b.n	8005572 <_strtoul_l.constprop.0+0x22>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1d8      	bne.n	800558c <_strtoul_l.constprop.0+0x3c>
 80055da:	2c30      	cmp	r4, #48	@ 0x30
 80055dc:	bf0c      	ite	eq
 80055de:	2308      	moveq	r3, #8
 80055e0:	230a      	movne	r3, #10
 80055e2:	e7d3      	b.n	800558c <_strtoul_l.constprop.0+0x3c>
 80055e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80055e8:	f1bc 0f19 	cmp.w	ip, #25
 80055ec:	d801      	bhi.n	80055f2 <_strtoul_l.constprop.0+0xa2>
 80055ee:	3c37      	subs	r4, #55	@ 0x37
 80055f0:	e7dc      	b.n	80055ac <_strtoul_l.constprop.0+0x5c>
 80055f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80055f6:	f1bc 0f19 	cmp.w	ip, #25
 80055fa:	d804      	bhi.n	8005606 <_strtoul_l.constprop.0+0xb6>
 80055fc:	3c57      	subs	r4, #87	@ 0x57
 80055fe:	e7d5      	b.n	80055ac <_strtoul_l.constprop.0+0x5c>
 8005600:	f04f 36ff 	mov.w	r6, #4294967295
 8005604:	e7df      	b.n	80055c6 <_strtoul_l.constprop.0+0x76>
 8005606:	1c73      	adds	r3, r6, #1
 8005608:	d106      	bne.n	8005618 <_strtoul_l.constprop.0+0xc8>
 800560a:	2322      	movs	r3, #34	@ 0x22
 800560c:	f8ce 3000 	str.w	r3, [lr]
 8005610:	4630      	mov	r0, r6
 8005612:	b932      	cbnz	r2, 8005622 <_strtoul_l.constprop.0+0xd2>
 8005614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005618:	b107      	cbz	r7, 800561c <_strtoul_l.constprop.0+0xcc>
 800561a:	4240      	negs	r0, r0
 800561c:	2a00      	cmp	r2, #0
 800561e:	d0f9      	beq.n	8005614 <_strtoul_l.constprop.0+0xc4>
 8005620:	b106      	cbz	r6, 8005624 <_strtoul_l.constprop.0+0xd4>
 8005622:	1e69      	subs	r1, r5, #1
 8005624:	6011      	str	r1, [r2, #0]
 8005626:	e7f5      	b.n	8005614 <_strtoul_l.constprop.0+0xc4>
 8005628:	08005bdf 	.word	0x08005bdf

0800562c <_strtoul_r>:
 800562c:	f7ff bf90 	b.w	8005550 <_strtoul_l.constprop.0>

08005630 <_malloc_usable_size_r>:
 8005630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005634:	1f18      	subs	r0, r3, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	bfbc      	itt	lt
 800563a:	580b      	ldrlt	r3, [r1, r0]
 800563c:	18c0      	addlt	r0, r0, r3
 800563e:	4770      	bx	lr

08005640 <_init>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr

0800564c <_fini>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr
